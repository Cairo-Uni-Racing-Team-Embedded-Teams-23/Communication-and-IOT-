
EVMS_First_board.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003210  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000068  08003320  08003320  00013320  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003388  08003388  00020060  2**0
                  CONTENTS
  4 .ARM          00000000  08003388  08003388  00020060  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003388  08003388  00020060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003388  08003388  00013388  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800338c  0800338c  0001338c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000060  20000000  08003390  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000324  20000060  080033f0  00020060  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000384  080033f0  00020384  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020060  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020089  2**0
                  CONTENTS, READONLY
 13 .debug_info   00012fcb  00000000  00000000  000200cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002d57  00000000  00000000  00033097  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_loclists 00007a54  00000000  00000000  00035dee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000b38  00000000  00000000  0003d848  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000a91  00000000  00000000  0003e380  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00018c2e  00000000  00000000  0003ee11  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0001506e  00000000  00000000  00057a3f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    00090349  00000000  00000000  0006caad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00002834  00000000  00000000  000fcdf8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000096  00000000  00000000  000ff62c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000060 	.word	0x20000060
 800012c:	00000000 	.word	0x00000000
 8000130:	08003308 	.word	0x08003308

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000064 	.word	0x20000064
 800014c:	08003308 	.word	0x08003308

08000150 <__aeabi_dmul>:
 8000150:	b570      	push	{r4, r5, r6, lr}
 8000152:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000156:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800015a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800015e:	bf1d      	ittte	ne
 8000160:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000164:	ea94 0f0c 	teqne	r4, ip
 8000168:	ea95 0f0c 	teqne	r5, ip
 800016c:	f000 f8de 	bleq	800032c <__aeabi_dmul+0x1dc>
 8000170:	442c      	add	r4, r5
 8000172:	ea81 0603 	eor.w	r6, r1, r3
 8000176:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800017a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800017e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000182:	bf18      	it	ne
 8000184:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000188:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800018c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000190:	d038      	beq.n	8000204 <__aeabi_dmul+0xb4>
 8000192:	fba0 ce02 	umull	ip, lr, r0, r2
 8000196:	f04f 0500 	mov.w	r5, #0
 800019a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800019e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80001a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80001a6:	f04f 0600 	mov.w	r6, #0
 80001aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80001ae:	f09c 0f00 	teq	ip, #0
 80001b2:	bf18      	it	ne
 80001b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80001b8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80001bc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80001c0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80001c4:	d204      	bcs.n	80001d0 <__aeabi_dmul+0x80>
 80001c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80001ca:	416d      	adcs	r5, r5
 80001cc:	eb46 0606 	adc.w	r6, r6, r6
 80001d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80001d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80001d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80001dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80001e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80001e4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80001e8:	bf88      	it	hi
 80001ea:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80001ee:	d81e      	bhi.n	800022e <__aeabi_dmul+0xde>
 80001f0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80001f4:	bf08      	it	eq
 80001f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80001fa:	f150 0000 	adcs.w	r0, r0, #0
 80001fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000202:	bd70      	pop	{r4, r5, r6, pc}
 8000204:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000208:	ea46 0101 	orr.w	r1, r6, r1
 800020c:	ea40 0002 	orr.w	r0, r0, r2
 8000210:	ea81 0103 	eor.w	r1, r1, r3
 8000214:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000218:	bfc2      	ittt	gt
 800021a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800021e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000222:	bd70      	popgt	{r4, r5, r6, pc}
 8000224:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000228:	f04f 0e00 	mov.w	lr, #0
 800022c:	3c01      	subs	r4, #1
 800022e:	f300 80ab 	bgt.w	8000388 <__aeabi_dmul+0x238>
 8000232:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000236:	bfde      	ittt	le
 8000238:	2000      	movle	r0, #0
 800023a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800023e:	bd70      	pople	{r4, r5, r6, pc}
 8000240:	f1c4 0400 	rsb	r4, r4, #0
 8000244:	3c20      	subs	r4, #32
 8000246:	da35      	bge.n	80002b4 <__aeabi_dmul+0x164>
 8000248:	340c      	adds	r4, #12
 800024a:	dc1b      	bgt.n	8000284 <__aeabi_dmul+0x134>
 800024c:	f104 0414 	add.w	r4, r4, #20
 8000250:	f1c4 0520 	rsb	r5, r4, #32
 8000254:	fa00 f305 	lsl.w	r3, r0, r5
 8000258:	fa20 f004 	lsr.w	r0, r0, r4
 800025c:	fa01 f205 	lsl.w	r2, r1, r5
 8000260:	ea40 0002 	orr.w	r0, r0, r2
 8000264:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000268:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800026c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000270:	fa21 f604 	lsr.w	r6, r1, r4
 8000274:	eb42 0106 	adc.w	r1, r2, r6
 8000278:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800027c:	bf08      	it	eq
 800027e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000282:	bd70      	pop	{r4, r5, r6, pc}
 8000284:	f1c4 040c 	rsb	r4, r4, #12
 8000288:	f1c4 0520 	rsb	r5, r4, #32
 800028c:	fa00 f304 	lsl.w	r3, r0, r4
 8000290:	fa20 f005 	lsr.w	r0, r0, r5
 8000294:	fa01 f204 	lsl.w	r2, r1, r4
 8000298:	ea40 0002 	orr.w	r0, r0, r2
 800029c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80002a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80002a4:	f141 0100 	adc.w	r1, r1, #0
 80002a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80002ac:	bf08      	it	eq
 80002ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80002b2:	bd70      	pop	{r4, r5, r6, pc}
 80002b4:	f1c4 0520 	rsb	r5, r4, #32
 80002b8:	fa00 f205 	lsl.w	r2, r0, r5
 80002bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80002c0:	fa20 f304 	lsr.w	r3, r0, r4
 80002c4:	fa01 f205 	lsl.w	r2, r1, r5
 80002c8:	ea43 0302 	orr.w	r3, r3, r2
 80002cc:	fa21 f004 	lsr.w	r0, r1, r4
 80002d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80002d4:	fa21 f204 	lsr.w	r2, r1, r4
 80002d8:	ea20 0002 	bic.w	r0, r0, r2
 80002dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80002e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80002e4:	bf08      	it	eq
 80002e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80002ea:	bd70      	pop	{r4, r5, r6, pc}
 80002ec:	f094 0f00 	teq	r4, #0
 80002f0:	d10f      	bne.n	8000312 <__aeabi_dmul+0x1c2>
 80002f2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80002f6:	0040      	lsls	r0, r0, #1
 80002f8:	eb41 0101 	adc.w	r1, r1, r1
 80002fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000300:	bf08      	it	eq
 8000302:	3c01      	subeq	r4, #1
 8000304:	d0f7      	beq.n	80002f6 <__aeabi_dmul+0x1a6>
 8000306:	ea41 0106 	orr.w	r1, r1, r6
 800030a:	f095 0f00 	teq	r5, #0
 800030e:	bf18      	it	ne
 8000310:	4770      	bxne	lr
 8000312:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000316:	0052      	lsls	r2, r2, #1
 8000318:	eb43 0303 	adc.w	r3, r3, r3
 800031c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000320:	bf08      	it	eq
 8000322:	3d01      	subeq	r5, #1
 8000324:	d0f7      	beq.n	8000316 <__aeabi_dmul+0x1c6>
 8000326:	ea43 0306 	orr.w	r3, r3, r6
 800032a:	4770      	bx	lr
 800032c:	ea94 0f0c 	teq	r4, ip
 8000330:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000334:	bf18      	it	ne
 8000336:	ea95 0f0c 	teqne	r5, ip
 800033a:	d00c      	beq.n	8000356 <__aeabi_dmul+0x206>
 800033c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000340:	bf18      	it	ne
 8000342:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000346:	d1d1      	bne.n	80002ec <__aeabi_dmul+0x19c>
 8000348:	ea81 0103 	eor.w	r1, r1, r3
 800034c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000350:	f04f 0000 	mov.w	r0, #0
 8000354:	bd70      	pop	{r4, r5, r6, pc}
 8000356:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800035a:	bf06      	itte	eq
 800035c:	4610      	moveq	r0, r2
 800035e:	4619      	moveq	r1, r3
 8000360:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000364:	d019      	beq.n	800039a <__aeabi_dmul+0x24a>
 8000366:	ea94 0f0c 	teq	r4, ip
 800036a:	d102      	bne.n	8000372 <__aeabi_dmul+0x222>
 800036c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000370:	d113      	bne.n	800039a <__aeabi_dmul+0x24a>
 8000372:	ea95 0f0c 	teq	r5, ip
 8000376:	d105      	bne.n	8000384 <__aeabi_dmul+0x234>
 8000378:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800037c:	bf1c      	itt	ne
 800037e:	4610      	movne	r0, r2
 8000380:	4619      	movne	r1, r3
 8000382:	d10a      	bne.n	800039a <__aeabi_dmul+0x24a>
 8000384:	ea81 0103 	eor.w	r1, r1, r3
 8000388:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800038c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000390:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000394:	f04f 0000 	mov.w	r0, #0
 8000398:	bd70      	pop	{r4, r5, r6, pc}
 800039a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800039e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80003a2:	bd70      	pop	{r4, r5, r6, pc}

080003a4 <__aeabi_drsub>:
 80003a4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80003a8:	e002      	b.n	80003b0 <__adddf3>
 80003aa:	bf00      	nop

080003ac <__aeabi_dsub>:
 80003ac:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080003b0 <__adddf3>:
 80003b0:	b530      	push	{r4, r5, lr}
 80003b2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80003b6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80003ba:	ea94 0f05 	teq	r4, r5
 80003be:	bf08      	it	eq
 80003c0:	ea90 0f02 	teqeq	r0, r2
 80003c4:	bf1f      	itttt	ne
 80003c6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003ca:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003ce:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80003d2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003d6:	f000 80e2 	beq.w	800059e <__adddf3+0x1ee>
 80003da:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003de:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003e2:	bfb8      	it	lt
 80003e4:	426d      	neglt	r5, r5
 80003e6:	dd0c      	ble.n	8000402 <__adddf3+0x52>
 80003e8:	442c      	add	r4, r5
 80003ea:	ea80 0202 	eor.w	r2, r0, r2
 80003ee:	ea81 0303 	eor.w	r3, r1, r3
 80003f2:	ea82 0000 	eor.w	r0, r2, r0
 80003f6:	ea83 0101 	eor.w	r1, r3, r1
 80003fa:	ea80 0202 	eor.w	r2, r0, r2
 80003fe:	ea81 0303 	eor.w	r3, r1, r3
 8000402:	2d36      	cmp	r5, #54	; 0x36
 8000404:	bf88      	it	hi
 8000406:	bd30      	pophi	{r4, r5, pc}
 8000408:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800040c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000410:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000414:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000418:	d002      	beq.n	8000420 <__adddf3+0x70>
 800041a:	4240      	negs	r0, r0
 800041c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000420:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000424:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000428:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800042c:	d002      	beq.n	8000434 <__adddf3+0x84>
 800042e:	4252      	negs	r2, r2
 8000430:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000434:	ea94 0f05 	teq	r4, r5
 8000438:	f000 80a7 	beq.w	800058a <__adddf3+0x1da>
 800043c:	f1a4 0401 	sub.w	r4, r4, #1
 8000440:	f1d5 0e20 	rsbs	lr, r5, #32
 8000444:	db0d      	blt.n	8000462 <__adddf3+0xb2>
 8000446:	fa02 fc0e 	lsl.w	ip, r2, lr
 800044a:	fa22 f205 	lsr.w	r2, r2, r5
 800044e:	1880      	adds	r0, r0, r2
 8000450:	f141 0100 	adc.w	r1, r1, #0
 8000454:	fa03 f20e 	lsl.w	r2, r3, lr
 8000458:	1880      	adds	r0, r0, r2
 800045a:	fa43 f305 	asr.w	r3, r3, r5
 800045e:	4159      	adcs	r1, r3
 8000460:	e00e      	b.n	8000480 <__adddf3+0xd0>
 8000462:	f1a5 0520 	sub.w	r5, r5, #32
 8000466:	f10e 0e20 	add.w	lr, lr, #32
 800046a:	2a01      	cmp	r2, #1
 800046c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000470:	bf28      	it	cs
 8000472:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000476:	fa43 f305 	asr.w	r3, r3, r5
 800047a:	18c0      	adds	r0, r0, r3
 800047c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000480:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000484:	d507      	bpl.n	8000496 <__adddf3+0xe6>
 8000486:	f04f 0e00 	mov.w	lr, #0
 800048a:	f1dc 0c00 	rsbs	ip, ip, #0
 800048e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000492:	eb6e 0101 	sbc.w	r1, lr, r1
 8000496:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800049a:	d31b      	bcc.n	80004d4 <__adddf3+0x124>
 800049c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80004a0:	d30c      	bcc.n	80004bc <__adddf3+0x10c>
 80004a2:	0849      	lsrs	r1, r1, #1
 80004a4:	ea5f 0030 	movs.w	r0, r0, rrx
 80004a8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80004ac:	f104 0401 	add.w	r4, r4, #1
 80004b0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80004b4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80004b8:	f080 809a 	bcs.w	80005f0 <__adddf3+0x240>
 80004bc:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80004c0:	bf08      	it	eq
 80004c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004c6:	f150 0000 	adcs.w	r0, r0, #0
 80004ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004ce:	ea41 0105 	orr.w	r1, r1, r5
 80004d2:	bd30      	pop	{r4, r5, pc}
 80004d4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004d8:	4140      	adcs	r0, r0
 80004da:	eb41 0101 	adc.w	r1, r1, r1
 80004de:	3c01      	subs	r4, #1
 80004e0:	bf28      	it	cs
 80004e2:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80004e6:	d2e9      	bcs.n	80004bc <__adddf3+0x10c>
 80004e8:	f091 0f00 	teq	r1, #0
 80004ec:	bf04      	itt	eq
 80004ee:	4601      	moveq	r1, r0
 80004f0:	2000      	moveq	r0, #0
 80004f2:	fab1 f381 	clz	r3, r1
 80004f6:	bf08      	it	eq
 80004f8:	3320      	addeq	r3, #32
 80004fa:	f1a3 030b 	sub.w	r3, r3, #11
 80004fe:	f1b3 0220 	subs.w	r2, r3, #32
 8000502:	da0c      	bge.n	800051e <__adddf3+0x16e>
 8000504:	320c      	adds	r2, #12
 8000506:	dd08      	ble.n	800051a <__adddf3+0x16a>
 8000508:	f102 0c14 	add.w	ip, r2, #20
 800050c:	f1c2 020c 	rsb	r2, r2, #12
 8000510:	fa01 f00c 	lsl.w	r0, r1, ip
 8000514:	fa21 f102 	lsr.w	r1, r1, r2
 8000518:	e00c      	b.n	8000534 <__adddf3+0x184>
 800051a:	f102 0214 	add.w	r2, r2, #20
 800051e:	bfd8      	it	le
 8000520:	f1c2 0c20 	rsble	ip, r2, #32
 8000524:	fa01 f102 	lsl.w	r1, r1, r2
 8000528:	fa20 fc0c 	lsr.w	ip, r0, ip
 800052c:	bfdc      	itt	le
 800052e:	ea41 010c 	orrle.w	r1, r1, ip
 8000532:	4090      	lslle	r0, r2
 8000534:	1ae4      	subs	r4, r4, r3
 8000536:	bfa2      	ittt	ge
 8000538:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800053c:	4329      	orrge	r1, r5
 800053e:	bd30      	popge	{r4, r5, pc}
 8000540:	ea6f 0404 	mvn.w	r4, r4
 8000544:	3c1f      	subs	r4, #31
 8000546:	da1c      	bge.n	8000582 <__adddf3+0x1d2>
 8000548:	340c      	adds	r4, #12
 800054a:	dc0e      	bgt.n	800056a <__adddf3+0x1ba>
 800054c:	f104 0414 	add.w	r4, r4, #20
 8000550:	f1c4 0220 	rsb	r2, r4, #32
 8000554:	fa20 f004 	lsr.w	r0, r0, r4
 8000558:	fa01 f302 	lsl.w	r3, r1, r2
 800055c:	ea40 0003 	orr.w	r0, r0, r3
 8000560:	fa21 f304 	lsr.w	r3, r1, r4
 8000564:	ea45 0103 	orr.w	r1, r5, r3
 8000568:	bd30      	pop	{r4, r5, pc}
 800056a:	f1c4 040c 	rsb	r4, r4, #12
 800056e:	f1c4 0220 	rsb	r2, r4, #32
 8000572:	fa20 f002 	lsr.w	r0, r0, r2
 8000576:	fa01 f304 	lsl.w	r3, r1, r4
 800057a:	ea40 0003 	orr.w	r0, r0, r3
 800057e:	4629      	mov	r1, r5
 8000580:	bd30      	pop	{r4, r5, pc}
 8000582:	fa21 f004 	lsr.w	r0, r1, r4
 8000586:	4629      	mov	r1, r5
 8000588:	bd30      	pop	{r4, r5, pc}
 800058a:	f094 0f00 	teq	r4, #0
 800058e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000592:	bf06      	itte	eq
 8000594:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000598:	3401      	addeq	r4, #1
 800059a:	3d01      	subne	r5, #1
 800059c:	e74e      	b.n	800043c <__adddf3+0x8c>
 800059e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005a2:	bf18      	it	ne
 80005a4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80005a8:	d029      	beq.n	80005fe <__adddf3+0x24e>
 80005aa:	ea94 0f05 	teq	r4, r5
 80005ae:	bf08      	it	eq
 80005b0:	ea90 0f02 	teqeq	r0, r2
 80005b4:	d005      	beq.n	80005c2 <__adddf3+0x212>
 80005b6:	ea54 0c00 	orrs.w	ip, r4, r0
 80005ba:	bf04      	itt	eq
 80005bc:	4619      	moveq	r1, r3
 80005be:	4610      	moveq	r0, r2
 80005c0:	bd30      	pop	{r4, r5, pc}
 80005c2:	ea91 0f03 	teq	r1, r3
 80005c6:	bf1e      	ittt	ne
 80005c8:	2100      	movne	r1, #0
 80005ca:	2000      	movne	r0, #0
 80005cc:	bd30      	popne	{r4, r5, pc}
 80005ce:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80005d2:	d105      	bne.n	80005e0 <__adddf3+0x230>
 80005d4:	0040      	lsls	r0, r0, #1
 80005d6:	4149      	adcs	r1, r1
 80005d8:	bf28      	it	cs
 80005da:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80005de:	bd30      	pop	{r4, r5, pc}
 80005e0:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80005e4:	bf3c      	itt	cc
 80005e6:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80005ea:	bd30      	popcc	{r4, r5, pc}
 80005ec:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005f0:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80005f4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80005f8:	f04f 0000 	mov.w	r0, #0
 80005fc:	bd30      	pop	{r4, r5, pc}
 80005fe:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000602:	bf1a      	itte	ne
 8000604:	4619      	movne	r1, r3
 8000606:	4610      	movne	r0, r2
 8000608:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800060c:	bf1c      	itt	ne
 800060e:	460b      	movne	r3, r1
 8000610:	4602      	movne	r2, r0
 8000612:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000616:	bf06      	itte	eq
 8000618:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800061c:	ea91 0f03 	teqeq	r1, r3
 8000620:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000624:	bd30      	pop	{r4, r5, pc}
 8000626:	bf00      	nop

08000628 <__aeabi_ui2d>:
 8000628:	f090 0f00 	teq	r0, #0
 800062c:	bf04      	itt	eq
 800062e:	2100      	moveq	r1, #0
 8000630:	4770      	bxeq	lr
 8000632:	b530      	push	{r4, r5, lr}
 8000634:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000638:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800063c:	f04f 0500 	mov.w	r5, #0
 8000640:	f04f 0100 	mov.w	r1, #0
 8000644:	e750      	b.n	80004e8 <__adddf3+0x138>
 8000646:	bf00      	nop

08000648 <__aeabi_i2d>:
 8000648:	f090 0f00 	teq	r0, #0
 800064c:	bf04      	itt	eq
 800064e:	2100      	moveq	r1, #0
 8000650:	4770      	bxeq	lr
 8000652:	b530      	push	{r4, r5, lr}
 8000654:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000658:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800065c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000660:	bf48      	it	mi
 8000662:	4240      	negmi	r0, r0
 8000664:	f04f 0100 	mov.w	r1, #0
 8000668:	e73e      	b.n	80004e8 <__adddf3+0x138>
 800066a:	bf00      	nop

0800066c <__aeabi_f2d>:
 800066c:	0042      	lsls	r2, r0, #1
 800066e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000672:	ea4f 0131 	mov.w	r1, r1, rrx
 8000676:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800067a:	bf1f      	itttt	ne
 800067c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000680:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000684:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000688:	4770      	bxne	lr
 800068a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800068e:	bf08      	it	eq
 8000690:	4770      	bxeq	lr
 8000692:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000696:	bf04      	itt	eq
 8000698:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 800069c:	4770      	bxeq	lr
 800069e:	b530      	push	{r4, r5, lr}
 80006a0:	f44f 7460 	mov.w	r4, #896	; 0x380
 80006a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80006a8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006ac:	e71c      	b.n	80004e8 <__adddf3+0x138>
 80006ae:	bf00      	nop

080006b0 <__aeabi_ul2d>:
 80006b0:	ea50 0201 	orrs.w	r2, r0, r1
 80006b4:	bf08      	it	eq
 80006b6:	4770      	bxeq	lr
 80006b8:	b530      	push	{r4, r5, lr}
 80006ba:	f04f 0500 	mov.w	r5, #0
 80006be:	e00a      	b.n	80006d6 <__aeabi_l2d+0x16>

080006c0 <__aeabi_l2d>:
 80006c0:	ea50 0201 	orrs.w	r2, r0, r1
 80006c4:	bf08      	it	eq
 80006c6:	4770      	bxeq	lr
 80006c8:	b530      	push	{r4, r5, lr}
 80006ca:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80006ce:	d502      	bpl.n	80006d6 <__aeabi_l2d+0x16>
 80006d0:	4240      	negs	r0, r0
 80006d2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006d6:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006da:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006de:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006e2:	f43f aed8 	beq.w	8000496 <__adddf3+0xe6>
 80006e6:	f04f 0203 	mov.w	r2, #3
 80006ea:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006ee:	bf18      	it	ne
 80006f0:	3203      	addne	r2, #3
 80006f2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006f6:	bf18      	it	ne
 80006f8:	3203      	addne	r2, #3
 80006fa:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80006fe:	f1c2 0320 	rsb	r3, r2, #32
 8000702:	fa00 fc03 	lsl.w	ip, r0, r3
 8000706:	fa20 f002 	lsr.w	r0, r0, r2
 800070a:	fa01 fe03 	lsl.w	lr, r1, r3
 800070e:	ea40 000e 	orr.w	r0, r0, lr
 8000712:	fa21 f102 	lsr.w	r1, r1, r2
 8000716:	4414      	add	r4, r2
 8000718:	e6bd      	b.n	8000496 <__adddf3+0xe6>
 800071a:	bf00      	nop

0800071c <__gedf2>:
 800071c:	f04f 3cff 	mov.w	ip, #4294967295
 8000720:	e006      	b.n	8000730 <__cmpdf2+0x4>
 8000722:	bf00      	nop

08000724 <__ledf2>:
 8000724:	f04f 0c01 	mov.w	ip, #1
 8000728:	e002      	b.n	8000730 <__cmpdf2+0x4>
 800072a:	bf00      	nop

0800072c <__cmpdf2>:
 800072c:	f04f 0c01 	mov.w	ip, #1
 8000730:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000734:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000738:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800073c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000740:	bf18      	it	ne
 8000742:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000746:	d01b      	beq.n	8000780 <__cmpdf2+0x54>
 8000748:	b001      	add	sp, #4
 800074a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800074e:	bf0c      	ite	eq
 8000750:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000754:	ea91 0f03 	teqne	r1, r3
 8000758:	bf02      	ittt	eq
 800075a:	ea90 0f02 	teqeq	r0, r2
 800075e:	2000      	moveq	r0, #0
 8000760:	4770      	bxeq	lr
 8000762:	f110 0f00 	cmn.w	r0, #0
 8000766:	ea91 0f03 	teq	r1, r3
 800076a:	bf58      	it	pl
 800076c:	4299      	cmppl	r1, r3
 800076e:	bf08      	it	eq
 8000770:	4290      	cmpeq	r0, r2
 8000772:	bf2c      	ite	cs
 8000774:	17d8      	asrcs	r0, r3, #31
 8000776:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800077a:	f040 0001 	orr.w	r0, r0, #1
 800077e:	4770      	bx	lr
 8000780:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000784:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000788:	d102      	bne.n	8000790 <__cmpdf2+0x64>
 800078a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800078e:	d107      	bne.n	80007a0 <__cmpdf2+0x74>
 8000790:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000794:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000798:	d1d6      	bne.n	8000748 <__cmpdf2+0x1c>
 800079a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800079e:	d0d3      	beq.n	8000748 <__cmpdf2+0x1c>
 80007a0:	f85d 0b04 	ldr.w	r0, [sp], #4
 80007a4:	4770      	bx	lr
 80007a6:	bf00      	nop

080007a8 <__aeabi_cdrcmple>:
 80007a8:	4684      	mov	ip, r0
 80007aa:	4610      	mov	r0, r2
 80007ac:	4662      	mov	r2, ip
 80007ae:	468c      	mov	ip, r1
 80007b0:	4619      	mov	r1, r3
 80007b2:	4663      	mov	r3, ip
 80007b4:	e000      	b.n	80007b8 <__aeabi_cdcmpeq>
 80007b6:	bf00      	nop

080007b8 <__aeabi_cdcmpeq>:
 80007b8:	b501      	push	{r0, lr}
 80007ba:	f7ff ffb7 	bl	800072c <__cmpdf2>
 80007be:	2800      	cmp	r0, #0
 80007c0:	bf48      	it	mi
 80007c2:	f110 0f00 	cmnmi.w	r0, #0
 80007c6:	bd01      	pop	{r0, pc}

080007c8 <__aeabi_dcmpeq>:
 80007c8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80007cc:	f7ff fff4 	bl	80007b8 <__aeabi_cdcmpeq>
 80007d0:	bf0c      	ite	eq
 80007d2:	2001      	moveq	r0, #1
 80007d4:	2000      	movne	r0, #0
 80007d6:	f85d fb08 	ldr.w	pc, [sp], #8
 80007da:	bf00      	nop

080007dc <__aeabi_dcmplt>:
 80007dc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80007e0:	f7ff ffea 	bl	80007b8 <__aeabi_cdcmpeq>
 80007e4:	bf34      	ite	cc
 80007e6:	2001      	movcc	r0, #1
 80007e8:	2000      	movcs	r0, #0
 80007ea:	f85d fb08 	ldr.w	pc, [sp], #8
 80007ee:	bf00      	nop

080007f0 <__aeabi_dcmple>:
 80007f0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80007f4:	f7ff ffe0 	bl	80007b8 <__aeabi_cdcmpeq>
 80007f8:	bf94      	ite	ls
 80007fa:	2001      	movls	r0, #1
 80007fc:	2000      	movhi	r0, #0
 80007fe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000802:	bf00      	nop

08000804 <__aeabi_dcmpge>:
 8000804:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000808:	f7ff ffce 	bl	80007a8 <__aeabi_cdrcmple>
 800080c:	bf94      	ite	ls
 800080e:	2001      	movls	r0, #1
 8000810:	2000      	movhi	r0, #0
 8000812:	f85d fb08 	ldr.w	pc, [sp], #8
 8000816:	bf00      	nop

08000818 <__aeabi_dcmpgt>:
 8000818:	f84d ed08 	str.w	lr, [sp, #-8]!
 800081c:	f7ff ffc4 	bl	80007a8 <__aeabi_cdrcmple>
 8000820:	bf34      	ite	cc
 8000822:	2001      	movcc	r0, #1
 8000824:	2000      	movcs	r0, #0
 8000826:	f85d fb08 	ldr.w	pc, [sp], #8
 800082a:	bf00      	nop

0800082c <uint16_t_Read_APPS1>:
	uint16_t apps1_read=0; /* variable to store the sum of the readings */

	/* read the ADC value 10 times*/
	for(int i=0;i<10;i++)
	{
		apps1_read+=ADC_values[APP1];
 800082c:	4b04      	ldr	r3, [pc, #16]	; (8000840 <uint16_t_Read_APPS1+0x14>)
 800082e:	8818      	ldrh	r0, [r3, #0]
	}

	/* return the average */
	return (apps1_read/10);

}
 8000830:	230a      	movs	r3, #10
		apps1_read+=ADC_values[APP1];
 8000832:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8000836:	0040      	lsls	r0, r0, #1
	return (apps1_read/10);
 8000838:	b280      	uxth	r0, r0
}
 800083a:	fbb0 f0f3 	udiv	r0, r0, r3
 800083e:	4770      	bx	lr
 8000840:	2000007c 	.word	0x2000007c

08000844 <uint16_t_Read_APPS2>:
	uint16_t apps2_read=0;/* variable to store the sum of the readings */

	/* read the ADC value 10 times*/
	for(int i=0;i<10;i++)
	{
		apps2_read+=ADC_values[APP2];
 8000844:	4b04      	ldr	r3, [pc, #16]	; (8000858 <uint16_t_Read_APPS2+0x14>)
 8000846:	8858      	ldrh	r0, [r3, #2]
	}

	/* return the average */
	return (apps2_read/10);

}
 8000848:	230a      	movs	r3, #10
		apps2_read+=ADC_values[APP2];
 800084a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800084e:	0040      	lsls	r0, r0, #1
	return (apps2_read/10);
 8000850:	b280      	uxth	r0, r0
}
 8000852:	fbb0 f0f3 	udiv	r0, r0, r3
 8000856:	4770      	bx	lr
 8000858:	2000007c 	.word	0x2000007c
 800085c:	00000000 	.word	0x00000000

08000860 <Check_APPS>:
 * pedal, allowing a difference less than 10% from the reading of either
 * the pedals.
 * 2. If the difference excide this value then there is an error.
 */
void Check_APPS()
{
 8000860:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

	uint16_t apps1_read= uint16_t_Read_APPS1(); /* variable to store first pedal reading */
 8000862:	f7ff ffe3 	bl	800082c <uint16_t_Read_APPS1>
 8000866:	4604      	mov	r4, r0
	uint16_t apps2_read= uint16_t_Read_APPS2(); /* variable to store second pedal reading */
 8000868:	f7ff ffec 	bl	8000844 <uint16_t_Read_APPS2>
 800086c:	4605      	mov	r5, r0
	uint16_t difference; /* variable to store the difference between the two readings */

	/* check which reading is greater to subtract from it */
	if(apps1_read>apps2_read)
 800086e:	4284      	cmp	r4, r0
		difference =apps1_read-apps2_read;
 8000870:	bf8c      	ite	hi
 8000872:	1a20      	subhi	r0, r4, r0
	else
		difference =apps2_read-apps1_read;
 8000874:	1b28      	subls	r0, r5, r4
 8000876:	b280      	uxth	r0, r0

	/* handle the error if the difference is greater than 10% */
	if(difference> 0.1* apps2_read || difference> 0.1* apps1_read){
 8000878:	f7ff fee6 	bl	8000648 <__aeabi_i2d>
 800087c:	4606      	mov	r6, r0
 800087e:	4628      	mov	r0, r5
 8000880:	460f      	mov	r7, r1
 8000882:	f7ff fee1 	bl	8000648 <__aeabi_i2d>
 8000886:	a310      	add	r3, pc, #64	; (adr r3, 80008c8 <Check_APPS+0x68>)
 8000888:	e9d3 2300 	ldrd	r2, r3, [r3]
 800088c:	f7ff fc60 	bl	8000150 <__aeabi_dmul>
 8000890:	4602      	mov	r2, r0
 8000892:	460b      	mov	r3, r1
 8000894:	4630      	mov	r0, r6
 8000896:	4639      	mov	r1, r7
 8000898:	f7ff ffbe 	bl	8000818 <__aeabi_dcmpgt>
 800089c:	b970      	cbnz	r0, 80008bc <Check_APPS+0x5c>
 800089e:	4620      	mov	r0, r4
 80008a0:	f7ff fed2 	bl	8000648 <__aeabi_i2d>
 80008a4:	a308      	add	r3, pc, #32	; (adr r3, 80008c8 <Check_APPS+0x68>)
 80008a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80008aa:	f7ff fc51 	bl	8000150 <__aeabi_dmul>
 80008ae:	4602      	mov	r2, r0
 80008b0:	460b      	mov	r3, r1
 80008b2:	4630      	mov	r0, r6
 80008b4:	4639      	mov	r1, r7
 80008b6:	f7ff ffaf 	bl	8000818 <__aeabi_dcmpgt>
 80008ba:	b110      	cbz	r0, 80008c2 <Check_APPS+0x62>
		errorType = ERROR_CheckAPPS;
 80008bc:	2201      	movs	r2, #1
 80008be:	4b04      	ldr	r3, [pc, #16]	; (80008d0 <Check_APPS+0x70>)
 80008c0:	701a      	strb	r2, [r3, #0]
		//ErrorAction();
	}
}
 80008c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80008c4:	f3af 8000 	nop.w
 80008c8:	9999999a 	.word	0x9999999a
 80008cc:	3fb99999 	.word	0x3fb99999
 80008d0:	20000000 	.word	0x20000000

080008d4 <Check_Activasion_Logic>:
 * This function to activate the drive mode under the conditions:
 * 1. RTD button has been pressed for 3 seconds
 * 2. The brake angle has a value more than a required one
 */
void Check_Activasion_Logic()
{
 80008d4:	b570      	push	{r4, r5, r6, lr}
	/* get the time when the RTD button is pressed */
	uint32_t time_on_press=HAL_GetTick();
 80008d6:	f000 fcd7 	bl	8001288 <HAL_GetTick>
 80008da:	4604      	mov	r4, r0

	/* this while is broken when the rtd button is released before 3 seconds or the brakes
	 * pedal is released before 3 seconds */

	//value of angle brakes might be change
	while( (time_difference<3000) && (HAL_GPIO_ReadPin(RTD_BTN_GPIO_Port,RTD_BTN_Pin)) &&  (ADC_values[BRAKE_ANGLE]>VAL_BRAKE_ANGLE_RTD) )
 80008dc:	4e18      	ldr	r6, [pc, #96]	; (8000940 <Check_Activasion_Logic+0x6c>)
 80008de:	4d19      	ldr	r5, [pc, #100]	; (8000944 <Check_Activasion_Logic+0x70>)
 80008e0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80008e4:	4630      	mov	r0, r6
 80008e6:	f001 f93f 	bl	8001b68 <HAL_GPIO_ReadPin>
 80008ea:	b118      	cbz	r0, 80008f4 <Check_Activasion_Logic+0x20>
 80008ec:	88ab      	ldrh	r3, [r5, #4]
 80008ee:	f5b3 7f61 	cmp.w	r3, #900	; 0x384
 80008f2:	d800      	bhi.n	80008f6 <Check_Activasion_Logic+0x22>
		HAL_Delay(50);

		/* Enter the drive mode */
		nextStateM=DRIVE;
	}
}
 80008f4:	bd70      	pop	{r4, r5, r6, pc}
		time_difference=HAL_GetTick()-time_on_press;
 80008f6:	f000 fcc7 	bl	8001288 <HAL_GetTick>
	while( (time_difference<3000) && (HAL_GPIO_ReadPin(RTD_BTN_GPIO_Port,RTD_BTN_Pin)) &&  (ADC_values[BRAKE_ANGLE]>VAL_BRAKE_ANGLE_RTD) )
 80008fa:	f640 33b7 	movw	r3, #2999	; 0xbb7
		time_difference=HAL_GetTick()-time_on_press;
 80008fe:	1b00      	subs	r0, r0, r4
	while( (time_difference<3000) && (HAL_GPIO_ReadPin(RTD_BTN_GPIO_Port,RTD_BTN_Pin)) &&  (ADC_values[BRAKE_ANGLE]>VAL_BRAKE_ANGLE_RTD) )
 8000900:	4298      	cmp	r0, r3
 8000902:	d9ed      	bls.n	80008e0 <Check_Activasion_Logic+0xc>
		HAL_GPIO_WritePin(RTDS_GPIO_Port,RTDS_Pin,1);
 8000904:	2201      	movs	r2, #1
 8000906:	2104      	movs	r1, #4
 8000908:	480f      	ldr	r0, [pc, #60]	; (8000948 <Check_Activasion_Logic+0x74>)
 800090a:	f001 f933 	bl	8001b74 <HAL_GPIO_WritePin>
		HAL_Delay(2000);
 800090e:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000912:	f000 fcbf 	bl	8001294 <HAL_Delay>
		HAL_GPIO_WritePin(RTDS_GPIO_Port,RTDS_Pin,0);
 8000916:	2200      	movs	r2, #0
 8000918:	2104      	movs	r1, #4
 800091a:	480b      	ldr	r0, [pc, #44]	; (8000948 <Check_Activasion_Logic+0x74>)
 800091c:	f001 f92a 	bl	8001b74 <HAL_GPIO_WritePin>
		while(HAL_GPIO_ReadPin(RTD_BTN_GPIO_Port,RTD_BTN_Pin));
 8000920:	4c07      	ldr	r4, [pc, #28]	; (8000940 <Check_Activasion_Logic+0x6c>)
 8000922:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000926:	4620      	mov	r0, r4
 8000928:	f001 f91e 	bl	8001b68 <HAL_GPIO_ReadPin>
 800092c:	2800      	cmp	r0, #0
 800092e:	d1f8      	bne.n	8000922 <Check_Activasion_Logic+0x4e>
		HAL_Delay(50);
 8000930:	2032      	movs	r0, #50	; 0x32
 8000932:	f000 fcaf 	bl	8001294 <HAL_Delay>
		nextStateM=DRIVE;
 8000936:	2203      	movs	r2, #3
 8000938:	4b04      	ldr	r3, [pc, #16]	; (800094c <Check_Activasion_Logic+0x78>)
 800093a:	701a      	strb	r2, [r3, #0]
}
 800093c:	e7da      	b.n	80008f4 <Check_Activasion_Logic+0x20>
 800093e:	bf00      	nop
 8000940:	40010c00 	.word	0x40010c00
 8000944:	2000007c 	.word	0x2000007c
 8000948:	40010800 	.word	0x40010800
 800094c:	200000e7 	.word	0x200000e7

08000950 <IDLE_Func>:
void IDLE_Func()
{
	/* Put 0 volts on the other side of the relay to complete the shutdown circuit
	 * It is normally open and the 0 closes it
	*/
	HAL_GPIO_WritePin(EVMS_RELAY_GPIO_Port,EVMS_RELAY_Pin, 0);
 8000950:	2108      	movs	r1, #8
{
 8000952:	b510      	push	{r4, lr}
	HAL_GPIO_WritePin(EVMS_RELAY_GPIO_Port,EVMS_RELAY_Pin, 0);
 8000954:	4813      	ldr	r0, [pc, #76]	; (80009a4 <IDLE_Func+0x54>)
 8000956:	2200      	movs	r2, #0
 8000958:	f001 f90c 	bl	8001b74 <HAL_GPIO_WritePin>

	/*if the start button is not pressed then the next state is still IDLE state */
	if(! HAL_GPIO_ReadPin(START_BTN_GPIO_Port,START_BTN_Pin))
 800095c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000960:	4811      	ldr	r0, [pc, #68]	; (80009a8 <IDLE_Func+0x58>)
 8000962:	f001 f901 	bl	8001b68 <HAL_GPIO_ReadPin>
 8000966:	b930      	cbnz	r0, 8000976 <IDLE_Func+0x26>
	{
		/* still in idle state */
		nextStateM=IDLE;
 8000968:	4b10      	ldr	r3, [pc, #64]	; (80009ac <IDLE_Func+0x5c>)
 800096a:	7018      	strb	r0, [r3, #0]
		/* enter the pre-charge state */
		nextStateM=PRECHARGE;
	}

	/* store the new state to set the required state in the loop */
	currStateM=nextStateM;
 800096c:	4b0f      	ldr	r3, [pc, #60]	; (80009ac <IDLE_Func+0x5c>)
 800096e:	781a      	ldrb	r2, [r3, #0]
 8000970:	4b0f      	ldr	r3, [pc, #60]	; (80009b0 <IDLE_Func+0x60>)
 8000972:	701a      	strb	r2, [r3, #0]

}
 8000974:	bd10      	pop	{r4, pc}
	else if(HAL_GPIO_ReadPin(START_BTN_GPIO_Port,START_BTN_Pin))
 8000976:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800097a:	480b      	ldr	r0, [pc, #44]	; (80009a8 <IDLE_Func+0x58>)
 800097c:	f001 f8f4 	bl	8001b68 <HAL_GPIO_ReadPin>
 8000980:	2800      	cmp	r0, #0
 8000982:	d0f3      	beq.n	800096c <IDLE_Func+0x1c>
		while(HAL_GPIO_ReadPin(START_BTN_GPIO_Port,START_BTN_Pin));
 8000984:	4c08      	ldr	r4, [pc, #32]	; (80009a8 <IDLE_Func+0x58>)
 8000986:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800098a:	4620      	mov	r0, r4
 800098c:	f001 f8ec 	bl	8001b68 <HAL_GPIO_ReadPin>
 8000990:	2800      	cmp	r0, #0
 8000992:	d1f8      	bne.n	8000986 <IDLE_Func+0x36>
		HAL_Delay(50);
 8000994:	2032      	movs	r0, #50	; 0x32
 8000996:	f000 fc7d 	bl	8001294 <HAL_Delay>
		nextStateM=PRECHARGE;
 800099a:	2201      	movs	r2, #1
 800099c:	4b03      	ldr	r3, [pc, #12]	; (80009ac <IDLE_Func+0x5c>)
 800099e:	701a      	strb	r2, [r3, #0]
 80009a0:	e7e4      	b.n	800096c <IDLE_Func+0x1c>
 80009a2:	bf00      	nop
 80009a4:	40010800 	.word	0x40010800
 80009a8:	40010c00 	.word	0x40010c00
 80009ac:	200000e7 	.word	0x200000e7
 80009b0:	200000e6 	.word	0x200000e6

080009b4 <PRECHARGE_Func>:
 * 2. Check on the start button if pressed so enter pre-charge state
 */
void PRECHARGE_Func()
{
	/* Enable the pre-charge relay of the bamocar */
	HAL_GPIO_WritePin(PRECHARGE_RELAY_GPIO_Port,PRECHARGE_RELAY_Pin,1);
 80009b4:	2140      	movs	r1, #64	; 0x40
{
 80009b6:	b510      	push	{r4, lr}
	HAL_GPIO_WritePin(PRECHARGE_RELAY_GPIO_Port,PRECHARGE_RELAY_Pin,1);
 80009b8:	2201      	movs	r2, #1
 80009ba:	4810      	ldr	r0, [pc, #64]	; (80009fc <PRECHARGE_Func+0x48>)
 80009bc:	f001 f8da 	bl	8001b74 <HAL_GPIO_WritePin>

	/* Delay to make sure that the relay had time to act */
	HAL_Delay(50);
 80009c0:	2032      	movs	r0, #50	; 0x32
 80009c2:	f000 fc67 	bl	8001294 <HAL_Delay>

	/*read the feedback from the precharge relay to see if it is closed or not  */
	if(HAL_GPIO_ReadPin(PRE_CHARGE_FB_GPIO_Port,PRE_CHARGE_FB_Pin)== 0)
 80009c6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80009ca:	480d      	ldr	r0, [pc, #52]	; (8000a00 <PRECHARGE_Func+0x4c>)
 80009cc:	f001 f8cc 	bl	8001b68 <HAL_GPIO_ReadPin>
 80009d0:	b910      	cbnz	r0, 80009d8 <PRECHARGE_Func+0x24>
	{
		/* if the pre-charge relay is not closed then the relay or its connection has a problem
		 * so call the ERROR function */
		errorType = ERROR_PrechargeFB;
 80009d2:	2202      	movs	r2, #2
 80009d4:	4b0b      	ldr	r3, [pc, #44]	; (8000a04 <PRECHARGE_Func+0x50>)
 80009d6:	701a      	strb	r2, [r3, #0]
	}

	/* Check for the DC90 from bamocar. so that, if it is high then the inverter is pre-charged
	 * and go to neutral state
	 */
	if(HAL_GPIO_ReadPin(DC90_INPUT_GPIO_Port,DC90_INPUT_Pin))
 80009d8:	2110      	movs	r1, #16
 80009da:	4808      	ldr	r0, [pc, #32]	; (80009fc <PRECHARGE_Func+0x48>)
 80009dc:	f001 f8c4 	bl	8001b68 <HAL_GPIO_ReadPin>
 80009e0:	4c09      	ldr	r4, [pc, #36]	; (8000a08 <PRECHARGE_Func+0x54>)
 80009e2:	b140      	cbz	r0, 80009f6 <PRECHARGE_Func+0x42>
	{
		/* enter the neutral state */
		nextStateM=NEUTRAL;
 80009e4:	2302      	movs	r3, #2

																    //hnzbtha 3la 7sb ana bigely 95% emta
																	//htt7l mn el inverter nafso
		HAL_Delay(30);
 80009e6:	201e      	movs	r0, #30
		nextStateM=NEUTRAL;
 80009e8:	7023      	strb	r3, [r4, #0]
		HAL_Delay(30);
 80009ea:	f000 fc53 	bl	8001294 <HAL_Delay>
		/* still in the pre-charge state */
		nextStateM=PRECHARGE;
	}

	/* store the new state to set the required state in the loop */
	currStateM=nextStateM;
 80009ee:	7822      	ldrb	r2, [r4, #0]
 80009f0:	4b06      	ldr	r3, [pc, #24]	; (8000a0c <PRECHARGE_Func+0x58>)
 80009f2:	701a      	strb	r2, [r3, #0]
}
 80009f4:	bd10      	pop	{r4, pc}
		nextStateM=PRECHARGE;
 80009f6:	2301      	movs	r3, #1
 80009f8:	7023      	strb	r3, [r4, #0]
 80009fa:	e7f8      	b.n	80009ee <PRECHARGE_Func+0x3a>
 80009fc:	40010c00 	.word	0x40010c00
 8000a00:	40010800 	.word	0x40010800
 8000a04:	20000000 	.word	0x20000000
 8000a08:	200000e7 	.word	0x200000e7
 8000a0c:	200000e6 	.word	0x200000e6

08000a10 <NEUTRAL_Func>:
 * 3. Check on the feedback of the pre-charge, AIR positive and AIR negative to avoid errors
 * 4. Check on the difference between pedals sensors to avoid errors
 * 5. Check the activation logic to go to the drive mode if happened
 */
void NEUTRAL_Func()
{
 8000a10:	b510      	push	{r4, lr}
	/* Enable the AIR positive relay */
	HAL_GPIO_WritePin(AIR_POSITIVE_GPIO_Port,AIR_POSITIVE_Pin,1);
 8000a12:	2201      	movs	r2, #1
 8000a14:	2180      	movs	r1, #128	; 0x80
 8000a16:	482b      	ldr	r0, [pc, #172]	; (8000ac4 <NEUTRAL_Func+0xb4>)
 8000a18:	f001 f8ac 	bl	8001b74 <HAL_GPIO_WritePin>

	HAL_Delay(50);
 8000a1c:	2032      	movs	r0, #50	; 0x32
 8000a1e:	f000 fc39 	bl	8001294 <HAL_Delay>

	/* Disable the pre-charge relay, as the inverter is charged now */
	HAL_GPIO_WritePin(PRECHARGE_RELAY_GPIO_Port,PRECHARGE_RELAY_Pin,0);
 8000a22:	2200      	movs	r2, #0
 8000a24:	2140      	movs	r1, #64	; 0x40
 8000a26:	4827      	ldr	r0, [pc, #156]	; (8000ac4 <NEUTRAL_Func+0xb4>)
 8000a28:	f001 f8a4 	bl	8001b74 <HAL_GPIO_WritePin>

	/* A delay to make sure that the relays had time to act */
	HAL_Delay(50);
 8000a2c:	2032      	movs	r0, #50	; 0x32
 8000a2e:	f000 fc31 	bl	8001294 <HAL_Delay>

	/* if the pre-charge relay is enabled, then the relay or its connection has a problem. So, call ERROR function. */
	if(HAL_GPIO_ReadPin(PRE_CHARGE_FB_GPIO_Port,PRE_CHARGE_FB_Pin)== 1)
 8000a32:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000a36:	4824      	ldr	r0, [pc, #144]	; (8000ac8 <NEUTRAL_Func+0xb8>)
 8000a38:	f001 f896 	bl	8001b68 <HAL_GPIO_ReadPin>
 8000a3c:	2801      	cmp	r0, #1
	{
		errorType = ERROR_PrechargeFB;
 8000a3e:	bf04      	itt	eq
 8000a40:	2202      	moveq	r2, #2
 8000a42:	4b22      	ldreq	r3, [pc, #136]	; (8000acc <NEUTRAL_Func+0xbc>)
		//ErrorAction();
	}

	/* if the AIR positive relay is disabled then there is a a problem in the relay or its connection. So, call ERROR function. */
	if(HAL_GPIO_ReadPin(AIR_POSITIVE_FB_GPIO_Port,AIR_POSITIVE_FB_Pin)==0)
 8000a44:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000a48:	481f      	ldr	r0, [pc, #124]	; (8000ac8 <NEUTRAL_Func+0xb8>)
		errorType = ERROR_PrechargeFB;
 8000a4a:	bf08      	it	eq
 8000a4c:	701a      	strbeq	r2, [r3, #0]
	if(HAL_GPIO_ReadPin(AIR_POSITIVE_FB_GPIO_Port,AIR_POSITIVE_FB_Pin)==0)
 8000a4e:	f001 f88b 	bl	8001b68 <HAL_GPIO_ReadPin>
 8000a52:	b910      	cbnz	r0, 8000a5a <NEUTRAL_Func+0x4a>
	{
		errorType = ERROR_AIRposFB;
 8000a54:	2203      	movs	r2, #3
 8000a56:	4b1d      	ldr	r3, [pc, #116]	; (8000acc <NEUTRAL_Func+0xbc>)
 8000a58:	701a      	strb	r2, [r3, #0]
		//ErrorAction();
	}

	/* if the AIR negative relay is disabled then there is a a problem in the relay or its connection. So, call ERROR function. */
	if(HAL_GPIO_ReadPin(AIR_NEGATIVE_FB_GPIO_Port,AIR_NEGATIVE_FB_Pin)==0)
 8000a5a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000a5e:	481a      	ldr	r0, [pc, #104]	; (8000ac8 <NEUTRAL_Func+0xb8>)
 8000a60:	f001 f882 	bl	8001b68 <HAL_GPIO_ReadPin>
 8000a64:	b910      	cbnz	r0, 8000a6c <NEUTRAL_Func+0x5c>
	{
		errorType = ERROR_AIRnegFB;
 8000a66:	2204      	movs	r2, #4
 8000a68:	4b18      	ldr	r3, [pc, #96]	; (8000acc <NEUTRAL_Func+0xbc>)
 8000a6a:	701a      	strb	r2, [r3, #0]
		//ErrorAction();
	}

	/* check the difference between the reading of the two pedals that is less than 10% to avoid any error*/
	Check_APPS();
 8000a6c:	f7ff fef8 	bl	8000860 <Check_APPS>

	/* if the start button is pressed go to discharge state */
	if(HAL_GPIO_ReadPin(START_BTN_GPIO_Port,START_BTN_Pin))
 8000a70:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000a74:	4813      	ldr	r0, [pc, #76]	; (8000ac4 <NEUTRAL_Func+0xb4>)
 8000a76:	f001 f877 	bl	8001b68 <HAL_GPIO_ReadPin>
 8000a7a:	b168      	cbz	r0, 8000a98 <NEUTRAL_Func+0x88>
	{
		/* wait until the driver release the button */
		while(HAL_GPIO_ReadPin(START_BTN_GPIO_Port,START_BTN_Pin));
 8000a7c:	4c11      	ldr	r4, [pc, #68]	; (8000ac4 <NEUTRAL_Func+0xb4>)
 8000a7e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000a82:	4620      	mov	r0, r4
 8000a84:	f001 f870 	bl	8001b68 <HAL_GPIO_ReadPin>
 8000a88:	2800      	cmp	r0, #0
 8000a8a:	d1f8      	bne.n	8000a7e <NEUTRAL_Func+0x6e>

		/* delay for button de-bouncing */
		HAL_Delay(50);
 8000a8c:	2032      	movs	r0, #50	; 0x32
 8000a8e:	f000 fc01 	bl	8001294 <HAL_Delay>

		/* enter the discharge state */
		nextStateM=DISCHARGE;
 8000a92:	2204      	movs	r2, #4
 8000a94:	4b0e      	ldr	r3, [pc, #56]	; (8000ad0 <NEUTRAL_Func+0xc0>)
 8000a96:	701a      	strb	r2, [r3, #0]
	}

	/* if the RTD button is pressed and the brake angle is more than the required value then go to the activation logic */
	if(HAL_GPIO_ReadPin(RTD_BTN_GPIO_Port,RTD_BTN_Pin) && ADC_values[BRAKE_ANGLE]>VAL_BRAKE_ANGLE_RTD) 										/* w hna hzwd else if */
 8000a98:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000a9c:	4809      	ldr	r0, [pc, #36]	; (8000ac4 <NEUTRAL_Func+0xb4>)
 8000a9e:	f001 f863 	bl	8001b68 <HAL_GPIO_ReadPin>
 8000aa2:	4c0b      	ldr	r4, [pc, #44]	; (8000ad0 <NEUTRAL_Func+0xc0>)
 8000aa4:	b150      	cbz	r0, 8000abc <NEUTRAL_Func+0xac>
 8000aa6:	4b0b      	ldr	r3, [pc, #44]	; (8000ad4 <NEUTRAL_Func+0xc4>)
 8000aa8:	889b      	ldrh	r3, [r3, #4]
 8000aaa:	f5b3 7f61 	cmp.w	r3, #900	; 0x384
 8000aae:	d905      	bls.n	8000abc <NEUTRAL_Func+0xac>
	{	
		/* go check the RTD button pressed time and the brake angle to enter the drive mode */
		Check_Activasion_Logic();
 8000ab0:	f7ff ff10 	bl	80008d4 <Check_Activasion_Logic>
		/* still in the neutral state */
		nextStateM=NEUTRAL;
	}

	/* store the new state to set the required state in the loop */
	currStateM=nextStateM;
 8000ab4:	7822      	ldrb	r2, [r4, #0]
 8000ab6:	4b08      	ldr	r3, [pc, #32]	; (8000ad8 <NEUTRAL_Func+0xc8>)
 8000ab8:	701a      	strb	r2, [r3, #0]
}
 8000aba:	bd10      	pop	{r4, pc}
		nextStateM=NEUTRAL;
 8000abc:	2302      	movs	r3, #2
 8000abe:	7023      	strb	r3, [r4, #0]
 8000ac0:	e7f8      	b.n	8000ab4 <NEUTRAL_Func+0xa4>
 8000ac2:	bf00      	nop
 8000ac4:	40010c00 	.word	0x40010c00
 8000ac8:	40010800 	.word	0x40010800
 8000acc:	20000000 	.word	0x20000000
 8000ad0:	200000e7 	.word	0x200000e7
 8000ad4:	2000007c 	.word	0x2000007c
 8000ad8:	200000e6 	.word	0x200000e6

08000adc <DRIVE_Func>:
 * 3. Generating PWM signal according to first pedal sensor average read
 * 4. Check on the feedback of the AIR negative to avoid errors
 * 5. Check if the start button is pressed to go to the discharge state
 */
void DRIVE_Func()
{
 8000adc:	b537      	push	{r0, r1, r2, r4, r5, lr}
	/* Enables the motor inverter by enabling the RFE and Drive pins */
	HAL_GPIO_WritePin(RFE_ENABLE_GPIO_Port,RFE_ENABLE_Pin,1);
 8000ade:	2201      	movs	r2, #1
 8000ae0:	2140      	movs	r1, #64	; 0x40
 8000ae2:	4828      	ldr	r0, [pc, #160]	; (8000b84 <DRIVE_Func+0xa8>)
 8000ae4:	f001 f846 	bl	8001b74 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DRIVE_ENABLE_GPIO_Port,DRIVE_ENABLE_Pin,1);
 8000ae8:	2201      	movs	r2, #1
 8000aea:	2180      	movs	r1, #128	; 0x80
 8000aec:	4825      	ldr	r0, [pc, #148]	; (8000b84 <DRIVE_Func+0xa8>)
 8000aee:	f001 f841 	bl	8001b74 <HAL_GPIO_WritePin>

	/* check the difference between the reading of the two pedals that is less than 10% to avoid any error */
	Check_APPS();
 8000af2:	f7ff feb5 	bl	8000860 <Check_APPS>

	/* variable to store the average of the first pedal reading */
	uint16_t APPS_READ=uint16_t_Read_APPS1();
 8000af6:	f7ff fe99 	bl	800082c <uint16_t_Read_APPS1>

	//MAPS The ADC READ TO PWM OUTPUT VALUE
	APPS_READ = map(APPS_READ, APPS_MIN, APPS_MAX, 0, PWM_MAX_OUTPUT);
 8000afa:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000afe:	f44f 6261 	mov.w	r2, #3600	; 0xe10
 8000b02:	f44f 71f5 	mov.w	r1, #490	; 0x1ea
 8000b06:	9300      	str	r3, [sp, #0]
 8000b08:	2300      	movs	r3, #0
 8000b0a:	f000 fb6c 	bl	80011e6 <map>
 8000b0e:	4604      	mov	r4, r0


	/* Output the torque command as PWM
	 * where value in ARR register = 5000*/
	TIM3->CCR3 = APPS_READ;
 8000b10:	4b1d      	ldr	r3, [pc, #116]	; (8000b88 <DRIVE_Func+0xac>)

	/* Store the updated ADC values of the two pedals in a string */
	sprintf(UART_massage, "%c \n", "D");
 8000b12:	4a1e      	ldr	r2, [pc, #120]	; (8000b8c <DRIVE_Func+0xb0>)
	TIM3->CCR3 = APPS_READ;
 8000b14:	63d8      	str	r0, [r3, #60]	; 0x3c
	sprintf(UART_massage, "%c \n", "D");
 8000b16:	491e      	ldr	r1, [pc, #120]	; (8000b90 <DRIVE_Func+0xb4>)
 8000b18:	481e      	ldr	r0, [pc, #120]	; (8000b94 <DRIVE_Func+0xb8>)
 8000b1a:	f001 ff43 	bl	80029a4 <siprintf>
	/* Transmit the message by the UART*/
	HAL_UART_Transmit(&huart3, UART_massage, sizeof(UART_massage), 1);
 8000b1e:	2301      	movs	r3, #1
 8000b20:	2264      	movs	r2, #100	; 0x64
 8000b22:	491c      	ldr	r1, [pc, #112]	; (8000b94 <DRIVE_Func+0xb8>)
 8000b24:	481c      	ldr	r0, [pc, #112]	; (8000b98 <DRIVE_Func+0xbc>)
 8000b26:	f001 fef2 	bl	800290e <HAL_UART_Transmit>

	HAL_UART_Transmit(&huart3, APPS_READ, sizeof(APPS_READ), 1);
 8000b2a:	4621      	mov	r1, r4
 8000b2c:	2301      	movs	r3, #1
 8000b2e:	2202      	movs	r2, #2
 8000b30:	4819      	ldr	r0, [pc, #100]	; (8000b98 <DRIVE_Func+0xbc>)
 8000b32:	f001 feec 	bl	800290e <HAL_UART_Transmit>

	/* if the AIR negative relay is disabled then there is a a problem in the relay or its connection. So, call ERROR function. */
	if(HAL_GPIO_ReadPin(AIR_NEGATIVE_FB_GPIO_Port,AIR_NEGATIVE_FB_Pin)==0)
 8000b36:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000b3a:	4812      	ldr	r0, [pc, #72]	; (8000b84 <DRIVE_Func+0xa8>)
 8000b3c:	f001 f814 	bl	8001b68 <HAL_GPIO_ReadPin>
 8000b40:	b910      	cbnz	r0, 8000b48 <DRIVE_Func+0x6c>
	{
		errorType = ERROR_AIRnegFB;
 8000b42:	2204      	movs	r2, #4
 8000b44:	4b15      	ldr	r3, [pc, #84]	; (8000b9c <DRIVE_Func+0xc0>)
 8000b46:	701a      	strb	r2, [r3, #0]
		//ErrorAction();
	}

	/* if the start button is pressed go to discharge state */
	if(HAL_GPIO_ReadPin(START_BTN_GPIO_Port,START_BTN_Pin))
 8000b48:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000b4c:	4814      	ldr	r0, [pc, #80]	; (8000ba0 <DRIVE_Func+0xc4>)
 8000b4e:	f001 f80b 	bl	8001b68 <HAL_GPIO_ReadPin>
 8000b52:	b1a0      	cbz	r0, 8000b7e <DRIVE_Func+0xa2>
	{
		/* wait until the driver release the button */
		while(HAL_GPIO_ReadPin(START_BTN_GPIO_Port,START_BTN_Pin));
 8000b54:	4d12      	ldr	r5, [pc, #72]	; (8000ba0 <DRIVE_Func+0xc4>)
 8000b56:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000b5a:	4628      	mov	r0, r5
 8000b5c:	f001 f804 	bl	8001b68 <HAL_GPIO_ReadPin>
 8000b60:	4604      	mov	r4, r0
 8000b62:	2800      	cmp	r0, #0
 8000b64:	d1f7      	bne.n	8000b56 <DRIVE_Func+0x7a>

		/* delay for button de-bouncing */
		HAL_Delay(50);
 8000b66:	2032      	movs	r0, #50	; 0x32
 8000b68:	f000 fb94 	bl	8001294 <HAL_Delay>

		/* stop the PWM */
		TIM3->CCR3 = 0;
 8000b6c:	4b06      	ldr	r3, [pc, #24]	; (8000b88 <DRIVE_Func+0xac>)
 8000b6e:	63dc      	str	r4, [r3, #60]	; 0x3c

		/* enter the discharge state */
		nextStateM=DISCHARGE;
 8000b70:	2304      	movs	r3, #4
 8000b72:	4a0c      	ldr	r2, [pc, #48]	; (8000ba4 <DRIVE_Func+0xc8>)
 8000b74:	7013      	strb	r3, [r2, #0]
		/* still in the drive state */
		nextStateM=DRIVE;
	}

	/* store the new state to set the required state in the loop */
	currStateM=nextStateM;
 8000b76:	4a0c      	ldr	r2, [pc, #48]	; (8000ba8 <DRIVE_Func+0xcc>)
 8000b78:	7013      	strb	r3, [r2, #0]


}
 8000b7a:	b003      	add	sp, #12
 8000b7c:	bd30      	pop	{r4, r5, pc}
 8000b7e:	2303      	movs	r3, #3
 8000b80:	e7f7      	b.n	8000b72 <DRIVE_Func+0x96>
 8000b82:	bf00      	nop
 8000b84:	40010800 	.word	0x40010800
 8000b88:	40000400 	.word	0x40000400
 8000b8c:	08003320 	.word	0x08003320
 8000b90:	08003322 	.word	0x08003322
 8000b94:	20000082 	.word	0x20000082
 8000b98:	200001a4 	.word	0x200001a4
 8000b9c:	20000000 	.word	0x20000000
 8000ba0:	40010c00 	.word	0x40010c00
 8000ba4:	200000e7 	.word	0x200000e7
 8000ba8:	200000e6 	.word	0x200000e6

08000bac <DISCHARGE_Func>:
 * 3. Disable AIR positive relay
 * 4. Check on the feedback of the AIR positive and AIR negative to avoid errors
 * 5. check on the DC60 signal to whether go IDLE or not
 */
void DISCHARGE_Func()
{
 8000bac:	b508      	push	{r3, lr}
	/* Enable EVMS relay to discharge the battery */
	HAL_GPIO_WritePin(EVMS_RELAY_GPIO_Port,EVMS_RELAY_Pin,1);
 8000bae:	2201      	movs	r2, #1
 8000bb0:	2108      	movs	r1, #8
 8000bb2:	481a      	ldr	r0, [pc, #104]	; (8000c1c <DISCHARGE_Func+0x70>)
 8000bb4:	f000 ffde 	bl	8001b74 <HAL_GPIO_WritePin>

	/* Disable the inverter by disable RFE and Drive pins*/
	HAL_GPIO_WritePin(RFE_ENABLE_GPIO_Port,RFE_ENABLE_Pin,0);
 8000bb8:	2200      	movs	r2, #0
 8000bba:	2140      	movs	r1, #64	; 0x40
 8000bbc:	4817      	ldr	r0, [pc, #92]	; (8000c1c <DISCHARGE_Func+0x70>)
 8000bbe:	f000 ffd9 	bl	8001b74 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DRIVE_ENABLE_GPIO_Port,DRIVE_ENABLE_Pin,0);
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	2180      	movs	r1, #128	; 0x80
 8000bc6:	4815      	ldr	r0, [pc, #84]	; (8000c1c <DISCHARGE_Func+0x70>)
 8000bc8:	f000 ffd4 	bl	8001b74 <HAL_GPIO_WritePin>


	/* Disable the AIR positive relay */
	HAL_GPIO_WritePin(AIR_POSITIVE_GPIO_Port,AIR_POSITIVE_Pin,0);
 8000bcc:	2200      	movs	r2, #0
 8000bce:	2180      	movs	r1, #128	; 0x80
 8000bd0:	4813      	ldr	r0, [pc, #76]	; (8000c20 <DISCHARGE_Func+0x74>)
 8000bd2:	f000 ffcf 	bl	8001b74 <HAL_GPIO_WritePin>
	/* Delay to make sure that the relay had time to act */
	HAL_Delay(50);
 8000bd6:	2032      	movs	r0, #50	; 0x32
 8000bd8:	f000 fb5c 	bl	8001294 <HAL_Delay>

	/* if the AIR positive relay is enabled then there is a a problem in the relay or its connection. So, call ERROR function. */
	if(HAL_GPIO_ReadPin(AIR_POSITIVE_FB_GPIO_Port,AIR_POSITIVE_FB_Pin)==1)
 8000bdc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000be0:	480e      	ldr	r0, [pc, #56]	; (8000c1c <DISCHARGE_Func+0x70>)
 8000be2:	f000 ffc1 	bl	8001b68 <HAL_GPIO_ReadPin>
 8000be6:	2801      	cmp	r0, #1
	{
		errorType = ERROR_AIRposFB;
 8000be8:	bf04      	itt	eq
 8000bea:	2203      	moveq	r2, #3
 8000bec:	4b0d      	ldreq	r3, [pc, #52]	; (8000c24 <DISCHARGE_Func+0x78>)
		//ErrorAction();
	}

	/* if the AIR negative relay is enabled then there is a a problem in the relay or its connection. So, call ERROR function. */
	if(HAL_GPIO_ReadPin(AIR_NEGATIVE_FB_GPIO_Port,AIR_NEGATIVE_FB_Pin)==1)
 8000bee:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000bf2:	480a      	ldr	r0, [pc, #40]	; (8000c1c <DISCHARGE_Func+0x70>)
		errorType = ERROR_AIRposFB;
 8000bf4:	bf08      	it	eq
 8000bf6:	701a      	strbeq	r2, [r3, #0]
	if(HAL_GPIO_ReadPin(AIR_NEGATIVE_FB_GPIO_Port,AIR_NEGATIVE_FB_Pin)==1)
 8000bf8:	f000 ffb6 	bl	8001b68 <HAL_GPIO_ReadPin>
 8000bfc:	2801      	cmp	r0, #1
	{
		errorType = ERROR_AIRnegFB;
 8000bfe:	bf04      	itt	eq
 8000c00:	2204      	moveq	r2, #4
 8000c02:	4b08      	ldreq	r3, [pc, #32]	; (8000c24 <DISCHARGE_Func+0x78>)
//	else
//	{
//		/* still in the discharge state */
//		nextStateM=DISCHARGE;
//	}
	HAL_Delay(5000);
 8000c04:	f241 3088 	movw	r0, #5000	; 0x1388
		errorType = ERROR_AIRnegFB;
 8000c08:	bf08      	it	eq
 8000c0a:	701a      	strbeq	r2, [r3, #0]
	HAL_Delay(5000);
 8000c0c:	f000 fb42 	bl	8001294 <HAL_Delay>

	nextStateM = IDLE;
 8000c10:	2300      	movs	r3, #0
 8000c12:	4a05      	ldr	r2, [pc, #20]	; (8000c28 <DISCHARGE_Func+0x7c>)
 8000c14:	7013      	strb	r3, [r2, #0]


	/* store the new state to set the required state in the loop */
	currStateM=nextStateM;
 8000c16:	4a05      	ldr	r2, [pc, #20]	; (8000c2c <DISCHARGE_Func+0x80>)
 8000c18:	7013      	strb	r3, [r2, #0]

}
 8000c1a:	bd08      	pop	{r3, pc}
 8000c1c:	40010800 	.word	0x40010800
 8000c20:	40010c00 	.word	0x40010c00
 8000c24:	20000000 	.word	0x20000000
 8000c28:	200000e7 	.word	0x200000e7
 8000c2c:	200000e6 	.word	0x200000e6

08000c30 <loop>:
/* Description:
 * 1. Transmit a message with the ADC values by the UART
 * 2. Switch to the required state
 */
void loop()
{
 8000c30:	b510      	push	{r4, lr}
	/* Store the updated ADC values of the two pedals in a string */
	//sprintf(UART_massage, "%d\n", "S");
	/* Transmit the message by the UART*/
	//HAL_UART_Transmit(&huart3, UART_massage, sizeof(UART_massage), 1);
	sprintf(UART_massage, "%d\n", currStateM);
 8000c32:	4c14      	ldr	r4, [pc, #80]	; (8000c84 <loop+0x54>)
 8000c34:	4914      	ldr	r1, [pc, #80]	; (8000c88 <loop+0x58>)
 8000c36:	7822      	ldrb	r2, [r4, #0]
 8000c38:	4814      	ldr	r0, [pc, #80]	; (8000c8c <loop+0x5c>)
 8000c3a:	f001 feb3 	bl	80029a4 <siprintf>
	HAL_UART_Transmit(&huart3, UART_massage, sizeof(UART_massage), 1);
 8000c3e:	2301      	movs	r3, #1
 8000c40:	2264      	movs	r2, #100	; 0x64
 8000c42:	4912      	ldr	r1, [pc, #72]	; (8000c8c <loop+0x5c>)
 8000c44:	4812      	ldr	r0, [pc, #72]	; (8000c90 <loop+0x60>)
 8000c46:	f001 fe62 	bl	800290e <HAL_UART_Transmit>


	/* Go to the required state depending on the value in the current state */
	switch(currStateM)
 8000c4a:	7823      	ldrb	r3, [r4, #0]
 8000c4c:	2b04      	cmp	r3, #4
 8000c4e:	d818      	bhi.n	8000c82 <loop+0x52>
 8000c50:	e8df f003 	tbb	[pc, r3]
 8000c54:	0f0b0703 	.word	0x0f0b0703
 8000c58:	13          	.byte	0x13
 8000c59:	00          	.byte	0x00
	case DISCHARGE:
		DISCHARGE_Func();
		break;
	}

}
 8000c5a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		IDLE_Func();
 8000c5e:	f7ff be77 	b.w	8000950 <IDLE_Func>
}
 8000c62:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		PRECHARGE_Func();
 8000c66:	f7ff bea5 	b.w	80009b4 <PRECHARGE_Func>
}
 8000c6a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		NEUTRAL_Func();
 8000c6e:	f7ff becf 	b.w	8000a10 <NEUTRAL_Func>
}
 8000c72:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		DRIVE_Func();
 8000c76:	f7ff bf31 	b.w	8000adc <DRIVE_Func>
}
 8000c7a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		DISCHARGE_Func();
 8000c7e:	f7ff bf95 	b.w	8000bac <DISCHARGE_Func>
}
 8000c82:	bd10      	pop	{r4, pc}
 8000c84:	200000e6 	.word	0x200000e6
 8000c88:	08003327 	.word	0x08003327
 8000c8c:	20000082 	.word	0x20000082
 8000c90:	200001a4 	.word	0x200001a4

08000c94 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c94:	b530      	push	{r4, r5, lr}
 8000c96:	b095      	sub	sp, #84	; 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c98:	2214      	movs	r2, #20
 8000c9a:	2100      	movs	r1, #0
 8000c9c:	a80c      	add	r0, sp, #48	; 0x30
 8000c9e:	f001 fea1 	bl	80029e4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ca2:	2214      	movs	r2, #20
 8000ca4:	2100      	movs	r1, #0
 8000ca6:	eb0d 0002 	add.w	r0, sp, r2
 8000caa:	f001 fe9b 	bl	80029e4 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000cae:	2210      	movs	r2, #16
 8000cb0:	2100      	movs	r1, #0
 8000cb2:	a801      	add	r0, sp, #4
 8000cb4:	f001 fe96 	bl	80029e4 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000cb8:	2501      	movs	r5, #1
 8000cba:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000cbe:	2402      	movs	r4, #2
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000cc0:	e9cd 530a 	strd	r5, r3, [sp, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000cc4:	e9cd 4311 	strd	r4, r3, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8000cc8:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ccc:	a80a      	add	r0, sp, #40	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000cce:	950e      	str	r5, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8000cd0:	9313      	str	r3, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000cd2:	f000 ff55 	bl	8001b80 <HAL_RCC_OscConfig>
 8000cd6:	b108      	cbz	r0, 8000cdc <SystemClock_Config+0x48>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000cd8:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000cda:	e7fe      	b.n	8000cda <SystemClock_Config+0x46>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000cdc:	230f      	movs	r3, #15
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000cde:	e9cd 3405 	strd	r3, r4, [sp, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000ce2:	f44f 6380 	mov.w	r3, #1024	; 0x400
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ce6:	9007      	str	r0, [sp, #28]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000ce8:	e9cd 3008 	strd	r3, r0, [sp, #32]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000cec:	4629      	mov	r1, r5
 8000cee:	a805      	add	r0, sp, #20
 8000cf0:	f001 f908 	bl	8001f04 <HAL_RCC_ClockConfig>
 8000cf4:	b108      	cbz	r0, 8000cfa <SystemClock_Config+0x66>
 8000cf6:	b672      	cpsid	i
	while (1) {
 8000cf8:	e7fe      	b.n	8000cf8 <SystemClock_Config+0x64>
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV4;
 8000cfa:	f44f 4380 	mov.w	r3, #16384	; 0x4000
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000cfe:	a801      	add	r0, sp, #4
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000d00:	9401      	str	r4, [sp, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV4;
 8000d02:	9303      	str	r3, [sp, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000d04:	f001 f9d8 	bl	80020b8 <HAL_RCCEx_PeriphCLKConfig>
 8000d08:	b108      	cbz	r0, 8000d0e <SystemClock_Config+0x7a>
 8000d0a:	b672      	cpsid	i
	while (1) {
 8000d0c:	e7fe      	b.n	8000d0c <SystemClock_Config+0x78>
}
 8000d0e:	b015      	add	sp, #84	; 0x54
 8000d10:	bd30      	pop	{r4, r5, pc}
	...

08000d14 <main>:
{
 8000d14:	b580      	push	{r7, lr}
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d16:	4d77      	ldr	r5, [pc, #476]	; (8000ef4 <main+0x1e0>)
{
 8000d18:	b08e      	sub	sp, #56	; 0x38
  HAL_Init();
 8000d1a:	f000 fa97 	bl	800124c <HAL_Init>
  SystemClock_Config();
 8000d1e:	f7ff ffb9 	bl	8000c94 <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d22:	2210      	movs	r2, #16
 8000d24:	2100      	movs	r1, #0
 8000d26:	a807      	add	r0, sp, #28
 8000d28:	f001 fe5c 	bl	80029e4 <memset>
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d2c:	69ab      	ldr	r3, [r5, #24]
  HAL_GPIO_WritePin(GPIOA, RTDS_Pin|EVMS_RELAY_Pin|PUMP_Pin|RFE_ENABLE_Pin
 8000d2e:	2200      	movs	r2, #0
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d30:	f043 0320 	orr.w	r3, r3, #32
 8000d34:	61ab      	str	r3, [r5, #24]
 8000d36:	69ab      	ldr	r3, [r5, #24]
  HAL_GPIO_WritePin(GPIOA, RTDS_Pin|EVMS_RELAY_Pin|PUMP_Pin|RFE_ENABLE_Pin
 8000d38:	21dc      	movs	r1, #220	; 0xdc
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d3a:	f003 0320 	and.w	r3, r3, #32
 8000d3e:	9302      	str	r3, [sp, #8]
 8000d40:	9b02      	ldr	r3, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d42:	69ab      	ldr	r3, [r5, #24]
  HAL_GPIO_WritePin(GPIOA, RTDS_Pin|EVMS_RELAY_Pin|PUMP_Pin|RFE_ENABLE_Pin
 8000d44:	486c      	ldr	r0, [pc, #432]	; (8000ef8 <main+0x1e4>)
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d46:	f043 0304 	orr.w	r3, r3, #4
 8000d4a:	61ab      	str	r3, [r5, #24]
 8000d4c:	69ab      	ldr	r3, [r5, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d4e:	2400      	movs	r4, #0
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d50:	f003 0304 	and.w	r3, r3, #4
 8000d54:	9303      	str	r3, [sp, #12]
 8000d56:	9b03      	ldr	r3, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d58:	69ab      	ldr	r3, [r5, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d5a:	2601      	movs	r6, #1
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d5c:	f043 0308 	orr.w	r3, r3, #8
 8000d60:	61ab      	str	r3, [r5, #24]
 8000d62:	69ab      	ldr	r3, [r5, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d64:	f04f 0802 	mov.w	r8, #2
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d68:	f003 0308 	and.w	r3, r3, #8
 8000d6c:	9304      	str	r3, [sp, #16]
 8000d6e:	9b04      	ldr	r3, [sp, #16]
  HAL_GPIO_WritePin(GPIOA, RTDS_Pin|EVMS_RELAY_Pin|PUMP_Pin|RFE_ENABLE_Pin
 8000d70:	f000 ff00 	bl	8001b74 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, PRECHARGE_RELAY_Pin|AIR_POSITIVE_Pin, GPIO_PIN_RESET);
 8000d74:	2200      	movs	r2, #0
 8000d76:	21c0      	movs	r1, #192	; 0xc0
 8000d78:	4860      	ldr	r0, [pc, #384]	; (8000efc <main+0x1e8>)
 8000d7a:	f000 fefb 	bl	8001b74 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d7e:	23dc      	movs	r3, #220	; 0xdc
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d80:	485d      	ldr	r0, [pc, #372]	; (8000ef8 <main+0x1e4>)
 8000d82:	a907      	add	r1, sp, #28
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d84:	e9cd 3607 	strd	r3, r6, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d88:	e9cd 4809 	strd	r4, r8, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d8c:	f000 fe12 	bl	80019b4 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = START_BTN_Pin|RTD_BTN_Pin|ENDURANCE_BTN_Pin|ACCELERATION_BTN_Pin
 8000d90:	f24f 0338 	movw	r3, #61496	; 0xf038
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d94:	4859      	ldr	r0, [pc, #356]	; (8000efc <main+0x1e8>)
 8000d96:	a907      	add	r1, sp, #28
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d98:	e9cd 3407 	strd	r3, r4, [sp, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d9c:	9409      	str	r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d9e:	f000 fe09 	bl	80019b4 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = SKIDPAD_BTN_Pin|PRE_CHARGE_FB_Pin|AIR_POSITIVE_FB_Pin|AIR_NEGATIVE_FB_Pin;
 8000da2:	f44f 4307 	mov.w	r3, #34560	; 0x8700
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000da6:	4854      	ldr	r0, [pc, #336]	; (8000ef8 <main+0x1e4>)
 8000da8:	a907      	add	r1, sp, #28
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000daa:	e9cd 3407 	strd	r3, r4, [sp, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dae:	9409      	str	r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000db0:	f000 fe00 	bl	80019b4 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = PRECHARGE_RELAY_Pin|AIR_POSITIVE_Pin;
 8000db4:	23c0      	movs	r3, #192	; 0xc0
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000db6:	4851      	ldr	r0, [pc, #324]	; (8000efc <main+0x1e8>)
 8000db8:	a907      	add	r1, sp, #28
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dba:	e9cd 3607 	strd	r3, r6, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dbe:	e9cd 4809 	strd	r4, r8, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000dc2:	f000 fdf7 	bl	80019b4 <HAL_GPIO_Init>
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000dc6:	696b      	ldr	r3, [r5, #20]
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 1, 0);
 8000dc8:	4622      	mov	r2, r4
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000dca:	4333      	orrs	r3, r6
 8000dcc:	616b      	str	r3, [r5, #20]
 8000dce:	696b      	ldr	r3, [r5, #20]
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 1, 0);
 8000dd0:	4631      	mov	r1, r6
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000dd2:	4033      	ands	r3, r6
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 1, 0);
 8000dd4:	200b      	movs	r0, #11
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000dd6:	9301      	str	r3, [sp, #4]
 8000dd8:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 1, 0);
 8000dda:	f000 fca7 	bl	800172c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000dde:	200b      	movs	r0, #11
 8000de0:	f000 fcd4 	bl	800178c <HAL_NVIC_EnableIRQ>
  hadc1.Instance = ADC1;
 8000de4:	4d46      	ldr	r5, [pc, #280]	; (8000f00 <main+0x1ec>)
 8000de6:	4b47      	ldr	r3, [pc, #284]	; (8000f04 <main+0x1f0>)
  hadc1.Init.NbrOfConversion = 3;
 8000de8:	2703      	movs	r7, #3
  hadc1.Instance = ADC1;
 8000dea:	602b      	str	r3, [r5, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000dec:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000df0:	60ab      	str	r3, [r5, #8]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000df2:	f44f 2360 	mov.w	r3, #917504	; 0xe0000
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000df6:	4628      	mov	r0, r5
  ADC_ChannelConfTypeDef sConfig = {0};
 8000df8:	e9cd 4407 	strd	r4, r4, [sp, #28]
 8000dfc:	9409      	str	r4, [sp, #36]	; 0x24
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000dfe:	732e      	strb	r6, [r5, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000e00:	752c      	strb	r4, [r5, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000e02:	61eb      	str	r3, [r5, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000e04:	606c      	str	r4, [r5, #4]
  hadc1.Init.NbrOfConversion = 3;
 8000e06:	612f      	str	r7, [r5, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000e08:	f000 fc00 	bl	800160c <HAL_ADC_Init>
 8000e0c:	b108      	cbz	r0, 8000e12 <main+0xfe>
 8000e0e:	b672      	cpsid	i
	while (1) {
 8000e10:	e7fe      	b.n	8000e10 <main+0xfc>
  sConfig.SamplingTime = ADC_SAMPLETIME_71CYCLES_5;
 8000e12:	2306      	movs	r3, #6
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000e14:	e9cd 0607 	strd	r0, r6, [sp, #28]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000e18:	a907      	add	r1, sp, #28
 8000e1a:	4628      	mov	r0, r5
  sConfig.SamplingTime = ADC_SAMPLETIME_71CYCLES_5;
 8000e1c:	9309      	str	r3, [sp, #36]	; 0x24
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000e1e:	f000 fa87 	bl	8001330 <HAL_ADC_ConfigChannel>
 8000e22:	b108      	cbz	r0, 8000e28 <main+0x114>
 8000e24:	b672      	cpsid	i
	while (1) {
 8000e26:	e7fe      	b.n	8000e26 <main+0x112>
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000e28:	4628      	mov	r0, r5
 8000e2a:	a907      	add	r1, sp, #28
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000e2c:	e9cd 6807 	strd	r6, r8, [sp, #28]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000e30:	f000 fa7e 	bl	8001330 <HAL_ADC_ConfigChannel>
 8000e34:	b108      	cbz	r0, 8000e3a <main+0x126>
 8000e36:	b672      	cpsid	i
	while (1) {
 8000e38:	e7fe      	b.n	8000e38 <main+0x124>
  sConfig.Channel = ADC_CHANNEL_5;
 8000e3a:	2305      	movs	r3, #5
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000e3c:	4628      	mov	r0, r5
 8000e3e:	a907      	add	r1, sp, #28
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8000e40:	e9cd 3707 	strd	r3, r7, [sp, #28]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000e44:	f000 fa74 	bl	8001330 <HAL_ADC_ConfigChannel>
 8000e48:	4606      	mov	r6, r0
 8000e4a:	b108      	cbz	r0, 8000e50 <main+0x13c>
 8000e4c:	b672      	cpsid	i
	while (1) {
 8000e4e:	e7fe      	b.n	8000e4e <main+0x13a>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000e50:	221c      	movs	r2, #28
 8000e52:	4601      	mov	r1, r0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e54:	e9cd 0005 	strd	r0, r0, [sp, #20]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000e58:	eb0d 0002 	add.w	r0, sp, r2
 8000e5c:	f001 fdc2 	bl	80029e4 <memset>
  htim3.Instance = TIM3;
 8000e60:	4c29      	ldr	r4, [pc, #164]	; (8000f08 <main+0x1f4>)
 8000e62:	4b2a      	ldr	r3, [pc, #168]	; (8000f0c <main+0x1f8>)
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000e64:	4620      	mov	r0, r4
  htim3.Init.Prescaler = 4-1;
 8000e66:	e9c4 3700 	strd	r3, r7, [r4]
  htim3.Init.Period = 200-1;
 8000e6a:	23c7      	movs	r3, #199	; 0xc7
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e6c:	60a6      	str	r6, [r4, #8]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e6e:	e9c4 3603 	strd	r3, r6, [r4, #12]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e72:	61a6      	str	r6, [r4, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000e74:	f001 fb6a 	bl	800254c <HAL_TIM_PWM_Init>
 8000e78:	b108      	cbz	r0, 8000e7e <main+0x16a>
 8000e7a:	b672      	cpsid	i
	while (1) {
 8000e7c:	e7fe      	b.n	8000e7c <main+0x168>
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e7e:	e9cd 0005 	strd	r0, r0, [sp, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000e82:	a905      	add	r1, sp, #20
 8000e84:	4620      	mov	r0, r4
 8000e86:	f001 fc73 	bl	8002770 <HAL_TIMEx_MasterConfigSynchronization>
 8000e8a:	b108      	cbz	r0, 8000e90 <main+0x17c>
 8000e8c:	b672      	cpsid	i
	while (1) {
 8000e8e:	e7fe      	b.n	8000e8e <main+0x17a>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000e90:	2360      	movs	r3, #96	; 0x60
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000e92:	9009      	str	r0, [sp, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8000e94:	e9cd 3007 	strd	r3, r0, [sp, #28]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000e98:	900b      	str	r0, [sp, #44]	; 0x2c
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000e9a:	2208      	movs	r2, #8
 8000e9c:	4620      	mov	r0, r4
 8000e9e:	a907      	add	r1, sp, #28
 8000ea0:	f001 fbac 	bl	80025fc <HAL_TIM_PWM_ConfigChannel>
 8000ea4:	4606      	mov	r6, r0
 8000ea6:	b108      	cbz	r0, 8000eac <main+0x198>
 8000ea8:	b672      	cpsid	i
	while (1) {
 8000eaa:	e7fe      	b.n	8000eaa <main+0x196>
  HAL_TIM_MspPostInit(&htim3);
 8000eac:	4620      	mov	r0, r4
 8000eae:	f000 f8b9 	bl	8001024 <HAL_TIM_MspPostInit>
  huart3.Init.BaudRate = 9600;
 8000eb2:	f44f 5316 	mov.w	r3, #9600	; 0x2580
  huart3.Instance = USART3;
 8000eb6:	4816      	ldr	r0, [pc, #88]	; (8000f10 <main+0x1fc>)
  huart3.Init.BaudRate = 9600;
 8000eb8:	4a16      	ldr	r2, [pc, #88]	; (8000f14 <main+0x200>)
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000eba:	e9c0 6602 	strd	r6, r6, [r0, #8]
  huart3.Init.BaudRate = 9600;
 8000ebe:	e9c0 2300 	strd	r2, r3, [r0]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000ec2:	230c      	movs	r3, #12
  huart3.Init.Parity = UART_PARITY_NONE;
 8000ec4:	6106      	str	r6, [r0, #16]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ec6:	e9c0 3605 	strd	r3, r6, [r0, #20]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000eca:	61c6      	str	r6, [r0, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000ecc:	f001 fcf0 	bl	80028b0 <HAL_UART_Init>
 8000ed0:	b108      	cbz	r0, 8000ed6 <main+0x1c2>
 8000ed2:	b672      	cpsid	i
	while (1) {
 8000ed4:	e7fe      	b.n	8000ed4 <main+0x1c0>
	HAL_ADC_Start_DMA(&hadc1, ADC_values, 3);
 8000ed6:	4910      	ldr	r1, [pc, #64]	; (8000f18 <main+0x204>)
 8000ed8:	463a      	mov	r2, r7
 8000eda:	4628      	mov	r0, r5
 8000edc:	f000 fae2 	bl	80014a4 <HAL_ADC_Start_DMA>
	HAL_TIM_Base_Start(&htim3);
 8000ee0:	4620      	mov	r0, r4
 8000ee2:	f001 f9d9 	bl	8002298 <HAL_TIM_Base_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 8000ee6:	2108      	movs	r1, #8
 8000ee8:	4620      	mov	r0, r4
 8000eea:	f001 fc3f 	bl	800276c <HAL_TIM_PWM_Start>
		loop();
 8000eee:	f7ff fe9f 	bl	8000c30 <loop>
	while (1) {
 8000ef2:	e7fc      	b.n	8000eee <main+0x1da>
 8000ef4:	40021000 	.word	0x40021000
 8000ef8:	40010800 	.word	0x40010800
 8000efc:	40010c00 	.word	0x40010c00
 8000f00:	200000e8 	.word	0x200000e8
 8000f04:	40012400 	.word	0x40012400
 8000f08:	2000015c 	.word	0x2000015c
 8000f0c:	40000400 	.word	0x40000400
 8000f10:	200001a4 	.word	0x200001a4
 8000f14:	40004800 	.word	0x40004800
 8000f18:	2000007c 	.word	0x2000007c

08000f1c <HAL_TIM_PeriodElapsedCallback>:
  if (htim->Instance == TIM1) {
 8000f1c:	6802      	ldr	r2, [r0, #0]
 8000f1e:	4b03      	ldr	r3, [pc, #12]	; (8000f2c <HAL_TIM_PeriodElapsedCallback+0x10>)
 8000f20:	429a      	cmp	r2, r3
 8000f22:	d101      	bne.n	8000f28 <HAL_TIM_PeriodElapsedCallback+0xc>
    HAL_IncTick();
 8000f24:	f000 b9a4 	b.w	8001270 <HAL_IncTick>
}
 8000f28:	4770      	bx	lr
 8000f2a:	bf00      	nop
 8000f2c:	40012c00 	.word	0x40012c00

08000f30 <Error_Handler>:
 8000f30:	b672      	cpsid	i
	while (1) {
 8000f32:	e7fe      	b.n	8000f32 <Error_Handler+0x2>

08000f34 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000f34:	4b0a      	ldr	r3, [pc, #40]	; (8000f60 <HAL_MspInit+0x2c>)
{
 8000f36:	b082      	sub	sp, #8
  __HAL_RCC_AFIO_CLK_ENABLE();
 8000f38:	699a      	ldr	r2, [r3, #24]
 8000f3a:	f042 0201 	orr.w	r2, r2, #1
 8000f3e:	619a      	str	r2, [r3, #24]
 8000f40:	699a      	ldr	r2, [r3, #24]
 8000f42:	f002 0201 	and.w	r2, r2, #1
 8000f46:	9200      	str	r2, [sp, #0]
 8000f48:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f4a:	69da      	ldr	r2, [r3, #28]
 8000f4c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000f50:	61da      	str	r2, [r3, #28]
 8000f52:	69db      	ldr	r3, [r3, #28]
 8000f54:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f58:	9301      	str	r3, [sp, #4]
 8000f5a:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f5c:	b002      	add	sp, #8
 8000f5e:	4770      	bx	lr
 8000f60:	40021000 	.word	0x40021000

08000f64 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000f64:	b530      	push	{r4, r5, lr}
 8000f66:	4605      	mov	r5, r0
 8000f68:	b087      	sub	sp, #28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f6a:	2210      	movs	r2, #16
 8000f6c:	2100      	movs	r1, #0
 8000f6e:	a802      	add	r0, sp, #8
 8000f70:	f001 fd38 	bl	80029e4 <memset>
  if(hadc->Instance==ADC1)
 8000f74:	682a      	ldr	r2, [r5, #0]
 8000f76:	4b1d      	ldr	r3, [pc, #116]	; (8000fec <HAL_ADC_MspInit+0x88>)
 8000f78:	429a      	cmp	r2, r3
 8000f7a:	d134      	bne.n	8000fe6 <HAL_ADC_MspInit+0x82>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000f7c:	f503 436c 	add.w	r3, r3, #60416	; 0xec00
 8000f80:	699a      	ldr	r2, [r3, #24]
    PA1     ------> ADC1_IN1
    PA5     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = APPS1_Pin|APPS2_Pin|BRAKES_ANGLE_SENSOR_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f82:	481b      	ldr	r0, [pc, #108]	; (8000ff0 <HAL_ADC_MspInit+0x8c>)
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000f84:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000f88:	619a      	str	r2, [r3, #24]
 8000f8a:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f8c:	a902      	add	r1, sp, #8
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000f8e:	f402 7200 	and.w	r2, r2, #512	; 0x200
 8000f92:	9200      	str	r2, [sp, #0]
 8000f94:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f96:	699a      	ldr	r2, [r3, #24]

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8000f98:	4c16      	ldr	r4, [pc, #88]	; (8000ff4 <HAL_ADC_MspInit+0x90>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f9a:	f042 0204 	orr.w	r2, r2, #4
 8000f9e:	619a      	str	r2, [r3, #24]
 8000fa0:	699b      	ldr	r3, [r3, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000fa2:	2223      	movs	r2, #35	; 0x23
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fa4:	f003 0304 	and.w	r3, r3, #4
 8000fa8:	9301      	str	r3, [sp, #4]
 8000faa:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000fac:	2303      	movs	r3, #3
 8000fae:	e9cd 2302 	strd	r2, r3, [sp, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fb2:	f000 fcff 	bl	80019b4 <HAL_GPIO_Init>
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000fb6:	2080      	movs	r0, #128	; 0x80
 8000fb8:	f44f 7280 	mov.w	r2, #256	; 0x100
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000fbc:	2300      	movs	r3, #0
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000fbe:	e9c4 0203 	strd	r0, r2, [r4, #12]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000fc2:	f44f 6c80 	mov.w	ip, #1024	; 0x400
 8000fc6:	2220      	movs	r2, #32
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000fc8:	490b      	ldr	r1, [pc, #44]	; (8000ff8 <HAL_ADC_MspInit+0x94>)
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000fca:	4620      	mov	r0, r4
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000fcc:	e9c4 1300 	strd	r1, r3, [r4]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000fd0:	e9c4 c205 	strd	ip, r2, [r4, #20]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000fd4:	60a3      	str	r3, [r4, #8]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000fd6:	61e3      	str	r3, [r4, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000fd8:	f000 fbe6 	bl	80017a8 <HAL_DMA_Init>
 8000fdc:	b108      	cbz	r0, 8000fe2 <HAL_ADC_MspInit+0x7e>
    {
      Error_Handler();
 8000fde:	f7ff ffa7 	bl	8000f30 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000fe2:	622c      	str	r4, [r5, #32]
 8000fe4:	6265      	str	r5, [r4, #36]	; 0x24
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000fe6:	b007      	add	sp, #28
 8000fe8:	bd30      	pop	{r4, r5, pc}
 8000fea:	bf00      	nop
 8000fec:	40012400 	.word	0x40012400
 8000ff0:	40010800 	.word	0x40010800
 8000ff4:	20000118 	.word	0x20000118
 8000ff8:	40020008 	.word	0x40020008

08000ffc <HAL_TIM_PWM_MspInit>:
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
  if(htim_pwm->Instance==TIM3)
 8000ffc:	6802      	ldr	r2, [r0, #0]
 8000ffe:	4b08      	ldr	r3, [pc, #32]	; (8001020 <HAL_TIM_PWM_MspInit+0x24>)
{
 8001000:	b082      	sub	sp, #8
  if(htim_pwm->Instance==TIM3)
 8001002:	429a      	cmp	r2, r3
 8001004:	d10a      	bne.n	800101c <HAL_TIM_PWM_MspInit+0x20>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001006:	f503 3303 	add.w	r3, r3, #134144	; 0x20c00
 800100a:	69da      	ldr	r2, [r3, #28]
 800100c:	f042 0202 	orr.w	r2, r2, #2
 8001010:	61da      	str	r2, [r3, #28]
 8001012:	69db      	ldr	r3, [r3, #28]
 8001014:	f003 0302 	and.w	r3, r3, #2
 8001018:	9301      	str	r3, [sp, #4]
 800101a:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800101c:	b002      	add	sp, #8
 800101e:	4770      	bx	lr
 8001020:	40000400 	.word	0x40000400

08001024 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001024:	b510      	push	{r4, lr}
 8001026:	4604      	mov	r4, r0
 8001028:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800102a:	2210      	movs	r2, #16
 800102c:	2100      	movs	r1, #0
 800102e:	a802      	add	r0, sp, #8
 8001030:	f001 fcd8 	bl	80029e4 <memset>
  if(htim->Instance==TIM3)
 8001034:	6822      	ldr	r2, [r4, #0]
 8001036:	4b0c      	ldr	r3, [pc, #48]	; (8001068 <HAL_TIM_MspPostInit+0x44>)
 8001038:	429a      	cmp	r2, r3
 800103a:	d113      	bne.n	8001064 <HAL_TIM_MspPostInit+0x40>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800103c:	f503 3303 	add.w	r3, r3, #134144	; 0x20c00
 8001040:	699a      	ldr	r2, [r3, #24]
    PB0     ------> TIM3_CH3
    */
    GPIO_InitStruct.Pin = MOTOR_PWM_OUTPUT_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    HAL_GPIO_Init(MOTOR_PWM_OUTPUT_GPIO_Port, &GPIO_InitStruct);
 8001042:	480a      	ldr	r0, [pc, #40]	; (800106c <HAL_TIM_MspPostInit+0x48>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001044:	f042 0208 	orr.w	r2, r2, #8
 8001048:	619a      	str	r2, [r3, #24]
 800104a:	699b      	ldr	r3, [r3, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800104c:	2201      	movs	r2, #1
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800104e:	f003 0308 	and.w	r3, r3, #8
 8001052:	9301      	str	r3, [sp, #4]
 8001054:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001056:	2302      	movs	r3, #2
    HAL_GPIO_Init(MOTOR_PWM_OUTPUT_GPIO_Port, &GPIO_InitStruct);
 8001058:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800105a:	e9cd 2302 	strd	r2, r3, [sp, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800105e:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(MOTOR_PWM_OUTPUT_GPIO_Port, &GPIO_InitStruct);
 8001060:	f000 fca8 	bl	80019b4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001064:	b006      	add	sp, #24
 8001066:	bd10      	pop	{r4, pc}
 8001068:	40000400 	.word	0x40000400
 800106c:	40010c00 	.word	0x40010c00

08001070 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001070:	b510      	push	{r4, lr}
 8001072:	4604      	mov	r4, r0
 8001074:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001076:	2210      	movs	r2, #16
 8001078:	2100      	movs	r1, #0
 800107a:	a802      	add	r0, sp, #8
 800107c:	f001 fcb2 	bl	80029e4 <memset>
  if(huart->Instance==USART3)
 8001080:	6822      	ldr	r2, [r4, #0]
 8001082:	4b17      	ldr	r3, [pc, #92]	; (80010e0 <HAL_UART_MspInit+0x70>)
 8001084:	429a      	cmp	r2, r3
 8001086:	d128      	bne.n	80010da <HAL_UART_MspInit+0x6a>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001088:	f503 33e4 	add.w	r3, r3, #116736	; 0x1c800
 800108c:	69da      	ldr	r2, [r3, #28]
    PB11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800108e:	4815      	ldr	r0, [pc, #84]	; (80010e4 <HAL_UART_MspInit+0x74>)
    __HAL_RCC_USART3_CLK_ENABLE();
 8001090:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8001094:	61da      	str	r2, [r3, #28]
 8001096:	69da      	ldr	r2, [r3, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001098:	a902      	add	r1, sp, #8
    __HAL_RCC_USART3_CLK_ENABLE();
 800109a:	f402 2280 	and.w	r2, r2, #262144	; 0x40000
 800109e:	9200      	str	r2, [sp, #0]
 80010a0:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80010a2:	699a      	ldr	r2, [r3, #24]
 80010a4:	f042 0208 	orr.w	r2, r2, #8
 80010a8:	619a      	str	r2, [r3, #24]
 80010aa:	699b      	ldr	r3, [r3, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010ac:	f44f 6280 	mov.w	r2, #1024	; 0x400
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80010b0:	f003 0308 	and.w	r3, r3, #8
 80010b4:	9301      	str	r3, [sp, #4]
 80010b6:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010b8:	2302      	movs	r3, #2
 80010ba:	e9cd 2302 	strd	r2, r3, [sp, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80010be:	2303      	movs	r3, #3
 80010c0:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010c2:	f000 fc77 	bl	80019b4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80010c6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80010ca:	2300      	movs	r3, #0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010cc:	4805      	ldr	r0, [pc, #20]	; (80010e4 <HAL_UART_MspInit+0x74>)
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80010ce:	e9cd 1302 	strd	r1, r3, [sp, #8]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010d2:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010d4:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010d6:	f000 fc6d 	bl	80019b4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80010da:	b006      	add	sp, #24
 80010dc:	bd10      	pop	{r4, pc}
 80010de:	bf00      	nop
 80010e0:	40004800 	.word	0x40004800
 80010e4:	40010c00 	.word	0x40010c00

080010e8 <HAL_InitTick>:
  uint32_t              uwPrescalerValue = 0U;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 80010e8:	4b1e      	ldr	r3, [pc, #120]	; (8001164 <HAL_InitTick+0x7c>)
{
 80010ea:	b570      	push	{r4, r5, r6, lr}
  __HAL_RCC_TIM1_CLK_ENABLE();
 80010ec:	699a      	ldr	r2, [r3, #24]
{
 80010ee:	b088      	sub	sp, #32
  __HAL_RCC_TIM1_CLK_ENABLE();
 80010f0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80010f4:	619a      	str	r2, [r3, #24]
 80010f6:	699b      	ldr	r3, [r3, #24]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80010f8:	a901      	add	r1, sp, #4
  __HAL_RCC_TIM1_CLK_ENABLE();
 80010fa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80010fe:	9302      	str	r3, [sp, #8]
{
 8001100:	4606      	mov	r6, r0
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001102:	a803      	add	r0, sp, #12

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8001104:	4d18      	ldr	r5, [pc, #96]	; (8001168 <HAL_InitTick+0x80>)
  __HAL_RCC_TIM1_CLK_ENABLE();
 8001106:	9b02      	ldr	r3, [sp, #8]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001108:	f000 ffb8 	bl	800207c <HAL_RCC_GetClockConfig>
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 800110c:	f000 ffa6 	bl	800205c <HAL_RCC_GetPCLK2Freq>
  htim1.Instance = TIM1;
 8001110:	4b16      	ldr	r3, [pc, #88]	; (800116c <HAL_InitTick+0x84>)
 8001112:	602b      	str	r3, [r5, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8001114:	f240 33e7 	movw	r3, #999	; 0x3e7
 8001118:	60eb      	str	r3, [r5, #12]
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800111a:	4b15      	ldr	r3, [pc, #84]	; (8001170 <HAL_InitTick+0x88>)
 800111c:	fbb0 f0f3 	udiv	r0, r0, r3
  htim1.Init.Prescaler = uwPrescalerValue;
  htim1.Init.ClockDivision = 0;
 8001120:	2300      	movs	r3, #0
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001122:	3801      	subs	r0, #1
  htim1.Init.Prescaler = uwPrescalerValue;
 8001124:	6068      	str	r0, [r5, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;

  status = HAL_TIM_Base_Init(&htim1);
 8001126:	4628      	mov	r0, r5
  htim1.Init.ClockDivision = 0;
 8001128:	612b      	str	r3, [r5, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800112a:	60ab      	str	r3, [r5, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800112c:	61ab      	str	r3, [r5, #24]
  status = HAL_TIM_Base_Init(&htim1);
 800112e:	f001 f9e1 	bl	80024f4 <HAL_TIM_Base_Init>
  if (status == HAL_OK)
 8001132:	4604      	mov	r4, r0
 8001134:	b980      	cbnz	r0, 8001158 <HAL_InitTick+0x70>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8001136:	4628      	mov	r0, r5
 8001138:	f001 f8d4 	bl	80022e4 <HAL_TIM_Base_Start_IT>
    if (status == HAL_OK)
 800113c:	4604      	mov	r4, r0
 800113e:	b958      	cbnz	r0, 8001158 <HAL_InitTick+0x70>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8001140:	2019      	movs	r0, #25
 8001142:	f000 fb23 	bl	800178c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001146:	2e0f      	cmp	r6, #15
 8001148:	d809      	bhi.n	800115e <HAL_InitTick+0x76>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority, 0U);
 800114a:	4622      	mov	r2, r4
 800114c:	4631      	mov	r1, r6
 800114e:	2019      	movs	r0, #25
 8001150:	f000 faec 	bl	800172c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001154:	4b07      	ldr	r3, [pc, #28]	; (8001174 <HAL_InitTick+0x8c>)
 8001156:	601e      	str	r6, [r3, #0]
    }
  }

 /* Return function status */
  return status;
}
 8001158:	4620      	mov	r0, r4
 800115a:	b008      	add	sp, #32
 800115c:	bd70      	pop	{r4, r5, r6, pc}
        status = HAL_ERROR;
 800115e:	2401      	movs	r4, #1
 8001160:	e7fa      	b.n	8001158 <HAL_InitTick+0x70>
 8001162:	bf00      	nop
 8001164:	40021000 	.word	0x40021000
 8001168:	200001ec 	.word	0x200001ec
 800116c:	40012c00 	.word	0x40012c00
 8001170:	000f4240 	.word	0x000f4240
 8001174:	2000000c 	.word	0x2000000c

08001178 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001178:	e7fe      	b.n	8001178 <NMI_Handler>

0800117a <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800117a:	e7fe      	b.n	800117a <HardFault_Handler>

0800117c <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800117c:	e7fe      	b.n	800117c <MemManage_Handler>

0800117e <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800117e:	e7fe      	b.n	800117e <BusFault_Handler>

08001180 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001180:	e7fe      	b.n	8001180 <UsageFault_Handler>

08001182 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001182:	4770      	bx	lr

08001184 <DebugMon_Handler>:
 8001184:	4770      	bx	lr

08001186 <PendSV_Handler>:
 8001186:	4770      	bx	lr

08001188 <SysTick_Handler>:
 8001188:	4770      	bx	lr
	...

0800118c <DMA1_Channel1_IRQHandler>:
void DMA1_Channel1_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 800118c:	4801      	ldr	r0, [pc, #4]	; (8001194 <DMA1_Channel1_IRQHandler+0x8>)
 800118e:	f000 bb7d 	b.w	800188c <HAL_DMA_IRQHandler>
 8001192:	bf00      	nop
 8001194:	20000118 	.word	0x20000118

08001198 <TIM1_UP_IRQHandler>:
void TIM1_UP_IRQHandler(void)
{
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001198:	4801      	ldr	r0, [pc, #4]	; (80011a0 <TIM1_UP_IRQHandler+0x8>)
 800119a:	f001 b8d1 	b.w	8002340 <HAL_TIM_IRQHandler>
 800119e:	bf00      	nop
 80011a0:	200001ec 	.word	0x200001ec

080011a4 <_sbrk>:
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80011a4:	4a0b      	ldr	r2, [pc, #44]	; (80011d4 <_sbrk+0x30>)
{
 80011a6:	4603      	mov	r3, r0
  if (NULL == __sbrk_heap_end)
 80011a8:	6811      	ldr	r1, [r2, #0]
{
 80011aa:	b510      	push	{r4, lr}
  if (NULL == __sbrk_heap_end)
 80011ac:	b909      	cbnz	r1, 80011b2 <_sbrk+0xe>
  {
    __sbrk_heap_end = &_end;
 80011ae:	490a      	ldr	r1, [pc, #40]	; (80011d8 <_sbrk+0x34>)
 80011b0:	6011      	str	r1, [r2, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80011b2:	6810      	ldr	r0, [r2, #0]
 80011b4:	4909      	ldr	r1, [pc, #36]	; (80011dc <_sbrk+0x38>)
 80011b6:	4c0a      	ldr	r4, [pc, #40]	; (80011e0 <_sbrk+0x3c>)
 80011b8:	4403      	add	r3, r0
 80011ba:	1b09      	subs	r1, r1, r4
 80011bc:	428b      	cmp	r3, r1
 80011be:	d906      	bls.n	80011ce <_sbrk+0x2a>
  {
    errno = ENOMEM;
 80011c0:	f001 fc18 	bl	80029f4 <__errno>
 80011c4:	230c      	movs	r3, #12
 80011c6:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 80011c8:	f04f 30ff 	mov.w	r0, #4294967295

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;

  return (void *)prev_heap_end;
}
 80011cc:	bd10      	pop	{r4, pc}
  __sbrk_heap_end += incr;
 80011ce:	6013      	str	r3, [r2, #0]
  return (void *)prev_heap_end;
 80011d0:	e7fc      	b.n	80011cc <_sbrk+0x28>
 80011d2:	bf00      	nop
 80011d4:	20000234 	.word	0x20000234
 80011d8:	20000388 	.word	0x20000388
 80011dc:	20005000 	.word	0x20005000
 80011e0:	00000400 	.word	0x00000400

080011e4 <SystemInit>:

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80011e4:	4770      	bx	lr

080011e6 <map>:
#include "utility_funcs.h"


uint16_t map(uint16_t x, uint16_t in_min, uint16_t in_max, uint16_t out_min, uint16_t out_max) 
{
 80011e6:	b510      	push	{r4, lr}
	return (out_max)
			- ((x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min);
 80011e8:	f8bd 4008 	ldrh.w	r4, [sp, #8]
 80011ec:	1a40      	subs	r0, r0, r1
 80011ee:	1ae3      	subs	r3, r4, r3
 80011f0:	4358      	muls	r0, r3
 80011f2:	1a52      	subs	r2, r2, r1
 80011f4:	fb90 f0f2 	sdiv	r0, r0, r2
 80011f8:	1a18      	subs	r0, r3, r0
}
 80011fa:	b280      	uxth	r0, r0
 80011fc:	bd10      	pop	{r4, pc}
	...

08001200 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001200:	f7ff fff0 	bl	80011e4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001204:	480b      	ldr	r0, [pc, #44]	; (8001234 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001206:	490c      	ldr	r1, [pc, #48]	; (8001238 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001208:	4a0c      	ldr	r2, [pc, #48]	; (800123c <LoopFillZerobss+0x16>)
  movs r3, #0
 800120a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800120c:	e002      	b.n	8001214 <LoopCopyDataInit>

0800120e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800120e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001210:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001212:	3304      	adds	r3, #4

08001214 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001214:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001216:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001218:	d3f9      	bcc.n	800120e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800121a:	4a09      	ldr	r2, [pc, #36]	; (8001240 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 800121c:	4c09      	ldr	r4, [pc, #36]	; (8001244 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800121e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001220:	e001      	b.n	8001226 <LoopFillZerobss>

08001222 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001222:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001224:	3204      	adds	r2, #4

08001226 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001226:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001228:	d3fb      	bcc.n	8001222 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800122a:	f001 fbe9 	bl	8002a00 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800122e:	f7ff fd71 	bl	8000d14 <main>
  bx lr
 8001232:	4770      	bx	lr
  ldr r0, =_sdata
 8001234:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001238:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 800123c:	08003390 	.word	0x08003390
  ldr r2, =_sbss
 8001240:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8001244:	20000384 	.word	0x20000384

08001248 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001248:	e7fe      	b.n	8001248 <ADC1_2_IRQHandler>
	...

0800124c <HAL_Init>:
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800124c:	4a07      	ldr	r2, [pc, #28]	; (800126c <HAL_Init+0x20>)
{
 800124e:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001250:	6813      	ldr	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001252:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001254:	f043 0310 	orr.w	r3, r3, #16
 8001258:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800125a:	f000 fa55 	bl	8001708 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800125e:	2000      	movs	r0, #0
 8001260:	f7ff ff42 	bl	80010e8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001264:	f7ff fe66 	bl	8000f34 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
}
 8001268:	2000      	movs	r0, #0
 800126a:	bd08      	pop	{r3, pc}
 800126c:	40022000 	.word	0x40022000

08001270 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8001270:	4a03      	ldr	r2, [pc, #12]	; (8001280 <HAL_IncTick+0x10>)
 8001272:	4b04      	ldr	r3, [pc, #16]	; (8001284 <HAL_IncTick+0x14>)
 8001274:	6811      	ldr	r1, [r2, #0]
 8001276:	781b      	ldrb	r3, [r3, #0]
 8001278:	440b      	add	r3, r1
 800127a:	6013      	str	r3, [r2, #0]
}
 800127c:	4770      	bx	lr
 800127e:	bf00      	nop
 8001280:	20000238 	.word	0x20000238
 8001284:	20000008 	.word	0x20000008

08001288 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8001288:	4b01      	ldr	r3, [pc, #4]	; (8001290 <HAL_GetTick+0x8>)
 800128a:	6818      	ldr	r0, [r3, #0]
}
 800128c:	4770      	bx	lr
 800128e:	bf00      	nop
 8001290:	20000238 	.word	0x20000238

08001294 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001294:	b538      	push	{r3, r4, r5, lr}
 8001296:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8001298:	f7ff fff6 	bl	8001288 <HAL_GetTick>
 800129c:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800129e:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 80012a0:	bf1e      	ittt	ne
 80012a2:	4b04      	ldrne	r3, [pc, #16]	; (80012b4 <HAL_Delay+0x20>)
 80012a4:	781b      	ldrbne	r3, [r3, #0]
 80012a6:	18e4      	addne	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80012a8:	f7ff ffee 	bl	8001288 <HAL_GetTick>
 80012ac:	1b43      	subs	r3, r0, r5
 80012ae:	42a3      	cmp	r3, r4
 80012b0:	d3fa      	bcc.n	80012a8 <HAL_Delay+0x14>
  {
  }
}
 80012b2:	bd38      	pop	{r3, r4, r5, pc}
 80012b4:	20000008 	.word	0x20000008

080012b8 <HAL_ADC_ConvCpltCallback>:
 80012b8:	4770      	bx	lr

080012ba <ADC_DMAConvCplt>:
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80012ba:	6a43      	ldr	r3, [r0, #36]	; 0x24
{
 80012bc:	b510      	push	{r4, lr}
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80012be:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80012c0:	f012 0f50 	tst.w	r2, #80	; 0x50
 80012c4:	d11b      	bne.n	80012fe <ADC_DMAConvCplt+0x44>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80012c6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80012c8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80012cc:	629a      	str	r2, [r3, #40]	; 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80012ce:	681a      	ldr	r2, [r3, #0]
 80012d0:	6892      	ldr	r2, [r2, #8]
 80012d2:	f402 2260 	and.w	r2, r2, #917504	; 0xe0000
 80012d6:	f5b2 2f60 	cmp.w	r2, #917504	; 0xe0000
 80012da:	d10c      	bne.n	80012f6 <ADC_DMAConvCplt+0x3c>
 80012dc:	7b1a      	ldrb	r2, [r3, #12]
 80012de:	b952      	cbnz	r2, 80012f6 <ADC_DMAConvCplt+0x3c>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80012e0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80012e2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80012e6:	629a      	str	r2, [r3, #40]	; 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80012e8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80012ea:	04d2      	lsls	r2, r2, #19
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80012ec:	bf5e      	ittt	pl
 80012ee:	6a9a      	ldrpl	r2, [r3, #40]	; 0x28
 80012f0:	f042 0201 	orrpl.w	r2, r2, #1
 80012f4:	629a      	strpl	r2, [r3, #40]	; 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80012f6:	4618      	mov	r0, r3
 80012f8:	f7ff ffde 	bl	80012b8 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 80012fc:	bd10      	pop	{r4, pc}
    hadc->DMA_Handle->XferErrorCallback(hdma);
 80012fe:	6a1b      	ldr	r3, [r3, #32]
}
 8001300:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8001304:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001306:	4718      	bx	r3

08001308 <HAL_ADC_ConvHalfCpltCallback>:
 8001308:	4770      	bx	lr

0800130a <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 800130a:	b508      	push	{r3, lr}
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800130c:	6a40      	ldr	r0, [r0, #36]	; 0x24
 800130e:	f7ff fffb 	bl	8001308 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001312:	bd08      	pop	{r3, pc}

08001314 <HAL_ADC_ErrorCallback>:
 8001314:	4770      	bx	lr

08001316 <ADC_DMAError>:
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001316:	6a40      	ldr	r0, [r0, #36]	; 0x24
{
 8001318:	b508      	push	{r3, lr}
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800131a:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800131c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001320:	6283      	str	r3, [r0, #40]	; 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8001322:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8001324:	f043 0304 	orr.w	r3, r3, #4
 8001328:	62c3      	str	r3, [r0, #44]	; 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800132a:	f7ff fff3 	bl	8001314 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800132e:	bd08      	pop	{r3, pc}

08001330 <HAL_ADC_ConfigChannel>:
  __IO uint32_t wait_loop_index = 0U;
 8001330:	2300      	movs	r3, #0
{ 
 8001332:	b573      	push	{r0, r1, r4, r5, r6, lr}
  __IO uint32_t wait_loop_index = 0U;
 8001334:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hadc);
 8001336:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
{ 
 800133a:	4604      	mov	r4, r0
  __HAL_LOCK(hadc);
 800133c:	2b01      	cmp	r3, #1
 800133e:	d06c      	beq.n	800141a <HAL_ADC_ConfigChannel+0xea>
 8001340:	2301      	movs	r3, #1
 8001342:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
  if (sConfig->Rank < 7U)
 8001346:	684d      	ldr	r5, [r1, #4]
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8001348:	6802      	ldr	r2, [r0, #0]
  if (sConfig->Rank < 7U)
 800134a:	2d06      	cmp	r5, #6
    MODIFY_REG(hadc->Instance->SQR3                        ,
 800134c:	6808      	ldr	r0, [r1, #0]
 800134e:	eb05 0385 	add.w	r3, r5, r5, lsl #2
  if (sConfig->Rank < 7U)
 8001352:	d822      	bhi.n	800139a <HAL_ADC_ConfigChannel+0x6a>
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8001354:	261f      	movs	r6, #31
 8001356:	6b55      	ldr	r5, [r2, #52]	; 0x34
 8001358:	3b05      	subs	r3, #5
 800135a:	409e      	lsls	r6, r3
 800135c:	ea25 0506 	bic.w	r5, r5, r6
 8001360:	fa00 f303 	lsl.w	r3, r0, r3
 8001364:	432b      	orrs	r3, r5
 8001366:	6353      	str	r3, [r2, #52]	; 0x34
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8001368:	2809      	cmp	r0, #9
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 800136a:	688b      	ldr	r3, [r1, #8]
 800136c:	eb00 0540 	add.w	r5, r0, r0, lsl #1
 8001370:	f04f 0107 	mov.w	r1, #7
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8001374:	d929      	bls.n	80013ca <HAL_ADC_ConfigChannel+0x9a>
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001376:	68d6      	ldr	r6, [r2, #12]
 8001378:	3d1e      	subs	r5, #30
 800137a:	40a9      	lsls	r1, r5
 800137c:	ea26 0101 	bic.w	r1, r6, r1
 8001380:	40ab      	lsls	r3, r5
 8001382:	430b      	orrs	r3, r1
 8001384:	60d3      	str	r3, [r2, #12]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001386:	f1a0 0310 	sub.w	r3, r0, #16
 800138a:	2b01      	cmp	r3, #1
 800138c:	d925      	bls.n	80013da <HAL_ADC_ConfigChannel+0xaa>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800138e:	2000      	movs	r0, #0
  __HAL_UNLOCK(hadc);
 8001390:	2300      	movs	r3, #0
 8001392:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
}
 8001396:	b002      	add	sp, #8
 8001398:	bd70      	pop	{r4, r5, r6, pc}
  else if (sConfig->Rank < 13U)
 800139a:	2d0c      	cmp	r5, #12
 800139c:	f04f 051f 	mov.w	r5, #31
 80013a0:	d809      	bhi.n	80013b6 <HAL_ADC_ConfigChannel+0x86>
    MODIFY_REG(hadc->Instance->SQR2                        ,
 80013a2:	6b16      	ldr	r6, [r2, #48]	; 0x30
 80013a4:	3b23      	subs	r3, #35	; 0x23
 80013a6:	409d      	lsls	r5, r3
 80013a8:	ea26 0505 	bic.w	r5, r6, r5
 80013ac:	fa00 f303 	lsl.w	r3, r0, r3
 80013b0:	432b      	orrs	r3, r5
 80013b2:	6313      	str	r3, [r2, #48]	; 0x30
 80013b4:	e7d8      	b.n	8001368 <HAL_ADC_ConfigChannel+0x38>
    MODIFY_REG(hadc->Instance->SQR1                        ,
 80013b6:	6ad6      	ldr	r6, [r2, #44]	; 0x2c
 80013b8:	3b41      	subs	r3, #65	; 0x41
 80013ba:	409d      	lsls	r5, r3
 80013bc:	ea26 0505 	bic.w	r5, r6, r5
 80013c0:	fa00 f303 	lsl.w	r3, r0, r3
 80013c4:	432b      	orrs	r3, r5
 80013c6:	62d3      	str	r3, [r2, #44]	; 0x2c
 80013c8:	e7ce      	b.n	8001368 <HAL_ADC_ConfigChannel+0x38>
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 80013ca:	6910      	ldr	r0, [r2, #16]
 80013cc:	40a9      	lsls	r1, r5
 80013ce:	ea20 0101 	bic.w	r1, r0, r1
 80013d2:	40ab      	lsls	r3, r5
 80013d4:	430b      	orrs	r3, r1
 80013d6:	6113      	str	r3, [r2, #16]
 80013d8:	e7d9      	b.n	800138e <HAL_ADC_ConfigChannel+0x5e>
    if (hadc->Instance == ADC1)
 80013da:	4b11      	ldr	r3, [pc, #68]	; (8001420 <HAL_ADC_ConfigChannel+0xf0>)
 80013dc:	429a      	cmp	r2, r3
 80013de:	d116      	bne.n	800140e <HAL_ADC_ConfigChannel+0xde>
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 80013e0:	6893      	ldr	r3, [r2, #8]
 80013e2:	021b      	lsls	r3, r3, #8
 80013e4:	d4d3      	bmi.n	800138e <HAL_ADC_ConfigChannel+0x5e>
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80013e6:	6893      	ldr	r3, [r2, #8]
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80013e8:	2810      	cmp	r0, #16
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80013ea:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80013ee:	6093      	str	r3, [r2, #8]
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80013f0:	d1cd      	bne.n	800138e <HAL_ADC_ConfigChannel+0x5e>
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80013f2:	4b0c      	ldr	r3, [pc, #48]	; (8001424 <HAL_ADC_ConfigChannel+0xf4>)
 80013f4:	4a0c      	ldr	r2, [pc, #48]	; (8001428 <HAL_ADC_ConfigChannel+0xf8>)
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	fbb3 f3f2 	udiv	r3, r3, r2
 80013fc:	220a      	movs	r2, #10
 80013fe:	4353      	muls	r3, r2
            wait_loop_index--;
 8001400:	9301      	str	r3, [sp, #4]
          while(wait_loop_index != 0U)
 8001402:	9b01      	ldr	r3, [sp, #4]
 8001404:	2b00      	cmp	r3, #0
 8001406:	d0c2      	beq.n	800138e <HAL_ADC_ConfigChannel+0x5e>
            wait_loop_index--;
 8001408:	9b01      	ldr	r3, [sp, #4]
 800140a:	3b01      	subs	r3, #1
 800140c:	e7f8      	b.n	8001400 <HAL_ADC_ConfigChannel+0xd0>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800140e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
      tmp_hal_status = HAL_ERROR;
 8001410:	2001      	movs	r0, #1
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001412:	f043 0320 	orr.w	r3, r3, #32
 8001416:	62a3      	str	r3, [r4, #40]	; 0x28
      tmp_hal_status = HAL_ERROR;
 8001418:	e7ba      	b.n	8001390 <HAL_ADC_ConfigChannel+0x60>
  __HAL_LOCK(hadc);
 800141a:	2002      	movs	r0, #2
 800141c:	e7bb      	b.n	8001396 <HAL_ADC_ConfigChannel+0x66>
 800141e:	bf00      	nop
 8001420:	40012400 	.word	0x40012400
 8001424:	20000004 	.word	0x20000004
 8001428:	000f4240 	.word	0x000f4240

0800142c <ADC_Enable>:
  __IO uint32_t wait_loop_index = 0U;
 800142c:	2300      	movs	r3, #0
{
 800142e:	b537      	push	{r0, r1, r2, r4, r5, lr}
  __IO uint32_t wait_loop_index = 0U;
 8001430:	9301      	str	r3, [sp, #4]
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001432:	6803      	ldr	r3, [r0, #0]
{
 8001434:	4604      	mov	r4, r0
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001436:	689a      	ldr	r2, [r3, #8]
 8001438:	07d2      	lsls	r2, r2, #31
 800143a:	d502      	bpl.n	8001442 <ADC_Enable+0x16>
  return HAL_OK;
 800143c:	2000      	movs	r0, #0
}
 800143e:	b003      	add	sp, #12
 8001440:	bd30      	pop	{r4, r5, pc}
    __HAL_ADC_ENABLE(hadc);
 8001442:	689a      	ldr	r2, [r3, #8]
 8001444:	f042 0201 	orr.w	r2, r2, #1
 8001448:	609a      	str	r2, [r3, #8]
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800144a:	4b14      	ldr	r3, [pc, #80]	; (800149c <ADC_Enable+0x70>)
 800144c:	4a14      	ldr	r2, [pc, #80]	; (80014a0 <ADC_Enable+0x74>)
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	fbb3 f3f2 	udiv	r3, r3, r2
      wait_loop_index--;
 8001454:	9301      	str	r3, [sp, #4]
    while(wait_loop_index != 0U)
 8001456:	9b01      	ldr	r3, [sp, #4]
 8001458:	b9e3      	cbnz	r3, 8001494 <ADC_Enable+0x68>
    tickstart = HAL_GetTick();
 800145a:	f7ff ff15 	bl	8001288 <HAL_GetTick>
 800145e:	4605      	mov	r5, r0
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001460:	6823      	ldr	r3, [r4, #0]
 8001462:	689b      	ldr	r3, [r3, #8]
 8001464:	07db      	lsls	r3, r3, #31
 8001466:	d4e9      	bmi.n	800143c <ADC_Enable+0x10>
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001468:	f7ff ff0e 	bl	8001288 <HAL_GetTick>
 800146c:	1b40      	subs	r0, r0, r5
 800146e:	2802      	cmp	r0, #2
 8001470:	d9f6      	bls.n	8001460 <ADC_Enable+0x34>
        if(ADC_IS_ENABLE(hadc) == RESET)
 8001472:	6823      	ldr	r3, [r4, #0]
 8001474:	689b      	ldr	r3, [r3, #8]
 8001476:	f013 0301 	ands.w	r3, r3, #1
 800147a:	d1f1      	bne.n	8001460 <ADC_Enable+0x34>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800147c:	6aa2      	ldr	r2, [r4, #40]	; 0x28
          return HAL_ERROR;
 800147e:	2001      	movs	r0, #1
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001480:	f042 0210 	orr.w	r2, r2, #16
 8001484:	62a2      	str	r2, [r4, #40]	; 0x28
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001486:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
          __HAL_UNLOCK(hadc);
 8001488:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800148c:	f042 0201 	orr.w	r2, r2, #1
 8001490:	62e2      	str	r2, [r4, #44]	; 0x2c
          return HAL_ERROR;
 8001492:	e7d4      	b.n	800143e <ADC_Enable+0x12>
      wait_loop_index--;
 8001494:	9b01      	ldr	r3, [sp, #4]
 8001496:	3b01      	subs	r3, #1
 8001498:	e7dc      	b.n	8001454 <ADC_Enable+0x28>
 800149a:	bf00      	nop
 800149c:	20000004 	.word	0x20000004
 80014a0:	000f4240 	.word	0x000f4240

080014a4 <HAL_ADC_Start_DMA>:
{
 80014a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 80014a8:	4b40      	ldr	r3, [pc, #256]	; (80015ac <HAL_ADC_Start_DMA+0x108>)
{
 80014aa:	4690      	mov	r8, r2
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 80014ac:	6802      	ldr	r2, [r0, #0]
{
 80014ae:	4604      	mov	r4, r0
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 80014b0:	429a      	cmp	r2, r3
{
 80014b2:	460f      	mov	r7, r1
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 80014b4:	d002      	beq.n	80014bc <HAL_ADC_Start_DMA+0x18>
 80014b6:	493e      	ldr	r1, [pc, #248]	; (80015b0 <HAL_ADC_Start_DMA+0x10c>)
 80014b8:	428a      	cmp	r2, r1
 80014ba:	d103      	bne.n	80014c4 <HAL_ADC_Start_DMA+0x20>
 80014bc:	685b      	ldr	r3, [r3, #4]
 80014be:	f413 2f70 	tst.w	r3, #983040	; 0xf0000
 80014c2:	d16e      	bne.n	80015a2 <HAL_ADC_Start_DMA+0xfe>
    __HAL_LOCK(hadc);
 80014c4:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 80014c8:	2b01      	cmp	r3, #1
 80014ca:	d06c      	beq.n	80015a6 <HAL_ADC_Start_DMA+0x102>
 80014cc:	2301      	movs	r3, #1
    tmp_hal_status = ADC_Enable(hadc);
 80014ce:	4620      	mov	r0, r4
    __HAL_LOCK(hadc);
 80014d0:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
    tmp_hal_status = ADC_Enable(hadc);
 80014d4:	f7ff ffaa 	bl	800142c <ADC_Enable>
    if (tmp_hal_status == HAL_OK)
 80014d8:	4606      	mov	r6, r0
 80014da:	2800      	cmp	r0, #0
 80014dc:	d15d      	bne.n	800159a <HAL_ADC_Start_DMA+0xf6>
      ADC_STATE_CLR_SET(hadc->State,
 80014de:	6aa5      	ldr	r5, [r4, #40]	; 0x28
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80014e0:	6821      	ldr	r1, [r4, #0]
 80014e2:	4b33      	ldr	r3, [pc, #204]	; (80015b0 <HAL_ADC_Start_DMA+0x10c>)
      ADC_STATE_CLR_SET(hadc->State,
 80014e4:	f425 6570 	bic.w	r5, r5, #3840	; 0xf00
 80014e8:	f025 0501 	bic.w	r5, r5, #1
 80014ec:	f445 7580 	orr.w	r5, r5, #256	; 0x100
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80014f0:	4299      	cmp	r1, r3
      ADC_STATE_CLR_SET(hadc->State,
 80014f2:	62a5      	str	r5, [r4, #40]	; 0x28
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80014f4:	d104      	bne.n	8001500 <HAL_ADC_Start_DMA+0x5c>
 80014f6:	4a2d      	ldr	r2, [pc, #180]	; (80015ac <HAL_ADC_Start_DMA+0x108>)
 80014f8:	6853      	ldr	r3, [r2, #4]
 80014fa:	f413 2f70 	tst.w	r3, #983040	; 0xf0000
 80014fe:	d13e      	bne.n	800157e <HAL_ADC_Start_DMA+0xda>
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001500:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001502:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8001506:	62a3      	str	r3, [r4, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001508:	684b      	ldr	r3, [r1, #4]
 800150a:	055a      	lsls	r2, r3, #21
 800150c:	d505      	bpl.n	800151a <HAL_ADC_Start_DMA+0x76>
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800150e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001510:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001514:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001518:	62a3      	str	r3, [r4, #40]	; 0x28
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800151a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800151c:	6a20      	ldr	r0, [r4, #32]
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800151e:	f413 5380 	ands.w	r3, r3, #4096	; 0x1000
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001522:	bf18      	it	ne
 8001524:	6ae3      	ldrne	r3, [r4, #44]	; 0x2c
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001526:	463a      	mov	r2, r7
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001528:	bf18      	it	ne
 800152a:	f023 0306 	bicne.w	r3, r3, #6
        ADC_CLEAR_ERRORCODE(hadc);
 800152e:	62e3      	str	r3, [r4, #44]	; 0x2c
      __HAL_UNLOCK(hadc);
 8001530:	2300      	movs	r3, #0
 8001532:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001536:	4b1f      	ldr	r3, [pc, #124]	; (80015b4 <HAL_ADC_Start_DMA+0x110>)
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001538:	314c      	adds	r1, #76	; 0x4c
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800153a:	6283      	str	r3, [r0, #40]	; 0x28
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800153c:	4b1e      	ldr	r3, [pc, #120]	; (80015b8 <HAL_ADC_Start_DMA+0x114>)
 800153e:	62c3      	str	r3, [r0, #44]	; 0x2c
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001540:	4b1e      	ldr	r3, [pc, #120]	; (80015bc <HAL_ADC_Start_DMA+0x118>)
 8001542:	6303      	str	r3, [r0, #48]	; 0x30
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8001544:	f06f 0302 	mvn.w	r3, #2
 8001548:	f841 3c4c 	str.w	r3, [r1, #-76]
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 800154c:	f851 3c44 	ldr.w	r3, [r1, #-68]
 8001550:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001554:	f841 3c44 	str.w	r3, [r1, #-68]
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001558:	4643      	mov	r3, r8
 800155a:	f000 f957 	bl	800180c <HAL_DMA_Start_IT>
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 800155e:	6823      	ldr	r3, [r4, #0]
 8001560:	689a      	ldr	r2, [r3, #8]
 8001562:	f402 2260 	and.w	r2, r2, #917504	; 0xe0000
 8001566:	f5b2 2f60 	cmp.w	r2, #917504	; 0xe0000
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 800156a:	689a      	ldr	r2, [r3, #8]
 800156c:	bf0c      	ite	eq
 800156e:	f442 02a0 	orreq.w	r2, r2, #5242880	; 0x500000
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8001572:	f442 1280 	orrne.w	r2, r2, #1048576	; 0x100000
 8001576:	609a      	str	r2, [r3, #8]
}
 8001578:	4630      	mov	r0, r6
 800157a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800157e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001580:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001584:	62a3      	str	r3, [r4, #40]	; 0x28
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8001586:	6853      	ldr	r3, [r2, #4]
 8001588:	055b      	lsls	r3, r3, #21
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800158a:	bf41      	itttt	mi
 800158c:	6aa0      	ldrmi	r0, [r4, #40]	; 0x28
 800158e:	f420 5040 	bicmi.w	r0, r0, #12288	; 0x3000
 8001592:	f440 5080 	orrmi.w	r0, r0, #4096	; 0x1000
 8001596:	62a0      	strmi	r0, [r4, #40]	; 0x28
 8001598:	e7bf      	b.n	800151a <HAL_ADC_Start_DMA+0x76>
      __HAL_UNLOCK(hadc);
 800159a:	2300      	movs	r3, #0
 800159c:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
 80015a0:	e7ea      	b.n	8001578 <HAL_ADC_Start_DMA+0xd4>
    tmp_hal_status = HAL_ERROR;
 80015a2:	2601      	movs	r6, #1
 80015a4:	e7e8      	b.n	8001578 <HAL_ADC_Start_DMA+0xd4>
    __HAL_LOCK(hadc);
 80015a6:	2602      	movs	r6, #2
 80015a8:	e7e6      	b.n	8001578 <HAL_ADC_Start_DMA+0xd4>
 80015aa:	bf00      	nop
 80015ac:	40012400 	.word	0x40012400
 80015b0:	40012800 	.word	0x40012800
 80015b4:	080012bb 	.word	0x080012bb
 80015b8:	0800130b 	.word	0x0800130b
 80015bc:	08001317 	.word	0x08001317

080015c0 <ADC_ConversionStop_Disable>:
{
 80015c0:	b538      	push	{r3, r4, r5, lr}
  if (ADC_IS_ENABLE(hadc) != RESET)
 80015c2:	6803      	ldr	r3, [r0, #0]
{
 80015c4:	4604      	mov	r4, r0
  if (ADC_IS_ENABLE(hadc) != RESET)
 80015c6:	689a      	ldr	r2, [r3, #8]
 80015c8:	07d1      	lsls	r1, r2, #31
 80015ca:	d401      	bmi.n	80015d0 <ADC_ConversionStop_Disable+0x10>
  return HAL_OK;
 80015cc:	2000      	movs	r0, #0
}
 80015ce:	bd38      	pop	{r3, r4, r5, pc}
    __HAL_ADC_DISABLE(hadc);
 80015d0:	689a      	ldr	r2, [r3, #8]
 80015d2:	f022 0201 	bic.w	r2, r2, #1
 80015d6:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 80015d8:	f7ff fe56 	bl	8001288 <HAL_GetTick>
 80015dc:	4605      	mov	r5, r0
    while(ADC_IS_ENABLE(hadc) != RESET)
 80015de:	6823      	ldr	r3, [r4, #0]
 80015e0:	689b      	ldr	r3, [r3, #8]
 80015e2:	07db      	lsls	r3, r3, #31
 80015e4:	d5f2      	bpl.n	80015cc <ADC_ConversionStop_Disable+0xc>
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80015e6:	f7ff fe4f 	bl	8001288 <HAL_GetTick>
 80015ea:	1b40      	subs	r0, r0, r5
 80015ec:	2802      	cmp	r0, #2
 80015ee:	d9f6      	bls.n	80015de <ADC_ConversionStop_Disable+0x1e>
        if(ADC_IS_ENABLE(hadc) != RESET)
 80015f0:	6823      	ldr	r3, [r4, #0]
 80015f2:	689b      	ldr	r3, [r3, #8]
 80015f4:	07da      	lsls	r2, r3, #31
 80015f6:	d5f2      	bpl.n	80015de <ADC_ConversionStop_Disable+0x1e>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80015f8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
          return HAL_ERROR;
 80015fa:	2001      	movs	r0, #1
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80015fc:	f043 0310 	orr.w	r3, r3, #16
 8001600:	62a3      	str	r3, [r4, #40]	; 0x28
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001602:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001604:	f043 0301 	orr.w	r3, r3, #1
 8001608:	62e3      	str	r3, [r4, #44]	; 0x2c
          return HAL_ERROR;
 800160a:	e7e0      	b.n	80015ce <ADC_ConversionStop_Disable+0xe>

0800160c <HAL_ADC_Init>:
{
 800160c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if(hadc == NULL)
 800160e:	4604      	mov	r4, r0
 8001610:	2800      	cmp	r0, #0
 8001612:	d06d      	beq.n	80016f0 <HAL_ADC_Init+0xe4>
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001614:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8001616:	b923      	cbnz	r3, 8001622 <HAL_ADC_Init+0x16>
    ADC_CLEAR_ERRORCODE(hadc);
 8001618:	62c3      	str	r3, [r0, #44]	; 0x2c
    hadc->Lock = HAL_UNLOCKED;
 800161a:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    HAL_ADC_MspInit(hadc);
 800161e:	f7ff fca1 	bl	8000f64 <HAL_ADC_MspInit>
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001622:	4620      	mov	r0, r4
 8001624:	f7ff ffcc 	bl	80015c0 <ADC_ConversionStop_Disable>
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001628:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800162a:	f013 0310 	ands.w	r3, r3, #16
 800162e:	d161      	bne.n	80016f4 <HAL_ADC_Init+0xe8>
 8001630:	2800      	cmp	r0, #0
 8001632:	d15f      	bne.n	80016f4 <HAL_ADC_Init+0xe8>
    ADC_STATE_CLR_SET(hadc->State,
 8001634:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001636:	6861      	ldr	r1, [r4, #4]
    ADC_STATE_CLR_SET(hadc->State,
 8001638:	f422 5288 	bic.w	r2, r2, #4352	; 0x1100
 800163c:	f022 0202 	bic.w	r2, r2, #2
 8001640:	f042 0202 	orr.w	r2, r2, #2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001644:	69e5      	ldr	r5, [r4, #28]
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001646:	68a6      	ldr	r6, [r4, #8]
    ADC_STATE_CLR_SET(hadc->State,
 8001648:	62a2      	str	r2, [r4, #40]	; 0x28
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 800164a:	7b22      	ldrb	r2, [r4, #12]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800164c:	4329      	orrs	r1, r5
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 800164e:	f5b6 7f80 	cmp.w	r6, #256	; 0x100
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001652:	ea41 0142 	orr.w	r1, r1, r2, lsl #1
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001656:	d036      	beq.n	80016c6 <HAL_ADC_Init+0xba>
 8001658:	1e77      	subs	r7, r6, #1
 800165a:	427d      	negs	r5, r7
 800165c:	417d      	adcs	r5, r7
 800165e:	022d      	lsls	r5, r5, #8
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001660:	7d27      	ldrb	r7, [r4, #20]
 8001662:	2f01      	cmp	r7, #1
 8001664:	d106      	bne.n	8001674 <HAL_ADC_Init+0x68>
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001666:	bb82      	cbnz	r2, 80016ca <HAL_ADC_Init+0xbe>
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8001668:	69a2      	ldr	r2, [r4, #24]
 800166a:	3a01      	subs	r2, #1
 800166c:	ea45 3242 	orr.w	r2, r5, r2, lsl #13
 8001670:	f442 6500 	orr.w	r5, r2, #2048	; 0x800
      MODIFY_REG(hadc->Instance->CR1,
 8001674:	6822      	ldr	r2, [r4, #0]
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8001676:	f5b6 7f80 	cmp.w	r6, #256	; 0x100
      MODIFY_REG(hadc->Instance->CR1,
 800167a:	6857      	ldr	r7, [r2, #4]
 800167c:	f427 4769 	bic.w	r7, r7, #59648	; 0xe900
 8001680:	ea45 0507 	orr.w	r5, r5, r7
 8001684:	6055      	str	r5, [r2, #4]
      MODIFY_REG(hadc->Instance->CR2,
 8001686:	6897      	ldr	r7, [r2, #8]
 8001688:	4d1d      	ldr	r5, [pc, #116]	; (8001700 <HAL_ADC_Init+0xf4>)
 800168a:	ea05 0507 	and.w	r5, r5, r7
 800168e:	ea45 0501 	orr.w	r5, r5, r1
 8001692:	6095      	str	r5, [r2, #8]
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8001694:	d001      	beq.n	800169a <HAL_ADC_Init+0x8e>
 8001696:	2e01      	cmp	r6, #1
 8001698:	d102      	bne.n	80016a0 <HAL_ADC_Init+0x94>
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 800169a:	6923      	ldr	r3, [r4, #16]
 800169c:	3b01      	subs	r3, #1
 800169e:	051b      	lsls	r3, r3, #20
    MODIFY_REG(hadc->Instance->SQR1,
 80016a0:	6ad5      	ldr	r5, [r2, #44]	; 0x2c
 80016a2:	f425 0570 	bic.w	r5, r5, #15728640	; 0xf00000
 80016a6:	432b      	orrs	r3, r5
 80016a8:	62d3      	str	r3, [r2, #44]	; 0x2c
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80016aa:	6892      	ldr	r2, [r2, #8]
 80016ac:	4b15      	ldr	r3, [pc, #84]	; (8001704 <HAL_ADC_Init+0xf8>)
 80016ae:	4013      	ands	r3, r2
 80016b0:	4299      	cmp	r1, r3
 80016b2:	d113      	bne.n	80016dc <HAL_ADC_Init+0xd0>
      ADC_CLEAR_ERRORCODE(hadc);
 80016b4:	2300      	movs	r3, #0
 80016b6:	62e3      	str	r3, [r4, #44]	; 0x2c
      ADC_STATE_CLR_SET(hadc->State,
 80016b8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80016ba:	f023 0303 	bic.w	r3, r3, #3
 80016be:	f043 0301 	orr.w	r3, r3, #1
 80016c2:	62a3      	str	r3, [r4, #40]	; 0x28
}
 80016c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80016c6:	4635      	mov	r5, r6
 80016c8:	e7ca      	b.n	8001660 <HAL_ADC_Init+0x54>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80016ca:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80016cc:	f042 0220 	orr.w	r2, r2, #32
 80016d0:	62a2      	str	r2, [r4, #40]	; 0x28
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80016d2:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80016d4:	f042 0201 	orr.w	r2, r2, #1
 80016d8:	62e2      	str	r2, [r4, #44]	; 0x2c
 80016da:	e7cb      	b.n	8001674 <HAL_ADC_Init+0x68>
      ADC_STATE_CLR_SET(hadc->State,
 80016dc:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80016de:	f023 0312 	bic.w	r3, r3, #18
 80016e2:	f043 0310 	orr.w	r3, r3, #16
 80016e6:	62a3      	str	r3, [r4, #40]	; 0x28
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80016e8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80016ea:	f043 0301 	orr.w	r3, r3, #1
 80016ee:	62e3      	str	r3, [r4, #44]	; 0x2c
    return HAL_ERROR;
 80016f0:	2001      	movs	r0, #1
 80016f2:	e7e7      	b.n	80016c4 <HAL_ADC_Init+0xb8>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80016f4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80016f6:	f043 0310 	orr.w	r3, r3, #16
 80016fa:	62a3      	str	r3, [r4, #40]	; 0x28
    tmp_hal_status = HAL_ERROR;
 80016fc:	e7f8      	b.n	80016f0 <HAL_ADC_Init+0xe4>
 80016fe:	bf00      	nop
 8001700:	ffe1f7fd 	.word	0xffe1f7fd
 8001704:	ff1f0efe 	.word	0xff1f0efe

08001708 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001708:	4907      	ldr	r1, [pc, #28]	; (8001728 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800170a:	0203      	lsls	r3, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800170c:	68ca      	ldr	r2, [r1, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800170e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001712:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8001716:	0412      	lsls	r2, r2, #16
 8001718:	0c12      	lsrs	r2, r2, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800171a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800171c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001720:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8001724:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8001726:	4770      	bx	lr
 8001728:	e000ed00 	.word	0xe000ed00

0800172c <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800172c:	4b15      	ldr	r3, [pc, #84]	; (8001784 <HAL_NVIC_SetPriority+0x58>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800172e:	b530      	push	{r4, r5, lr}
 8001730:	68dc      	ldr	r4, [r3, #12]
 8001732:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001736:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800173a:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800173c:	2b04      	cmp	r3, #4
 800173e:	bf28      	it	cs
 8001740:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001742:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001744:	f04f 35ff 	mov.w	r5, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001748:	bf94      	ite	ls
 800174a:	2400      	movls	r4, #0
 800174c:	3c03      	subhi	r4, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800174e:	fa05 f303 	lsl.w	r3, r5, r3
 8001752:	ea21 0303 	bic.w	r3, r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001756:	40a5      	lsls	r5, r4
 8001758:	ea22 0205 	bic.w	r2, r2, r5
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800175c:	40a3      	lsls	r3, r4
  if ((int32_t)(IRQn) >= 0)
 800175e:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001760:	ea43 0302 	orr.w	r3, r3, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001764:	bfac      	ite	ge
 8001766:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800176a:	4a07      	ldrlt	r2, [pc, #28]	; (8001788 <HAL_NVIC_SetPriority+0x5c>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800176c:	ea4f 1303 	mov.w	r3, r3, lsl #4
 8001770:	b2db      	uxtb	r3, r3
 8001772:	bfab      	itete	ge
 8001774:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001778:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800177c:	f880 3300 	strbge.w	r3, [r0, #768]	; 0x300
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001780:	5413      	strblt	r3, [r2, r0]
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8001782:	bd30      	pop	{r4, r5, pc}
 8001784:	e000ed00 	.word	0xe000ed00
 8001788:	e000ed14 	.word	0xe000ed14

0800178c <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 800178c:	2800      	cmp	r0, #0
 800178e:	db07      	blt.n	80017a0 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001790:	2301      	movs	r3, #1
 8001792:	0941      	lsrs	r1, r0, #5
 8001794:	4a03      	ldr	r2, [pc, #12]	; (80017a4 <HAL_NVIC_EnableIRQ+0x18>)
 8001796:	f000 001f 	and.w	r0, r0, #31
 800179a:	4083      	lsls	r3, r0
 800179c:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 80017a0:	4770      	bx	lr
 80017a2:	bf00      	nop
 80017a4:	e000e100 	.word	0xe000e100

080017a8 <HAL_DMA_Init>:
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
  uint32_t tmp = 0U;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80017a8:	4603      	mov	r3, r0
{
 80017aa:	b510      	push	{r4, lr}
  if(hdma == NULL)
 80017ac:	b340      	cbz	r0, 8001800 <HAL_DMA_Init+0x58>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80017ae:	2114      	movs	r1, #20
 80017b0:	6800      	ldr	r0, [r0, #0]
 80017b2:	4a14      	ldr	r2, [pc, #80]	; (8001804 <HAL_DMA_Init+0x5c>)
 80017b4:	4402      	add	r2, r0
 80017b6:	fbb2 f2f1 	udiv	r2, r2, r1
 80017ba:	0092      	lsls	r2, r2, #2
 80017bc:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 80017be:	4a12      	ldr	r2, [pc, #72]	; (8001808 <HAL_DMA_Init+0x60>)
 80017c0:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80017c2:	2202      	movs	r2, #2
 80017c4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80017c8:	e9d3 2401 	ldrd	r2, r4, [r3, #4]
 80017cc:	4322      	orrs	r2, r4
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80017ce:	68dc      	ldr	r4, [r3, #12]
  tmp = hdma->Instance->CCR;
 80017d0:	6801      	ldr	r1, [r0, #0]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80017d2:	4322      	orrs	r2, r4
 80017d4:	691c      	ldr	r4, [r3, #16]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80017d6:	f421 517f 	bic.w	r1, r1, #16320	; 0x3fc0
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80017da:	4322      	orrs	r2, r4
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80017dc:	695c      	ldr	r4, [r3, #20]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80017de:	f021 0130 	bic.w	r1, r1, #48	; 0x30
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80017e2:	4322      	orrs	r2, r4
 80017e4:	699c      	ldr	r4, [r3, #24]
 80017e6:	4322      	orrs	r2, r4
          hdma->Init.Mode                | hdma->Init.Priority;
 80017e8:	69dc      	ldr	r4, [r3, #28]
 80017ea:	4322      	orrs	r2, r4
  tmp |=  hdma->Init.Direction        |
 80017ec:	430a      	orrs	r2, r1

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80017ee:	6002      	str	r2, [r0, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80017f0:	2000      	movs	r0, #0

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80017f2:	2201      	movs	r2, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80017f4:	6398      	str	r0, [r3, #56]	; 0x38
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80017f6:	f883 0020 	strb.w	r0, [r3, #32]
  hdma->State = HAL_DMA_STATE_READY;
 80017fa:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  return HAL_OK;
}
 80017fe:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8001800:	2001      	movs	r0, #1
 8001802:	e7fc      	b.n	80017fe <HAL_DMA_Init+0x56>
 8001804:	bffdfff8 	.word	0xbffdfff8
 8001808:	40020000 	.word	0x40020000

0800180c <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800180c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800180e:	4605      	mov	r5, r0

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8001810:	f890 0020 	ldrb.w	r0, [r0, #32]
 8001814:	2801      	cmp	r0, #1
 8001816:	d036      	beq.n	8001886 <HAL_DMA_Start_IT+0x7a>
 8001818:	2001      	movs	r0, #1
 800181a:	f885 0020 	strb.w	r0, [r5, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800181e:	f895 0021 	ldrb.w	r0, [r5, #33]	; 0x21
 8001822:	2400      	movs	r4, #0
 8001824:	2801      	cmp	r0, #1
 8001826:	b2c6      	uxtb	r6, r0
 8001828:	f04f 0002 	mov.w	r0, #2
 800182c:	d128      	bne.n	8001880 <HAL_DMA_Start_IT+0x74>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800182e:	f885 0021 	strb.w	r0, [r5, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001832:	63ac      	str	r4, [r5, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001834:	682c      	ldr	r4, [r5, #0]
 8001836:	6820      	ldr	r0, [r4, #0]
 8001838:	f020 0001 	bic.w	r0, r0, #1
 800183c:	6020      	str	r0, [r4, #0]
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800183e:	e9d5 700f 	ldrd	r7, r0, [r5, #60]	; 0x3c
 8001842:	fa06 f000 	lsl.w	r0, r6, r0
 8001846:	6078      	str	r0, [r7, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001848:	6063      	str	r3, [r4, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800184a:	686b      	ldr	r3, [r5, #4]
 800184c:	2b10      	cmp	r3, #16
    if(NULL != hdma->XferHalfCpltCallback)
 800184e:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001850:	bf0b      	itete	eq
 8001852:	60a2      	streq	r2, [r4, #8]
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Channel source address */
    hdma->Instance->CPAR = SrcAddress;
 8001854:	60a1      	strne	r1, [r4, #8]
    hdma->Instance->CMAR = SrcAddress;
 8001856:	60e1      	streq	r1, [r4, #12]

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
 8001858:	60e2      	strne	r2, [r4, #12]
    if(NULL != hdma->XferHalfCpltCallback)
 800185a:	b14b      	cbz	r3, 8001870 <HAL_DMA_Start_IT+0x64>
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800185c:	6823      	ldr	r3, [r4, #0]
 800185e:	f043 030e 	orr.w	r3, r3, #14
  HAL_StatusTypeDef status = HAL_OK;
 8001862:	2000      	movs	r0, #0
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001864:	6023      	str	r3, [r4, #0]
    __HAL_DMA_ENABLE(hdma);
 8001866:	6823      	ldr	r3, [r4, #0]
 8001868:	f043 0301 	orr.w	r3, r3, #1
 800186c:	6023      	str	r3, [r4, #0]
}
 800186e:	bdf0      	pop	{r4, r5, r6, r7, pc}
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001870:	6823      	ldr	r3, [r4, #0]
 8001872:	f023 0304 	bic.w	r3, r3, #4
 8001876:	6023      	str	r3, [r4, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001878:	6823      	ldr	r3, [r4, #0]
 800187a:	f043 030a 	orr.w	r3, r3, #10
 800187e:	e7f0      	b.n	8001862 <HAL_DMA_Start_IT+0x56>
    __HAL_UNLOCK(hdma); 
 8001880:	f885 4020 	strb.w	r4, [r5, #32]
    status = HAL_BUSY;
 8001884:	e7f3      	b.n	800186e <HAL_DMA_Start_IT+0x62>
  __HAL_LOCK(hdma);
 8001886:	2002      	movs	r0, #2
 8001888:	e7f1      	b.n	800186e <HAL_DMA_Start_IT+0x62>
	...

0800188c <HAL_DMA_IRQHandler>:
{
 800188c:	b470      	push	{r4, r5, r6}
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 800188e:	2504      	movs	r5, #4
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001890:	6bc6      	ldr	r6, [r0, #60]	; 0x3c
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8001892:	6c02      	ldr	r2, [r0, #64]	; 0x40
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001894:	6834      	ldr	r4, [r6, #0]
  uint32_t source_it = hdma->Instance->CCR;
 8001896:	6803      	ldr	r3, [r0, #0]
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8001898:	4095      	lsls	r5, r2
 800189a:	4225      	tst	r5, r4
  uint32_t source_it = hdma->Instance->CCR;
 800189c:	6819      	ldr	r1, [r3, #0]
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 800189e:	d032      	beq.n	8001906 <HAL_DMA_IRQHandler+0x7a>
 80018a0:	074d      	lsls	r5, r1, #29
 80018a2:	d530      	bpl.n	8001906 <HAL_DMA_IRQHandler+0x7a>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80018a4:	681a      	ldr	r2, [r3, #0]
 80018a6:	0696      	lsls	r6, r2, #26
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80018a8:	bf5e      	ittt	pl
 80018aa:	681a      	ldrpl	r2, [r3, #0]
 80018ac:	f022 0204 	bicpl.w	r2, r2, #4
 80018b0:	601a      	strpl	r2, [r3, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80018b2:	4a3e      	ldr	r2, [pc, #248]	; (80019ac <HAL_DMA_IRQHandler+0x120>)
 80018b4:	4293      	cmp	r3, r2
 80018b6:	d019      	beq.n	80018ec <HAL_DMA_IRQHandler+0x60>
 80018b8:	3214      	adds	r2, #20
 80018ba:	4293      	cmp	r3, r2
 80018bc:	d018      	beq.n	80018f0 <HAL_DMA_IRQHandler+0x64>
 80018be:	3214      	adds	r2, #20
 80018c0:	4293      	cmp	r3, r2
 80018c2:	d017      	beq.n	80018f4 <HAL_DMA_IRQHandler+0x68>
 80018c4:	3214      	adds	r2, #20
 80018c6:	4293      	cmp	r3, r2
 80018c8:	d017      	beq.n	80018fa <HAL_DMA_IRQHandler+0x6e>
 80018ca:	3214      	adds	r2, #20
 80018cc:	4293      	cmp	r3, r2
 80018ce:	d017      	beq.n	8001900 <HAL_DMA_IRQHandler+0x74>
 80018d0:	3214      	adds	r2, #20
 80018d2:	4293      	cmp	r3, r2
 80018d4:	bf0c      	ite	eq
 80018d6:	f44f 0380 	moveq.w	r3, #4194304	; 0x400000
 80018da:	f04f 6380 	movne.w	r3, #67108864	; 0x4000000
 80018de:	4a34      	ldr	r2, [pc, #208]	; (80019b0 <HAL_DMA_IRQHandler+0x124>)
 80018e0:	6053      	str	r3, [r2, #4]
    if(hdma->XferHalfCpltCallback != NULL)
 80018e2:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
    if (hdma->XferErrorCallback != NULL)
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d05e      	beq.n	80019a6 <HAL_DMA_IRQHandler+0x11a>
}
 80018e8:	bc70      	pop	{r4, r5, r6}
      hdma->XferErrorCallback(hdma);
 80018ea:	4718      	bx	r3
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80018ec:	2304      	movs	r3, #4
 80018ee:	e7f6      	b.n	80018de <HAL_DMA_IRQHandler+0x52>
 80018f0:	2340      	movs	r3, #64	; 0x40
 80018f2:	e7f4      	b.n	80018de <HAL_DMA_IRQHandler+0x52>
 80018f4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80018f8:	e7f1      	b.n	80018de <HAL_DMA_IRQHandler+0x52>
 80018fa:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80018fe:	e7ee      	b.n	80018de <HAL_DMA_IRQHandler+0x52>
 8001900:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8001904:	e7eb      	b.n	80018de <HAL_DMA_IRQHandler+0x52>
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8001906:	2502      	movs	r5, #2
 8001908:	4095      	lsls	r5, r2
 800190a:	4225      	tst	r5, r4
 800190c:	d035      	beq.n	800197a <HAL_DMA_IRQHandler+0xee>
 800190e:	078d      	lsls	r5, r1, #30
 8001910:	d533      	bpl.n	800197a <HAL_DMA_IRQHandler+0xee>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001912:	681a      	ldr	r2, [r3, #0]
 8001914:	0694      	lsls	r4, r2, #26
 8001916:	d406      	bmi.n	8001926 <HAL_DMA_IRQHandler+0x9a>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8001918:	681a      	ldr	r2, [r3, #0]
 800191a:	f022 020a 	bic.w	r2, r2, #10
 800191e:	601a      	str	r2, [r3, #0]
      hdma->State = HAL_DMA_STATE_READY;
 8001920:	2201      	movs	r2, #1
 8001922:	f880 2021 	strb.w	r2, [r0, #33]	; 0x21
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8001926:	4a21      	ldr	r2, [pc, #132]	; (80019ac <HAL_DMA_IRQHandler+0x120>)
 8001928:	4293      	cmp	r3, r2
 800192a:	d019      	beq.n	8001960 <HAL_DMA_IRQHandler+0xd4>
 800192c:	3214      	adds	r2, #20
 800192e:	4293      	cmp	r3, r2
 8001930:	d018      	beq.n	8001964 <HAL_DMA_IRQHandler+0xd8>
 8001932:	3214      	adds	r2, #20
 8001934:	4293      	cmp	r3, r2
 8001936:	d017      	beq.n	8001968 <HAL_DMA_IRQHandler+0xdc>
 8001938:	3214      	adds	r2, #20
 800193a:	4293      	cmp	r3, r2
 800193c:	d017      	beq.n	800196e <HAL_DMA_IRQHandler+0xe2>
 800193e:	3214      	adds	r2, #20
 8001940:	4293      	cmp	r3, r2
 8001942:	d017      	beq.n	8001974 <HAL_DMA_IRQHandler+0xe8>
 8001944:	3214      	adds	r2, #20
 8001946:	4293      	cmp	r3, r2
 8001948:	bf0c      	ite	eq
 800194a:	f44f 1300 	moveq.w	r3, #2097152	; 0x200000
 800194e:	f04f 7300 	movne.w	r3, #33554432	; 0x2000000
 8001952:	4a17      	ldr	r2, [pc, #92]	; (80019b0 <HAL_DMA_IRQHandler+0x124>)
 8001954:	6053      	str	r3, [r2, #4]
    __HAL_UNLOCK(hdma);
 8001956:	2300      	movs	r3, #0
 8001958:	f880 3020 	strb.w	r3, [r0, #32]
    if(hdma->XferCpltCallback != NULL)
 800195c:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800195e:	e7c1      	b.n	80018e4 <HAL_DMA_IRQHandler+0x58>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8001960:	2302      	movs	r3, #2
 8001962:	e7f6      	b.n	8001952 <HAL_DMA_IRQHandler+0xc6>
 8001964:	2320      	movs	r3, #32
 8001966:	e7f4      	b.n	8001952 <HAL_DMA_IRQHandler+0xc6>
 8001968:	f44f 7300 	mov.w	r3, #512	; 0x200
 800196c:	e7f1      	b.n	8001952 <HAL_DMA_IRQHandler+0xc6>
 800196e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001972:	e7ee      	b.n	8001952 <HAL_DMA_IRQHandler+0xc6>
 8001974:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001978:	e7eb      	b.n	8001952 <HAL_DMA_IRQHandler+0xc6>
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 800197a:	2508      	movs	r5, #8
 800197c:	4095      	lsls	r5, r2
 800197e:	4225      	tst	r5, r4
 8001980:	d011      	beq.n	80019a6 <HAL_DMA_IRQHandler+0x11a>
 8001982:	0709      	lsls	r1, r1, #28
 8001984:	d50f      	bpl.n	80019a6 <HAL_DMA_IRQHandler+0x11a>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001986:	6819      	ldr	r1, [r3, #0]
 8001988:	f021 010e 	bic.w	r1, r1, #14
 800198c:	6019      	str	r1, [r3, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800198e:	2301      	movs	r3, #1
 8001990:	fa03 f202 	lsl.w	r2, r3, r2
 8001994:	6072      	str	r2, [r6, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001996:	6383      	str	r3, [r0, #56]	; 0x38
    hdma->State = HAL_DMA_STATE_READY;
 8001998:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
    __HAL_UNLOCK(hdma);
 800199c:	2300      	movs	r3, #0
 800199e:	f880 3020 	strb.w	r3, [r0, #32]
    if (hdma->XferErrorCallback != NULL)
 80019a2:	6b03      	ldr	r3, [r0, #48]	; 0x30
 80019a4:	e79e      	b.n	80018e4 <HAL_DMA_IRQHandler+0x58>
}
 80019a6:	bc70      	pop	{r4, r5, r6}
 80019a8:	4770      	bx	lr
 80019aa:	bf00      	nop
 80019ac:	40020008 	.word	0x40020008
 80019b0:	40020000 	.word	0x40020000

080019b4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80019b4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position = 0x00u;
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80019b8:	2200      	movs	r2, #0
  uint32_t position = 0x00u;
 80019ba:	4616      	mov	r6, r2
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80019bc:	4f64      	ldr	r7, [pc, #400]	; (8001b50 <HAL_GPIO_Init+0x19c>)
 80019be:	4b65      	ldr	r3, [pc, #404]	; (8001b54 <HAL_GPIO_Init+0x1a0>)
      switch (GPIO_Init->Mode)
 80019c0:	f8df c194 	ldr.w	ip, [pc, #404]	; 8001b58 <HAL_GPIO_Init+0x1a4>
 80019c4:	f8df e194 	ldr.w	lr, [pc, #404]	; 8001b5c <HAL_GPIO_Init+0x1a8>
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80019c8:	680d      	ldr	r5, [r1, #0]
 80019ca:	fa35 f406 	lsrs.w	r4, r5, r6
 80019ce:	d102      	bne.n	80019d6 <HAL_GPIO_Init+0x22>
      }
    }

	position++;
  }
}
 80019d0:	b003      	add	sp, #12
 80019d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ioposition = (0x01uL << position);
 80019d6:	f04f 0801 	mov.w	r8, #1
 80019da:	fa08 f806 	lsl.w	r8, r8, r6
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80019de:	ea05 0408 	and.w	r4, r5, r8
    if (iocurrent == ioposition)
 80019e2:	ea38 0505 	bics.w	r5, r8, r5
 80019e6:	d17a      	bne.n	8001ade <HAL_GPIO_Init+0x12a>
      switch (GPIO_Init->Mode)
 80019e8:	684d      	ldr	r5, [r1, #4]
 80019ea:	2d03      	cmp	r5, #3
 80019ec:	d807      	bhi.n	80019fe <HAL_GPIO_Init+0x4a>
 80019ee:	3d01      	subs	r5, #1
 80019f0:	2d02      	cmp	r5, #2
 80019f2:	f200 8087 	bhi.w	8001b04 <HAL_GPIO_Init+0x150>
 80019f6:	e8df f005 	tbb	[pc, r5]
 80019fa:	9a95      	.short	0x9a95
 80019fc:	a0          	.byte	0xa0
 80019fd:	00          	.byte	0x00
 80019fe:	2d12      	cmp	r5, #18
 8001a00:	f000 8098 	beq.w	8001b34 <HAL_GPIO_Init+0x180>
 8001a04:	d86d      	bhi.n	8001ae2 <HAL_GPIO_Init+0x12e>
 8001a06:	2d11      	cmp	r5, #17
 8001a08:	f000 808e 	beq.w	8001b28 <HAL_GPIO_Init+0x174>
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001a0c:	2cff      	cmp	r4, #255	; 0xff
 8001a0e:	bf98      	it	ls
 8001a10:	4682      	movls	sl, r0
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001a12:	f04f 090f 	mov.w	r9, #15
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001a16:	bf88      	it	hi
 8001a18:	f100 0a04 	addhi.w	sl, r0, #4
 8001a1c:	ea4f 0586 	mov.w	r5, r6, lsl #2
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001a20:	f8da 8000 	ldr.w	r8, [sl]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001a24:	bf88      	it	hi
 8001a26:	3d20      	subhi	r5, #32
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001a28:	fa09 fb05 	lsl.w	fp, r9, r5
 8001a2c:	ea28 080b 	bic.w	r8, r8, fp
 8001a30:	fa02 f505 	lsl.w	r5, r2, r5
 8001a34:	ea48 0505 	orr.w	r5, r8, r5
 8001a38:	f8ca 5000 	str.w	r5, [sl]
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001a3c:	f8d1 a004 	ldr.w	sl, [r1, #4]
 8001a40:	f01a 5f80 	tst.w	sl, #268435456	; 0x10000000
 8001a44:	d04b      	beq.n	8001ade <HAL_GPIO_Init+0x12a>
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001a46:	69bd      	ldr	r5, [r7, #24]
 8001a48:	f026 0803 	bic.w	r8, r6, #3
 8001a4c:	f045 0501 	orr.w	r5, r5, #1
 8001a50:	61bd      	str	r5, [r7, #24]
 8001a52:	69bd      	ldr	r5, [r7, #24]
 8001a54:	f108 4880 	add.w	r8, r8, #1073741824	; 0x40000000
 8001a58:	f005 0501 	and.w	r5, r5, #1
 8001a5c:	9501      	str	r5, [sp, #4]
 8001a5e:	f508 3880 	add.w	r8, r8, #65536	; 0x10000
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001a62:	f006 0b03 	and.w	fp, r6, #3
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001a66:	9d01      	ldr	r5, [sp, #4]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001a68:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
        temp = AFIO->EXTICR[position >> 2u];
 8001a6c:	f8d8 5008 	ldr.w	r5, [r8, #8]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001a70:	fa09 f90b 	lsl.w	r9, r9, fp
 8001a74:	ea25 0909 	bic.w	r9, r5, r9
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001a78:	4d39      	ldr	r5, [pc, #228]	; (8001b60 <HAL_GPIO_Init+0x1ac>)
 8001a7a:	42a8      	cmp	r0, r5
 8001a7c:	d061      	beq.n	8001b42 <HAL_GPIO_Init+0x18e>
 8001a7e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001a82:	42a8      	cmp	r0, r5
 8001a84:	d05f      	beq.n	8001b46 <HAL_GPIO_Init+0x192>
 8001a86:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001a8a:	42a8      	cmp	r0, r5
 8001a8c:	d05d      	beq.n	8001b4a <HAL_GPIO_Init+0x196>
 8001a8e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001a92:	42a8      	cmp	r0, r5
 8001a94:	bf0c      	ite	eq
 8001a96:	2503      	moveq	r5, #3
 8001a98:	2504      	movne	r5, #4
 8001a9a:	fa05 f50b 	lsl.w	r5, r5, fp
 8001a9e:	ea45 0509 	orr.w	r5, r5, r9
        AFIO->EXTICR[position >> 2u] = temp;
 8001aa2:	f8c8 5008 	str.w	r5, [r8, #8]
          SET_BIT(EXTI->RTSR, iocurrent);
 8001aa6:	689d      	ldr	r5, [r3, #8]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001aa8:	f41a 1f80 	tst.w	sl, #1048576	; 0x100000
          SET_BIT(EXTI->RTSR, iocurrent);
 8001aac:	bf14      	ite	ne
 8001aae:	4325      	orrne	r5, r4
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001ab0:	43a5      	biceq	r5, r4
 8001ab2:	609d      	str	r5, [r3, #8]
          SET_BIT(EXTI->FTSR, iocurrent);
 8001ab4:	68dd      	ldr	r5, [r3, #12]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001ab6:	f41a 1f00 	tst.w	sl, #2097152	; 0x200000
          SET_BIT(EXTI->FTSR, iocurrent);
 8001aba:	bf14      	ite	ne
 8001abc:	4325      	orrne	r5, r4
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001abe:	43a5      	biceq	r5, r4
 8001ac0:	60dd      	str	r5, [r3, #12]
          SET_BIT(EXTI->EMR, iocurrent);
 8001ac2:	685d      	ldr	r5, [r3, #4]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001ac4:	f41a 3f00 	tst.w	sl, #131072	; 0x20000
          SET_BIT(EXTI->EMR, iocurrent);
 8001ac8:	bf14      	ite	ne
 8001aca:	4325      	orrne	r5, r4
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001acc:	43a5      	biceq	r5, r4
 8001ace:	605d      	str	r5, [r3, #4]
          SET_BIT(EXTI->IMR, iocurrent);
 8001ad0:	681d      	ldr	r5, [r3, #0]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001ad2:	f41a 3f80 	tst.w	sl, #65536	; 0x10000
          SET_BIT(EXTI->IMR, iocurrent);
 8001ad6:	bf14      	ite	ne
 8001ad8:	4325      	orrne	r5, r4
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001ada:	43a5      	biceq	r5, r4
 8001adc:	601d      	str	r5, [r3, #0]
	position++;
 8001ade:	3601      	adds	r6, #1
 8001ae0:	e772      	b.n	80019c8 <HAL_GPIO_Init+0x14>
      switch (GPIO_Init->Mode)
 8001ae2:	f8df 9080 	ldr.w	r9, [pc, #128]	; 8001b64 <HAL_GPIO_Init+0x1b0>
 8001ae6:	454d      	cmp	r5, r9
 8001ae8:	d00c      	beq.n	8001b04 <HAL_GPIO_Init+0x150>
 8001aea:	d817      	bhi.n	8001b1c <HAL_GPIO_Init+0x168>
 8001aec:	f5a9 1980 	sub.w	r9, r9, #1048576	; 0x100000
 8001af0:	454d      	cmp	r5, r9
 8001af2:	d007      	beq.n	8001b04 <HAL_GPIO_Init+0x150>
 8001af4:	f509 2970 	add.w	r9, r9, #983040	; 0xf0000
 8001af8:	454d      	cmp	r5, r9
 8001afa:	d003      	beq.n	8001b04 <HAL_GPIO_Init+0x150>
 8001afc:	f5a9 1980 	sub.w	r9, r9, #1048576	; 0x100000
 8001b00:	454d      	cmp	r5, r9
 8001b02:	d183      	bne.n	8001a0c <HAL_GPIO_Init+0x58>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001b04:	688a      	ldr	r2, [r1, #8]
 8001b06:	b1d2      	cbz	r2, 8001b3e <HAL_GPIO_Init+0x18a>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001b08:	2a01      	cmp	r2, #1
            GPIOx->BSRR = ioposition;
 8001b0a:	bf08      	it	eq
 8001b0c:	f8c0 8010 	streq.w	r8, [r0, #16]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001b10:	f04f 0208 	mov.w	r2, #8
            GPIOx->BRR = ioposition;
 8001b14:	bf18      	it	ne
 8001b16:	f8c0 8014 	strne.w	r8, [r0, #20]
 8001b1a:	e777      	b.n	8001a0c <HAL_GPIO_Init+0x58>
      switch (GPIO_Init->Mode)
 8001b1c:	4565      	cmp	r5, ip
 8001b1e:	d0f1      	beq.n	8001b04 <HAL_GPIO_Init+0x150>
 8001b20:	4575      	cmp	r5, lr
 8001b22:	e7ee      	b.n	8001b02 <HAL_GPIO_Init+0x14e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001b24:	68ca      	ldr	r2, [r1, #12]
          break;
 8001b26:	e771      	b.n	8001a0c <HAL_GPIO_Init+0x58>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001b28:	68ca      	ldr	r2, [r1, #12]
 8001b2a:	3204      	adds	r2, #4
          break;
 8001b2c:	e76e      	b.n	8001a0c <HAL_GPIO_Init+0x58>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001b2e:	68ca      	ldr	r2, [r1, #12]
 8001b30:	3208      	adds	r2, #8
          break;
 8001b32:	e76b      	b.n	8001a0c <HAL_GPIO_Init+0x58>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001b34:	68ca      	ldr	r2, [r1, #12]
 8001b36:	320c      	adds	r2, #12
          break;
 8001b38:	e768      	b.n	8001a0c <HAL_GPIO_Init+0x58>
      switch (GPIO_Init->Mode)
 8001b3a:	2200      	movs	r2, #0
 8001b3c:	e766      	b.n	8001a0c <HAL_GPIO_Init+0x58>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001b3e:	2204      	movs	r2, #4
 8001b40:	e764      	b.n	8001a0c <HAL_GPIO_Init+0x58>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001b42:	2500      	movs	r5, #0
 8001b44:	e7a9      	b.n	8001a9a <HAL_GPIO_Init+0xe6>
 8001b46:	2501      	movs	r5, #1
 8001b48:	e7a7      	b.n	8001a9a <HAL_GPIO_Init+0xe6>
 8001b4a:	2502      	movs	r5, #2
 8001b4c:	e7a5      	b.n	8001a9a <HAL_GPIO_Init+0xe6>
 8001b4e:	bf00      	nop
 8001b50:	40021000 	.word	0x40021000
 8001b54:	40010400 	.word	0x40010400
 8001b58:	10310000 	.word	0x10310000
 8001b5c:	10320000 	.word	0x10320000
 8001b60:	40010800 	.word	0x40010800
 8001b64:	10220000 	.word	0x10220000

08001b68 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001b68:	6883      	ldr	r3, [r0, #8]
 8001b6a:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 8001b6c:	bf14      	ite	ne
 8001b6e:	2001      	movne	r0, #1
 8001b70:	2000      	moveq	r0, #0
 8001b72:	4770      	bx	lr

08001b74 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001b74:	b10a      	cbz	r2, 8001b7a <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001b76:	6101      	str	r1, [r0, #16]
  }
}
 8001b78:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001b7a:	0409      	lsls	r1, r1, #16
 8001b7c:	e7fb      	b.n	8001b76 <HAL_GPIO_WritePin+0x2>
	...

08001b80 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001b80:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001b84:	4605      	mov	r5, r0
 8001b86:	b338      	cbz	r0, 8001bd8 <HAL_RCC_OscConfig+0x58>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001b88:	6803      	ldr	r3, [r0, #0]
 8001b8a:	07db      	lsls	r3, r3, #31
 8001b8c:	d410      	bmi.n	8001bb0 <HAL_RCC_OscConfig+0x30>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001b8e:	682b      	ldr	r3, [r5, #0]
 8001b90:	079f      	lsls	r7, r3, #30
 8001b92:	d45e      	bmi.n	8001c52 <HAL_RCC_OscConfig+0xd2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001b94:	682b      	ldr	r3, [r5, #0]
 8001b96:	0719      	lsls	r1, r3, #28
 8001b98:	f100 8095 	bmi.w	8001cc6 <HAL_RCC_OscConfig+0x146>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001b9c:	682b      	ldr	r3, [r5, #0]
 8001b9e:	075a      	lsls	r2, r3, #29
 8001ba0:	f100 80c1 	bmi.w	8001d26 <HAL_RCC_OscConfig+0x1a6>

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001ba4:	69e8      	ldr	r0, [r5, #28]
 8001ba6:	2800      	cmp	r0, #0
 8001ba8:	f040 812c 	bne.w	8001e04 <HAL_RCC_OscConfig+0x284>
        }
      }
    }
  }

  return HAL_OK;
 8001bac:	2000      	movs	r0, #0
 8001bae:	e029      	b.n	8001c04 <HAL_RCC_OscConfig+0x84>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001bb0:	4c90      	ldr	r4, [pc, #576]	; (8001df4 <HAL_RCC_OscConfig+0x274>)
 8001bb2:	6863      	ldr	r3, [r4, #4]
 8001bb4:	f003 030c 	and.w	r3, r3, #12
 8001bb8:	2b04      	cmp	r3, #4
 8001bba:	d007      	beq.n	8001bcc <HAL_RCC_OscConfig+0x4c>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001bbc:	6863      	ldr	r3, [r4, #4]
 8001bbe:	f003 030c 	and.w	r3, r3, #12
 8001bc2:	2b08      	cmp	r3, #8
 8001bc4:	d10a      	bne.n	8001bdc <HAL_RCC_OscConfig+0x5c>
 8001bc6:	6863      	ldr	r3, [r4, #4]
 8001bc8:	03de      	lsls	r6, r3, #15
 8001bca:	d507      	bpl.n	8001bdc <HAL_RCC_OscConfig+0x5c>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001bcc:	6823      	ldr	r3, [r4, #0]
 8001bce:	039c      	lsls	r4, r3, #14
 8001bd0:	d5dd      	bpl.n	8001b8e <HAL_RCC_OscConfig+0xe>
 8001bd2:	686b      	ldr	r3, [r5, #4]
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d1da      	bne.n	8001b8e <HAL_RCC_OscConfig+0xe>
          return HAL_ERROR;
 8001bd8:	2001      	movs	r0, #1
 8001bda:	e013      	b.n	8001c04 <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001bdc:	686b      	ldr	r3, [r5, #4]
 8001bde:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001be2:	d112      	bne.n	8001c0a <HAL_RCC_OscConfig+0x8a>
 8001be4:	6823      	ldr	r3, [r4, #0]
 8001be6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001bea:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8001bec:	f7ff fb4c 	bl	8001288 <HAL_GetTick>
 8001bf0:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001bf2:	6823      	ldr	r3, [r4, #0]
 8001bf4:	0398      	lsls	r0, r3, #14
 8001bf6:	d4ca      	bmi.n	8001b8e <HAL_RCC_OscConfig+0xe>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001bf8:	f7ff fb46 	bl	8001288 <HAL_GetTick>
 8001bfc:	1b80      	subs	r0, r0, r6
 8001bfe:	2864      	cmp	r0, #100	; 0x64
 8001c00:	d9f7      	bls.n	8001bf2 <HAL_RCC_OscConfig+0x72>
            return HAL_TIMEOUT;
 8001c02:	2003      	movs	r0, #3
}
 8001c04:	b002      	add	sp, #8
 8001c06:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001c0a:	b99b      	cbnz	r3, 8001c34 <HAL_RCC_OscConfig+0xb4>
 8001c0c:	6823      	ldr	r3, [r4, #0]
 8001c0e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001c12:	6023      	str	r3, [r4, #0]
 8001c14:	6823      	ldr	r3, [r4, #0]
 8001c16:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001c1a:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8001c1c:	f7ff fb34 	bl	8001288 <HAL_GetTick>
 8001c20:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c22:	6823      	ldr	r3, [r4, #0]
 8001c24:	0399      	lsls	r1, r3, #14
 8001c26:	d5b2      	bpl.n	8001b8e <HAL_RCC_OscConfig+0xe>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001c28:	f7ff fb2e 	bl	8001288 <HAL_GetTick>
 8001c2c:	1b80      	subs	r0, r0, r6
 8001c2e:	2864      	cmp	r0, #100	; 0x64
 8001c30:	d9f7      	bls.n	8001c22 <HAL_RCC_OscConfig+0xa2>
 8001c32:	e7e6      	b.n	8001c02 <HAL_RCC_OscConfig+0x82>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001c34:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001c38:	6823      	ldr	r3, [r4, #0]
 8001c3a:	d103      	bne.n	8001c44 <HAL_RCC_OscConfig+0xc4>
 8001c3c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001c40:	6023      	str	r3, [r4, #0]
 8001c42:	e7cf      	b.n	8001be4 <HAL_RCC_OscConfig+0x64>
 8001c44:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001c48:	6023      	str	r3, [r4, #0]
 8001c4a:	6823      	ldr	r3, [r4, #0]
 8001c4c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001c50:	e7cb      	b.n	8001bea <HAL_RCC_OscConfig+0x6a>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001c52:	4c68      	ldr	r4, [pc, #416]	; (8001df4 <HAL_RCC_OscConfig+0x274>)
 8001c54:	6863      	ldr	r3, [r4, #4]
 8001c56:	f013 0f0c 	tst.w	r3, #12
 8001c5a:	d007      	beq.n	8001c6c <HAL_RCC_OscConfig+0xec>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001c5c:	6863      	ldr	r3, [r4, #4]
 8001c5e:	f003 030c 	and.w	r3, r3, #12
 8001c62:	2b08      	cmp	r3, #8
 8001c64:	d110      	bne.n	8001c88 <HAL_RCC_OscConfig+0x108>
 8001c66:	6863      	ldr	r3, [r4, #4]
 8001c68:	03da      	lsls	r2, r3, #15
 8001c6a:	d40d      	bmi.n	8001c88 <HAL_RCC_OscConfig+0x108>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c6c:	6823      	ldr	r3, [r4, #0]
 8001c6e:	079b      	lsls	r3, r3, #30
 8001c70:	d502      	bpl.n	8001c78 <HAL_RCC_OscConfig+0xf8>
 8001c72:	692b      	ldr	r3, [r5, #16]
 8001c74:	2b01      	cmp	r3, #1
 8001c76:	d1af      	bne.n	8001bd8 <HAL_RCC_OscConfig+0x58>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c78:	6823      	ldr	r3, [r4, #0]
 8001c7a:	696a      	ldr	r2, [r5, #20]
 8001c7c:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8001c80:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8001c84:	6023      	str	r3, [r4, #0]
 8001c86:	e785      	b.n	8001b94 <HAL_RCC_OscConfig+0x14>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001c88:	692a      	ldr	r2, [r5, #16]
 8001c8a:	4b5b      	ldr	r3, [pc, #364]	; (8001df8 <HAL_RCC_OscConfig+0x278>)
 8001c8c:	b16a      	cbz	r2, 8001caa <HAL_RCC_OscConfig+0x12a>
        __HAL_RCC_HSI_ENABLE();
 8001c8e:	2201      	movs	r2, #1
 8001c90:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001c92:	f7ff faf9 	bl	8001288 <HAL_GetTick>
 8001c96:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c98:	6823      	ldr	r3, [r4, #0]
 8001c9a:	079f      	lsls	r7, r3, #30
 8001c9c:	d4ec      	bmi.n	8001c78 <HAL_RCC_OscConfig+0xf8>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001c9e:	f7ff faf3 	bl	8001288 <HAL_GetTick>
 8001ca2:	1b80      	subs	r0, r0, r6
 8001ca4:	2802      	cmp	r0, #2
 8001ca6:	d9f7      	bls.n	8001c98 <HAL_RCC_OscConfig+0x118>
 8001ca8:	e7ab      	b.n	8001c02 <HAL_RCC_OscConfig+0x82>
        __HAL_RCC_HSI_DISABLE();
 8001caa:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001cac:	f7ff faec 	bl	8001288 <HAL_GetTick>
 8001cb0:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001cb2:	6823      	ldr	r3, [r4, #0]
 8001cb4:	0798      	lsls	r0, r3, #30
 8001cb6:	f57f af6d 	bpl.w	8001b94 <HAL_RCC_OscConfig+0x14>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001cba:	f7ff fae5 	bl	8001288 <HAL_GetTick>
 8001cbe:	1b80      	subs	r0, r0, r6
 8001cc0:	2802      	cmp	r0, #2
 8001cc2:	d9f6      	bls.n	8001cb2 <HAL_RCC_OscConfig+0x132>
 8001cc4:	e79d      	b.n	8001c02 <HAL_RCC_OscConfig+0x82>
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001cc6:	69aa      	ldr	r2, [r5, #24]
 8001cc8:	4e4a      	ldr	r6, [pc, #296]	; (8001df4 <HAL_RCC_OscConfig+0x274>)
 8001cca:	4b4b      	ldr	r3, [pc, #300]	; (8001df8 <HAL_RCC_OscConfig+0x278>)
 8001ccc:	b1e2      	cbz	r2, 8001d08 <HAL_RCC_OscConfig+0x188>
      __HAL_RCC_LSI_ENABLE();
 8001cce:	2201      	movs	r2, #1
 8001cd0:	f8c3 2480 	str.w	r2, [r3, #1152]	; 0x480
      tickstart = HAL_GetTick();
 8001cd4:	f7ff fad8 	bl	8001288 <HAL_GetTick>
 8001cd8:	4604      	mov	r4, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001cda:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8001cdc:	079b      	lsls	r3, r3, #30
 8001cde:	d50d      	bpl.n	8001cfc <HAL_RCC_OscConfig+0x17c>
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001ce0:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8001ce4:	4b45      	ldr	r3, [pc, #276]	; (8001dfc <HAL_RCC_OscConfig+0x27c>)
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	fbb3 f3f2 	udiv	r3, r3, r2
 8001cec:	9301      	str	r3, [sp, #4]
  do
  {
    __NOP();
 8001cee:	bf00      	nop
  }
  while (Delay --);
 8001cf0:	9b01      	ldr	r3, [sp, #4]
 8001cf2:	1e5a      	subs	r2, r3, #1
 8001cf4:	9201      	str	r2, [sp, #4]
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d1f9      	bne.n	8001cee <HAL_RCC_OscConfig+0x16e>
 8001cfa:	e74f      	b.n	8001b9c <HAL_RCC_OscConfig+0x1c>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001cfc:	f7ff fac4 	bl	8001288 <HAL_GetTick>
 8001d00:	1b00      	subs	r0, r0, r4
 8001d02:	2802      	cmp	r0, #2
 8001d04:	d9e9      	bls.n	8001cda <HAL_RCC_OscConfig+0x15a>
 8001d06:	e77c      	b.n	8001c02 <HAL_RCC_OscConfig+0x82>
      __HAL_RCC_LSI_DISABLE();
 8001d08:	f8c3 2480 	str.w	r2, [r3, #1152]	; 0x480
      tickstart = HAL_GetTick();
 8001d0c:	f7ff fabc 	bl	8001288 <HAL_GetTick>
 8001d10:	4604      	mov	r4, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d12:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8001d14:	079f      	lsls	r7, r3, #30
 8001d16:	f57f af41 	bpl.w	8001b9c <HAL_RCC_OscConfig+0x1c>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001d1a:	f7ff fab5 	bl	8001288 <HAL_GetTick>
 8001d1e:	1b00      	subs	r0, r0, r4
 8001d20:	2802      	cmp	r0, #2
 8001d22:	d9f6      	bls.n	8001d12 <HAL_RCC_OscConfig+0x192>
 8001d24:	e76d      	b.n	8001c02 <HAL_RCC_OscConfig+0x82>
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001d26:	4c33      	ldr	r4, [pc, #204]	; (8001df4 <HAL_RCC_OscConfig+0x274>)
 8001d28:	69e3      	ldr	r3, [r4, #28]
 8001d2a:	00d8      	lsls	r0, r3, #3
 8001d2c:	d424      	bmi.n	8001d78 <HAL_RCC_OscConfig+0x1f8>
      pwrclkchanged = SET;
 8001d2e:	2701      	movs	r7, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 8001d30:	69e3      	ldr	r3, [r4, #28]
 8001d32:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d36:	61e3      	str	r3, [r4, #28]
 8001d38:	69e3      	ldr	r3, [r4, #28]
 8001d3a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d3e:	9300      	str	r3, [sp, #0]
 8001d40:	9b00      	ldr	r3, [sp, #0]
    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d42:	4e2f      	ldr	r6, [pc, #188]	; (8001e00 <HAL_RCC_OscConfig+0x280>)
 8001d44:	6833      	ldr	r3, [r6, #0]
 8001d46:	05d9      	lsls	r1, r3, #23
 8001d48:	d518      	bpl.n	8001d7c <HAL_RCC_OscConfig+0x1fc>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001d4a:	68eb      	ldr	r3, [r5, #12]
 8001d4c:	2b01      	cmp	r3, #1
 8001d4e:	d126      	bne.n	8001d9e <HAL_RCC_OscConfig+0x21e>
 8001d50:	6a23      	ldr	r3, [r4, #32]
 8001d52:	f043 0301 	orr.w	r3, r3, #1
 8001d56:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8001d58:	f7ff fa96 	bl	8001288 <HAL_GetTick>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d5c:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8001d60:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d62:	6a23      	ldr	r3, [r4, #32]
 8001d64:	079b      	lsls	r3, r3, #30
 8001d66:	d53f      	bpl.n	8001de8 <HAL_RCC_OscConfig+0x268>
    if (pwrclkchanged == SET)
 8001d68:	2f00      	cmp	r7, #0
 8001d6a:	f43f af1b 	beq.w	8001ba4 <HAL_RCC_OscConfig+0x24>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001d6e:	69e3      	ldr	r3, [r4, #28]
 8001d70:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001d74:	61e3      	str	r3, [r4, #28]
 8001d76:	e715      	b.n	8001ba4 <HAL_RCC_OscConfig+0x24>
    FlagStatus       pwrclkchanged = RESET;
 8001d78:	2700      	movs	r7, #0
 8001d7a:	e7e2      	b.n	8001d42 <HAL_RCC_OscConfig+0x1c2>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001d7c:	6833      	ldr	r3, [r6, #0]
 8001d7e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d82:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8001d84:	f7ff fa80 	bl	8001288 <HAL_GetTick>
 8001d88:	4680      	mov	r8, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d8a:	6833      	ldr	r3, [r6, #0]
 8001d8c:	05da      	lsls	r2, r3, #23
 8001d8e:	d4dc      	bmi.n	8001d4a <HAL_RCC_OscConfig+0x1ca>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001d90:	f7ff fa7a 	bl	8001288 <HAL_GetTick>
 8001d94:	eba0 0008 	sub.w	r0, r0, r8
 8001d98:	2864      	cmp	r0, #100	; 0x64
 8001d9a:	d9f6      	bls.n	8001d8a <HAL_RCC_OscConfig+0x20a>
 8001d9c:	e731      	b.n	8001c02 <HAL_RCC_OscConfig+0x82>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001d9e:	b9ab      	cbnz	r3, 8001dcc <HAL_RCC_OscConfig+0x24c>
 8001da0:	6a23      	ldr	r3, [r4, #32]
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001da2:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001da6:	f023 0301 	bic.w	r3, r3, #1
 8001daa:	6223      	str	r3, [r4, #32]
 8001dac:	6a23      	ldr	r3, [r4, #32]
 8001dae:	f023 0304 	bic.w	r3, r3, #4
 8001db2:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8001db4:	f7ff fa68 	bl	8001288 <HAL_GetTick>
 8001db8:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001dba:	6a23      	ldr	r3, [r4, #32]
 8001dbc:	0798      	lsls	r0, r3, #30
 8001dbe:	d5d3      	bpl.n	8001d68 <HAL_RCC_OscConfig+0x1e8>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001dc0:	f7ff fa62 	bl	8001288 <HAL_GetTick>
 8001dc4:	1b80      	subs	r0, r0, r6
 8001dc6:	4540      	cmp	r0, r8
 8001dc8:	d9f7      	bls.n	8001dba <HAL_RCC_OscConfig+0x23a>
 8001dca:	e71a      	b.n	8001c02 <HAL_RCC_OscConfig+0x82>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001dcc:	2b05      	cmp	r3, #5
 8001dce:	6a23      	ldr	r3, [r4, #32]
 8001dd0:	d103      	bne.n	8001dda <HAL_RCC_OscConfig+0x25a>
 8001dd2:	f043 0304 	orr.w	r3, r3, #4
 8001dd6:	6223      	str	r3, [r4, #32]
 8001dd8:	e7ba      	b.n	8001d50 <HAL_RCC_OscConfig+0x1d0>
 8001dda:	f023 0301 	bic.w	r3, r3, #1
 8001dde:	6223      	str	r3, [r4, #32]
 8001de0:	6a23      	ldr	r3, [r4, #32]
 8001de2:	f023 0304 	bic.w	r3, r3, #4
 8001de6:	e7b6      	b.n	8001d56 <HAL_RCC_OscConfig+0x1d6>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001de8:	f7ff fa4e 	bl	8001288 <HAL_GetTick>
 8001dec:	1b80      	subs	r0, r0, r6
 8001dee:	4540      	cmp	r0, r8
 8001df0:	d9b7      	bls.n	8001d62 <HAL_RCC_OscConfig+0x1e2>
 8001df2:	e706      	b.n	8001c02 <HAL_RCC_OscConfig+0x82>
 8001df4:	40021000 	.word	0x40021000
 8001df8:	42420000 	.word	0x42420000
 8001dfc:	20000004 	.word	0x20000004
 8001e00:	40007000 	.word	0x40007000
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001e04:	4c2a      	ldr	r4, [pc, #168]	; (8001eb0 <HAL_RCC_OscConfig+0x330>)
 8001e06:	6863      	ldr	r3, [r4, #4]
 8001e08:	f003 030c 	and.w	r3, r3, #12
 8001e0c:	2b08      	cmp	r3, #8
 8001e0e:	d03e      	beq.n	8001e8e <HAL_RCC_OscConfig+0x30e>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001e10:	2200      	movs	r2, #0
 8001e12:	4b28      	ldr	r3, [pc, #160]	; (8001eb4 <HAL_RCC_OscConfig+0x334>)
 8001e14:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 8001e16:	661a      	str	r2, [r3, #96]	; 0x60
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001e18:	d12c      	bne.n	8001e74 <HAL_RCC_OscConfig+0x2f4>
        tickstart = HAL_GetTick();
 8001e1a:	f7ff fa35 	bl	8001288 <HAL_GetTick>
 8001e1e:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e20:	6823      	ldr	r3, [r4, #0]
 8001e22:	0199      	lsls	r1, r3, #6
 8001e24:	d420      	bmi.n	8001e68 <HAL_RCC_OscConfig+0x2e8>
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001e26:	6a2b      	ldr	r3, [r5, #32]
 8001e28:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e2c:	d105      	bne.n	8001e3a <HAL_RCC_OscConfig+0x2ba>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001e2e:	6862      	ldr	r2, [r4, #4]
 8001e30:	68a9      	ldr	r1, [r5, #8]
 8001e32:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8001e36:	430a      	orrs	r2, r1
 8001e38:	6062      	str	r2, [r4, #4]
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001e3a:	6a69      	ldr	r1, [r5, #36]	; 0x24
 8001e3c:	6862      	ldr	r2, [r4, #4]
 8001e3e:	430b      	orrs	r3, r1
 8001e40:	f422 1274 	bic.w	r2, r2, #3997696	; 0x3d0000
 8001e44:	4313      	orrs	r3, r2
        __HAL_RCC_PLL_ENABLE();
 8001e46:	2201      	movs	r2, #1
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001e48:	6063      	str	r3, [r4, #4]
        __HAL_RCC_PLL_ENABLE();
 8001e4a:	4b1a      	ldr	r3, [pc, #104]	; (8001eb4 <HAL_RCC_OscConfig+0x334>)
 8001e4c:	661a      	str	r2, [r3, #96]	; 0x60
        tickstart = HAL_GetTick();
 8001e4e:	f7ff fa1b 	bl	8001288 <HAL_GetTick>
 8001e52:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001e54:	6823      	ldr	r3, [r4, #0]
 8001e56:	019a      	lsls	r2, r3, #6
 8001e58:	f53f aea8 	bmi.w	8001bac <HAL_RCC_OscConfig+0x2c>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e5c:	f7ff fa14 	bl	8001288 <HAL_GetTick>
 8001e60:	1b40      	subs	r0, r0, r5
 8001e62:	2802      	cmp	r0, #2
 8001e64:	d9f6      	bls.n	8001e54 <HAL_RCC_OscConfig+0x2d4>
 8001e66:	e6cc      	b.n	8001c02 <HAL_RCC_OscConfig+0x82>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e68:	f7ff fa0e 	bl	8001288 <HAL_GetTick>
 8001e6c:	1b80      	subs	r0, r0, r6
 8001e6e:	2802      	cmp	r0, #2
 8001e70:	d9d6      	bls.n	8001e20 <HAL_RCC_OscConfig+0x2a0>
 8001e72:	e6c6      	b.n	8001c02 <HAL_RCC_OscConfig+0x82>
        tickstart = HAL_GetTick();
 8001e74:	f7ff fa08 	bl	8001288 <HAL_GetTick>
 8001e78:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e7a:	6823      	ldr	r3, [r4, #0]
 8001e7c:	019b      	lsls	r3, r3, #6
 8001e7e:	f57f ae95 	bpl.w	8001bac <HAL_RCC_OscConfig+0x2c>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e82:	f7ff fa01 	bl	8001288 <HAL_GetTick>
 8001e86:	1b40      	subs	r0, r0, r5
 8001e88:	2802      	cmp	r0, #2
 8001e8a:	d9f6      	bls.n	8001e7a <HAL_RCC_OscConfig+0x2fa>
 8001e8c:	e6b9      	b.n	8001c02 <HAL_RCC_OscConfig+0x82>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001e8e:	2801      	cmp	r0, #1
 8001e90:	f43f aeb8 	beq.w	8001c04 <HAL_RCC_OscConfig+0x84>
        pll_config = RCC->CFGR;
 8001e94:	6863      	ldr	r3, [r4, #4]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e96:	6a2a      	ldr	r2, [r5, #32]
 8001e98:	f403 3180 	and.w	r1, r3, #65536	; 0x10000
 8001e9c:	4291      	cmp	r1, r2
 8001e9e:	f47f ae9b 	bne.w	8001bd8 <HAL_RCC_OscConfig+0x58>
 8001ea2:	6a6a      	ldr	r2, [r5, #36]	; 0x24
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001ea4:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ea8:	4293      	cmp	r3, r2
 8001eaa:	f43f ae7f 	beq.w	8001bac <HAL_RCC_OscConfig+0x2c>
 8001eae:	e693      	b.n	8001bd8 <HAL_RCC_OscConfig+0x58>
 8001eb0:	40021000 	.word	0x40021000
 8001eb4:	42420000 	.word	0x42420000

08001eb8 <HAL_RCC_GetSysClockFreq>:
  tmpreg = RCC->CFGR;
 8001eb8:	4a0d      	ldr	r2, [pc, #52]	; (8001ef0 <HAL_RCC_GetSysClockFreq+0x38>)
 8001eba:	6853      	ldr	r3, [r2, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 8001ebc:	f003 010c 	and.w	r1, r3, #12
 8001ec0:	2908      	cmp	r1, #8
 8001ec2:	d112      	bne.n	8001eea <HAL_RCC_GetSysClockFreq+0x32>
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001ec4:	480b      	ldr	r0, [pc, #44]	; (8001ef4 <HAL_RCC_GetSysClockFreq+0x3c>)
 8001ec6:	f3c3 4183 	ubfx	r1, r3, #18, #4
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001eca:	03db      	lsls	r3, r3, #15
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001ecc:	5c40      	ldrb	r0, [r0, r1]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001ece:	d509      	bpl.n	8001ee4 <HAL_RCC_GetSysClockFreq+0x2c>
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001ed0:	6853      	ldr	r3, [r2, #4]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001ed2:	4a09      	ldr	r2, [pc, #36]	; (8001ef8 <HAL_RCC_GetSysClockFreq+0x40>)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001ed4:	f3c3 4340 	ubfx	r3, r3, #17, #1
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001ed8:	4350      	muls	r0, r2
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001eda:	4a08      	ldr	r2, [pc, #32]	; (8001efc <HAL_RCC_GetSysClockFreq+0x44>)
 8001edc:	5cd3      	ldrb	r3, [r2, r3]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001ede:	fbb0 f0f3 	udiv	r0, r0, r3
 8001ee2:	4770      	bx	lr
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001ee4:	4b06      	ldr	r3, [pc, #24]	; (8001f00 <HAL_RCC_GetSysClockFreq+0x48>)
 8001ee6:	4358      	muls	r0, r3
 8001ee8:	4770      	bx	lr
      sysclockfreq = HSE_VALUE;
 8001eea:	4803      	ldr	r0, [pc, #12]	; (8001ef8 <HAL_RCC_GetSysClockFreq+0x40>)
}
 8001eec:	4770      	bx	lr
 8001eee:	bf00      	nop
 8001ef0:	40021000 	.word	0x40021000
 8001ef4:	08003343 	.word	0x08003343
 8001ef8:	007a1200 	.word	0x007a1200
 8001efc:	08003353 	.word	0x08003353
 8001f00:	003d0900 	.word	0x003d0900

08001f04 <HAL_RCC_ClockConfig>:
{
 8001f04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001f08:	460d      	mov	r5, r1
  if (RCC_ClkInitStruct == NULL)
 8001f0a:	4604      	mov	r4, r0
 8001f0c:	b910      	cbnz	r0, 8001f14 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 8001f0e:	2001      	movs	r0, #1
}
 8001f10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001f14:	4a44      	ldr	r2, [pc, #272]	; (8002028 <HAL_RCC_ClockConfig+0x124>)
 8001f16:	6813      	ldr	r3, [r2, #0]
 8001f18:	f003 0307 	and.w	r3, r3, #7
 8001f1c:	428b      	cmp	r3, r1
 8001f1e:	d328      	bcc.n	8001f72 <HAL_RCC_ClockConfig+0x6e>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001f20:	6821      	ldr	r1, [r4, #0]
 8001f22:	078e      	lsls	r6, r1, #30
 8001f24:	d430      	bmi.n	8001f88 <HAL_RCC_ClockConfig+0x84>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001f26:	07ca      	lsls	r2, r1, #31
 8001f28:	d443      	bmi.n	8001fb2 <HAL_RCC_ClockConfig+0xae>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001f2a:	4a3f      	ldr	r2, [pc, #252]	; (8002028 <HAL_RCC_ClockConfig+0x124>)
 8001f2c:	6813      	ldr	r3, [r2, #0]
 8001f2e:	f003 0307 	and.w	r3, r3, #7
 8001f32:	42ab      	cmp	r3, r5
 8001f34:	d865      	bhi.n	8002002 <HAL_RCC_ClockConfig+0xfe>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f36:	6822      	ldr	r2, [r4, #0]
 8001f38:	4d3c      	ldr	r5, [pc, #240]	; (800202c <HAL_RCC_ClockConfig+0x128>)
 8001f3a:	f012 0f04 	tst.w	r2, #4
 8001f3e:	d16c      	bne.n	800201a <HAL_RCC_ClockConfig+0x116>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f40:	0713      	lsls	r3, r2, #28
 8001f42:	d506      	bpl.n	8001f52 <HAL_RCC_ClockConfig+0x4e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001f44:	686b      	ldr	r3, [r5, #4]
 8001f46:	6922      	ldr	r2, [r4, #16]
 8001f48:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8001f4c:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8001f50:	606b      	str	r3, [r5, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001f52:	f7ff ffb1 	bl	8001eb8 <HAL_RCC_GetSysClockFreq>
 8001f56:	686b      	ldr	r3, [r5, #4]
 8001f58:	4a35      	ldr	r2, [pc, #212]	; (8002030 <HAL_RCC_ClockConfig+0x12c>)
 8001f5a:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8001f5e:	5cd3      	ldrb	r3, [r2, r3]
 8001f60:	40d8      	lsrs	r0, r3
 8001f62:	4b34      	ldr	r3, [pc, #208]	; (8002034 <HAL_RCC_ClockConfig+0x130>)
 8001f64:	6018      	str	r0, [r3, #0]
  HAL_InitTick(uwTickPrio);
 8001f66:	4b34      	ldr	r3, [pc, #208]	; (8002038 <HAL_RCC_ClockConfig+0x134>)
 8001f68:	6818      	ldr	r0, [r3, #0]
 8001f6a:	f7ff f8bd 	bl	80010e8 <HAL_InitTick>
  return HAL_OK;
 8001f6e:	2000      	movs	r0, #0
 8001f70:	e7ce      	b.n	8001f10 <HAL_RCC_ClockConfig+0xc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f72:	6813      	ldr	r3, [r2, #0]
 8001f74:	f023 0307 	bic.w	r3, r3, #7
 8001f78:	430b      	orrs	r3, r1
 8001f7a:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f7c:	6813      	ldr	r3, [r2, #0]
 8001f7e:	f003 0307 	and.w	r3, r3, #7
 8001f82:	428b      	cmp	r3, r1
 8001f84:	d1c3      	bne.n	8001f0e <HAL_RCC_ClockConfig+0xa>
 8001f86:	e7cb      	b.n	8001f20 <HAL_RCC_ClockConfig+0x1c>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f88:	4b28      	ldr	r3, [pc, #160]	; (800202c <HAL_RCC_ClockConfig+0x128>)
 8001f8a:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001f8e:	bf1e      	ittt	ne
 8001f90:	685a      	ldrne	r2, [r3, #4]
 8001f92:	f442 62e0 	orrne.w	r2, r2, #1792	; 0x700
 8001f96:	605a      	strne	r2, [r3, #4]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f98:	0708      	lsls	r0, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001f9a:	bf42      	ittt	mi
 8001f9c:	685a      	ldrmi	r2, [r3, #4]
 8001f9e:	f442 5260 	orrmi.w	r2, r2, #14336	; 0x3800
 8001fa2:	605a      	strmi	r2, [r3, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001fa4:	685a      	ldr	r2, [r3, #4]
 8001fa6:	68a0      	ldr	r0, [r4, #8]
 8001fa8:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8001fac:	4302      	orrs	r2, r0
 8001fae:	605a      	str	r2, [r3, #4]
 8001fb0:	e7b9      	b.n	8001f26 <HAL_RCC_ClockConfig+0x22>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001fb2:	6862      	ldr	r2, [r4, #4]
 8001fb4:	4e1d      	ldr	r6, [pc, #116]	; (800202c <HAL_RCC_ClockConfig+0x128>)
 8001fb6:	2a01      	cmp	r2, #1
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001fb8:	6833      	ldr	r3, [r6, #0]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001fba:	d11a      	bne.n	8001ff2 <HAL_RCC_ClockConfig+0xee>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001fbc:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001fc0:	d0a5      	beq.n	8001f0e <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001fc2:	6873      	ldr	r3, [r6, #4]
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001fc4:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001fc8:	f023 0303 	bic.w	r3, r3, #3
 8001fcc:	4313      	orrs	r3, r2
 8001fce:	6073      	str	r3, [r6, #4]
    tickstart = HAL_GetTick();
 8001fd0:	f7ff f95a 	bl	8001288 <HAL_GetTick>
 8001fd4:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001fd6:	6873      	ldr	r3, [r6, #4]
 8001fd8:	6862      	ldr	r2, [r4, #4]
 8001fda:	f003 030c 	and.w	r3, r3, #12
 8001fde:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8001fe2:	d0a2      	beq.n	8001f2a <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001fe4:	f7ff f950 	bl	8001288 <HAL_GetTick>
 8001fe8:	1bc0      	subs	r0, r0, r7
 8001fea:	4540      	cmp	r0, r8
 8001fec:	d9f3      	bls.n	8001fd6 <HAL_RCC_ClockConfig+0xd2>
        return HAL_TIMEOUT;
 8001fee:	2003      	movs	r0, #3
 8001ff0:	e78e      	b.n	8001f10 <HAL_RCC_ClockConfig+0xc>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001ff2:	2a02      	cmp	r2, #2
 8001ff4:	d102      	bne.n	8001ffc <HAL_RCC_ClockConfig+0xf8>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001ff6:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8001ffa:	e7e1      	b.n	8001fc0 <HAL_RCC_ClockConfig+0xbc>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ffc:	f013 0f02 	tst.w	r3, #2
 8002000:	e7de      	b.n	8001fc0 <HAL_RCC_ClockConfig+0xbc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002002:	6813      	ldr	r3, [r2, #0]
 8002004:	f023 0307 	bic.w	r3, r3, #7
 8002008:	432b      	orrs	r3, r5
 800200a:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800200c:	6813      	ldr	r3, [r2, #0]
 800200e:	f003 0307 	and.w	r3, r3, #7
 8002012:	42ab      	cmp	r3, r5
 8002014:	f47f af7b 	bne.w	8001f0e <HAL_RCC_ClockConfig+0xa>
 8002018:	e78d      	b.n	8001f36 <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800201a:	686b      	ldr	r3, [r5, #4]
 800201c:	68e1      	ldr	r1, [r4, #12]
 800201e:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002022:	430b      	orrs	r3, r1
 8002024:	606b      	str	r3, [r5, #4]
 8002026:	e78b      	b.n	8001f40 <HAL_RCC_ClockConfig+0x3c>
 8002028:	40022000 	.word	0x40022000
 800202c:	40021000 	.word	0x40021000
 8002030:	0800332b 	.word	0x0800332b
 8002034:	20000004 	.word	0x20000004
 8002038:	2000000c 	.word	0x2000000c

0800203c <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800203c:	4b04      	ldr	r3, [pc, #16]	; (8002050 <HAL_RCC_GetPCLK1Freq+0x14>)
 800203e:	4a05      	ldr	r2, [pc, #20]	; (8002054 <HAL_RCC_GetPCLK1Freq+0x18>)
 8002040:	685b      	ldr	r3, [r3, #4]
 8002042:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8002046:	5cd3      	ldrb	r3, [r2, r3]
 8002048:	4a03      	ldr	r2, [pc, #12]	; (8002058 <HAL_RCC_GetPCLK1Freq+0x1c>)
 800204a:	6810      	ldr	r0, [r2, #0]
}
 800204c:	40d8      	lsrs	r0, r3
 800204e:	4770      	bx	lr
 8002050:	40021000 	.word	0x40021000
 8002054:	0800333b 	.word	0x0800333b
 8002058:	20000004 	.word	0x20000004

0800205c <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800205c:	4b04      	ldr	r3, [pc, #16]	; (8002070 <HAL_RCC_GetPCLK2Freq+0x14>)
 800205e:	4a05      	ldr	r2, [pc, #20]	; (8002074 <HAL_RCC_GetPCLK2Freq+0x18>)
 8002060:	685b      	ldr	r3, [r3, #4]
 8002062:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 8002066:	5cd3      	ldrb	r3, [r2, r3]
 8002068:	4a03      	ldr	r2, [pc, #12]	; (8002078 <HAL_RCC_GetPCLK2Freq+0x1c>)
 800206a:	6810      	ldr	r0, [r2, #0]
}
 800206c:	40d8      	lsrs	r0, r3
 800206e:	4770      	bx	lr
 8002070:	40021000 	.word	0x40021000
 8002074:	0800333b 	.word	0x0800333b
 8002078:	20000004 	.word	0x20000004

0800207c <HAL_RCC_GetClockConfig>:
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800207c:	230f      	movs	r3, #15
 800207e:	6003      	str	r3, [r0, #0]
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002080:	4b0b      	ldr	r3, [pc, #44]	; (80020b0 <HAL_RCC_GetClockConfig+0x34>)
 8002082:	685a      	ldr	r2, [r3, #4]
 8002084:	f002 0203 	and.w	r2, r2, #3
 8002088:	6042      	str	r2, [r0, #4]
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800208a:	685a      	ldr	r2, [r3, #4]
 800208c:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 8002090:	6082      	str	r2, [r0, #8]
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002092:	685a      	ldr	r2, [r3, #4]
 8002094:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 8002098:	60c2      	str	r2, [r0, #12]
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 800209a:	685b      	ldr	r3, [r3, #4]
 800209c:	08db      	lsrs	r3, r3, #3
 800209e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80020a2:	6103      	str	r3, [r0, #16]
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80020a4:	4b03      	ldr	r3, [pc, #12]	; (80020b4 <HAL_RCC_GetClockConfig+0x38>)
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	f003 0307 	and.w	r3, r3, #7
 80020ac:	600b      	str	r3, [r1, #0]
}
 80020ae:	4770      	bx	lr
 80020b0:	40021000 	.word	0x40021000
 80020b4:	40022000 	.word	0x40022000

080020b8 <HAL_RCCEx_PeriphCLKConfig>:

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80020b8:	6803      	ldr	r3, [r0, #0]
{
 80020ba:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80020be:	07d9      	lsls	r1, r3, #31
{
 80020c0:	4605      	mov	r5, r0
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80020c2:	d521      	bpl.n	8002108 <HAL_RCCEx_PeriphCLKConfig+0x50>
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80020c4:	4c36      	ldr	r4, [pc, #216]	; (80021a0 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 80020c6:	69e3      	ldr	r3, [r4, #28]
 80020c8:	00da      	lsls	r2, r3, #3
 80020ca:	d433      	bmi.n	8002134 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
 80020cc:	2601      	movs	r6, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 80020ce:	69e3      	ldr	r3, [r4, #28]
 80020d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80020d4:	61e3      	str	r3, [r4, #28]
 80020d6:	69e3      	ldr	r3, [r4, #28]
 80020d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020dc:	9301      	str	r3, [sp, #4]
 80020de:	9b01      	ldr	r3, [sp, #4]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020e0:	4f30      	ldr	r7, [pc, #192]	; (80021a4 <HAL_RCCEx_PeriphCLKConfig+0xec>)
 80020e2:	683b      	ldr	r3, [r7, #0]
 80020e4:	05db      	lsls	r3, r3, #23
 80020e6:	d527      	bpl.n	8002138 <HAL_RCCEx_PeriphCLKConfig+0x80>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80020e8:	6a23      	ldr	r3, [r4, #32]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80020ea:	686a      	ldr	r2, [r5, #4]
 80020ec:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 80020f0:	d136      	bne.n	8002160 <HAL_RCCEx_PeriphCLKConfig+0xa8>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80020f2:	6a23      	ldr	r3, [r4, #32]
 80020f4:	686a      	ldr	r2, [r5, #4]
 80020f6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80020fa:	4313      	orrs	r3, r2
 80020fc:	6223      	str	r3, [r4, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80020fe:	b11e      	cbz	r6, 8002108 <HAL_RCCEx_PeriphCLKConfig+0x50>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002100:	69e3      	ldr	r3, [r4, #28]
 8002102:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002106:	61e3      	str	r3, [r4, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002108:	6828      	ldr	r0, [r5, #0]
 800210a:	0783      	lsls	r3, r0, #30
 800210c:	d506      	bpl.n	800211c <HAL_RCCEx_PeriphCLKConfig+0x64>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800210e:	4924      	ldr	r1, [pc, #144]	; (80021a0 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8002110:	68ab      	ldr	r3, [r5, #8]
 8002112:	684a      	ldr	r2, [r1, #4]
 8002114:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8002118:	431a      	orrs	r2, r3
 800211a:	604a      	str	r2, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800211c:	f010 0010 	ands.w	r0, r0, #16
 8002120:	d01b      	beq.n	800215a <HAL_RCCEx_PeriphCLKConfig+0xa2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002122:	4a1f      	ldr	r2, [pc, #124]	; (80021a0 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8002124:	68e9      	ldr	r1, [r5, #12]
 8002126:	6853      	ldr	r3, [r2, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8002128:	2000      	movs	r0, #0
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800212a:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 800212e:	430b      	orrs	r3, r1
 8002130:	6053      	str	r3, [r2, #4]
 8002132:	e012      	b.n	800215a <HAL_RCCEx_PeriphCLKConfig+0xa2>
    FlagStatus pwrclkchanged = RESET;
 8002134:	2600      	movs	r6, #0
 8002136:	e7d3      	b.n	80020e0 <HAL_RCCEx_PeriphCLKConfig+0x28>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002138:	683b      	ldr	r3, [r7, #0]
 800213a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800213e:	603b      	str	r3, [r7, #0]
      tickstart = HAL_GetTick();
 8002140:	f7ff f8a2 	bl	8001288 <HAL_GetTick>
 8002144:	4680      	mov	r8, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002146:	683b      	ldr	r3, [r7, #0]
 8002148:	05d8      	lsls	r0, r3, #23
 800214a:	d4cd      	bmi.n	80020e8 <HAL_RCCEx_PeriphCLKConfig+0x30>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800214c:	f7ff f89c 	bl	8001288 <HAL_GetTick>
 8002150:	eba0 0008 	sub.w	r0, r0, r8
 8002154:	2864      	cmp	r0, #100	; 0x64
 8002156:	d9f6      	bls.n	8002146 <HAL_RCCEx_PeriphCLKConfig+0x8e>
          return HAL_TIMEOUT;
 8002158:	2003      	movs	r0, #3
}
 800215a:	b002      	add	sp, #8
 800215c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002160:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8002164:	429a      	cmp	r2, r3
 8002166:	d0c4      	beq.n	80020f2 <HAL_RCCEx_PeriphCLKConfig+0x3a>
      __HAL_RCC_BACKUPRESET_FORCE();
 8002168:	2001      	movs	r0, #1
 800216a:	4a0f      	ldr	r2, [pc, #60]	; (80021a8 <HAL_RCCEx_PeriphCLKConfig+0xf0>)
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800216c:	6a23      	ldr	r3, [r4, #32]
      __HAL_RCC_BACKUPRESET_FORCE();
 800216e:	f8c2 0440 	str.w	r0, [r2, #1088]	; 0x440
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002172:	2000      	movs	r0, #0
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002174:	f423 7140 	bic.w	r1, r3, #768	; 0x300
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002178:	f8c2 0440 	str.w	r0, [r2, #1088]	; 0x440
      RCC->BDCR = temp_reg;
 800217c:	6221      	str	r1, [r4, #32]
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800217e:	07d9      	lsls	r1, r3, #31
 8002180:	d5b7      	bpl.n	80020f2 <HAL_RCCEx_PeriphCLKConfig+0x3a>
        tickstart = HAL_GetTick();
 8002182:	f7ff f881 	bl	8001288 <HAL_GetTick>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002186:	f241 3888 	movw	r8, #5000	; 0x1388
        tickstart = HAL_GetTick();
 800218a:	4607      	mov	r7, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800218c:	6a23      	ldr	r3, [r4, #32]
 800218e:	079a      	lsls	r2, r3, #30
 8002190:	d4af      	bmi.n	80020f2 <HAL_RCCEx_PeriphCLKConfig+0x3a>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002192:	f7ff f879 	bl	8001288 <HAL_GetTick>
 8002196:	1bc0      	subs	r0, r0, r7
 8002198:	4540      	cmp	r0, r8
 800219a:	d9f7      	bls.n	800218c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800219c:	e7dc      	b.n	8002158 <HAL_RCCEx_PeriphCLKConfig+0xa0>
 800219e:	bf00      	nop
 80021a0:	40021000 	.word	0x40021000
 80021a4:	40007000 	.word	0x40007000
 80021a8:	42420000 	.word	0x42420000

080021ac <TIM_OC1_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80021ac:	6a03      	ldr	r3, [r0, #32]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80021ae:	6a02      	ldr	r2, [r0, #32]
{
 80021b0:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80021b2:	f022 0201 	bic.w	r2, r2, #1
 80021b6:	6202      	str	r2, [r0, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80021b8:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80021ba:	6982      	ldr	r2, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80021bc:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80021be:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 80021c2:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80021c4:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC1P;
 80021c6:	f023 0302 	bic.w	r3, r3, #2
  tmpccer |= OC_Config->OCPolarity;
 80021ca:	432b      	orrs	r3, r5

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80021cc:	4d0a      	ldr	r5, [pc, #40]	; (80021f8 <TIM_OC1_SetConfig+0x4c>)
 80021ce:	42a8      	cmp	r0, r5
 80021d0:	d10b      	bne.n	80021ea <TIM_OC1_SetConfig+0x3e>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80021d2:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC1NP;
 80021d4:	f023 0308 	bic.w	r3, r3, #8
    tmpccer |= OC_Config->OCNPolarity;
 80021d8:	432b      	orrs	r3, r5
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80021da:	f424 7440 	bic.w	r4, r4, #768	; 0x300
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80021de:	e9d1 5605 	ldrd	r5, r6, [r1, #20]
 80021e2:	4335      	orrs	r5, r6
    tmpccer &= ~TIM_CCER_CC1NE;
 80021e4:	f023 0304 	bic.w	r3, r3, #4
    tmpcr2 |= OC_Config->OCNIdleState;
 80021e8:	432c      	orrs	r4, r5
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80021ea:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80021ec:	6182      	str	r2, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80021ee:	684a      	ldr	r2, [r1, #4]
 80021f0:	6342      	str	r2, [r0, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80021f2:	6203      	str	r3, [r0, #32]
}
 80021f4:	bd70      	pop	{r4, r5, r6, pc}
 80021f6:	bf00      	nop
 80021f8:	40012c00 	.word	0x40012c00

080021fc <TIM_OC3_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80021fc:	6a03      	ldr	r3, [r0, #32]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80021fe:	6a02      	ldr	r2, [r0, #32]
{
 8002200:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002202:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002206:	6202      	str	r2, [r0, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002208:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800220a:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800220c:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800220e:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 8002212:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002214:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC3P;
 8002216:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800221a:	ea43 2305 	orr.w	r3, r3, r5, lsl #8

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800221e:	4d0b      	ldr	r5, [pc, #44]	; (800224c <TIM_OC3_SetConfig+0x50>)
 8002220:	42a8      	cmp	r0, r5
 8002222:	d10d      	bne.n	8002240 <TIM_OC3_SetConfig+0x44>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002224:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC3NP;
 8002226:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800222a:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800222e:	f424 5440 	bic.w	r4, r4, #12288	; 0x3000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002232:	e9d1 5605 	ldrd	r5, r6, [r1, #20]
 8002236:	4335      	orrs	r5, r6
    tmpccer &= ~TIM_CCER_CC3NE;
 8002238:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800223c:	ea44 1405 	orr.w	r4, r4, r5, lsl #4
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002240:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002242:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002244:	684a      	ldr	r2, [r1, #4]
 8002246:	63c2      	str	r2, [r0, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002248:	6203      	str	r3, [r0, #32]
}
 800224a:	bd70      	pop	{r4, r5, r6, pc}
 800224c:	40012c00 	.word	0x40012c00

08002250 <TIM_OC4_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002250:	6a03      	ldr	r3, [r0, #32]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002252:	6a02      	ldr	r2, [r0, #32]
{
 8002254:	b530      	push	{r4, r5, lr}
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002256:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800225a:	6202      	str	r2, [r0, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800225c:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800225e:	69c2      	ldr	r2, [r0, #28]
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002260:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002262:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002266:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800226a:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC4P;
 800226c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002270:	ea43 3305 	orr.w	r3, r3, r5, lsl #12

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002274:	4d06      	ldr	r5, [pc, #24]	; (8002290 <TIM_OC4_SetConfig+0x40>)
 8002276:	42a8      	cmp	r0, r5

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002278:	bf02      	ittt	eq
 800227a:	694d      	ldreq	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS4;
 800227c:	f424 4480 	biceq.w	r4, r4, #16384	; 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002280:	ea44 1485 	orreq.w	r4, r4, r5, lsl #6
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002284:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002286:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002288:	684a      	ldr	r2, [r1, #4]
 800228a:	6402      	str	r2, [r0, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800228c:	6203      	str	r3, [r0, #32]
}
 800228e:	bd30      	pop	{r4, r5, pc}
 8002290:	40012c00 	.word	0x40012c00

08002294 <HAL_TIM_Base_MspInit>:
}
 8002294:	4770      	bx	lr
	...

08002298 <HAL_TIM_Base_Start>:
  if (htim->State != HAL_TIM_STATE_READY)
 8002298:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800229c:	2b01      	cmp	r3, #1
 800229e:	d11c      	bne.n	80022da <HAL_TIM_Base_Start+0x42>
  htim->State = HAL_TIM_STATE_BUSY;
 80022a0:	2302      	movs	r3, #2
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80022a2:	4a0f      	ldr	r2, [pc, #60]	; (80022e0 <HAL_TIM_Base_Start+0x48>)
  htim->State = HAL_TIM_STATE_BUSY;
 80022a4:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80022a8:	6803      	ldr	r3, [r0, #0]
 80022aa:	4293      	cmp	r3, r2
 80022ac:	d00a      	beq.n	80022c4 <HAL_TIM_Base_Start+0x2c>
 80022ae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80022b2:	d007      	beq.n	80022c4 <HAL_TIM_Base_Start+0x2c>
 80022b4:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 80022b8:	4293      	cmp	r3, r2
 80022ba:	d003      	beq.n	80022c4 <HAL_TIM_Base_Start+0x2c>
 80022bc:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80022c0:	4293      	cmp	r3, r2
 80022c2:	d104      	bne.n	80022ce <HAL_TIM_Base_Start+0x36>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80022c4:	689a      	ldr	r2, [r3, #8]
 80022c6:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80022ca:	2a06      	cmp	r2, #6
 80022cc:	d003      	beq.n	80022d6 <HAL_TIM_Base_Start+0x3e>
    __HAL_TIM_ENABLE(htim);
 80022ce:	681a      	ldr	r2, [r3, #0]
 80022d0:	f042 0201 	orr.w	r2, r2, #1
 80022d4:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 80022d6:	2000      	movs	r0, #0
}
 80022d8:	4770      	bx	lr
    return HAL_ERROR;
 80022da:	2001      	movs	r0, #1
 80022dc:	4770      	bx	lr
 80022de:	bf00      	nop
 80022e0:	40012c00 	.word	0x40012c00

080022e4 <HAL_TIM_Base_Start_IT>:
  if (htim->State != HAL_TIM_STATE_READY)
 80022e4:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80022e8:	2b01      	cmp	r3, #1
 80022ea:	d120      	bne.n	800232e <HAL_TIM_Base_Start_IT+0x4a>
  htim->State = HAL_TIM_STATE_BUSY;
 80022ec:	2302      	movs	r3, #2
 80022ee:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80022f2:	6803      	ldr	r3, [r0, #0]
 80022f4:	68da      	ldr	r2, [r3, #12]
 80022f6:	f042 0201 	orr.w	r2, r2, #1
 80022fa:	60da      	str	r2, [r3, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80022fc:	4a0d      	ldr	r2, [pc, #52]	; (8002334 <HAL_TIM_Base_Start_IT+0x50>)
 80022fe:	4293      	cmp	r3, r2
 8002300:	d00a      	beq.n	8002318 <HAL_TIM_Base_Start_IT+0x34>
 8002302:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002306:	d007      	beq.n	8002318 <HAL_TIM_Base_Start_IT+0x34>
 8002308:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 800230c:	4293      	cmp	r3, r2
 800230e:	d003      	beq.n	8002318 <HAL_TIM_Base_Start_IT+0x34>
 8002310:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002314:	4293      	cmp	r3, r2
 8002316:	d104      	bne.n	8002322 <HAL_TIM_Base_Start_IT+0x3e>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002318:	689a      	ldr	r2, [r3, #8]
 800231a:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800231e:	2a06      	cmp	r2, #6
 8002320:	d003      	beq.n	800232a <HAL_TIM_Base_Start_IT+0x46>
    __HAL_TIM_ENABLE(htim);
 8002322:	681a      	ldr	r2, [r3, #0]
 8002324:	f042 0201 	orr.w	r2, r2, #1
 8002328:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 800232a:	2000      	movs	r0, #0
}
 800232c:	4770      	bx	lr
    return HAL_ERROR;
 800232e:	2001      	movs	r0, #1
 8002330:	4770      	bx	lr
 8002332:	bf00      	nop
 8002334:	40012c00 	.word	0x40012c00

08002338 <HAL_TIM_OC_DelayElapsedCallback>:
 8002338:	4770      	bx	lr

0800233a <HAL_TIM_IC_CaptureCallback>:
 800233a:	4770      	bx	lr

0800233c <HAL_TIM_PWM_PulseFinishedCallback>:
 800233c:	4770      	bx	lr

0800233e <HAL_TIM_TriggerCallback>:
 800233e:	4770      	bx	lr

08002340 <HAL_TIM_IRQHandler>:
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002340:	6803      	ldr	r3, [r0, #0]
{
 8002342:	b510      	push	{r4, lr}
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002344:	691a      	ldr	r2, [r3, #16]
{
 8002346:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002348:	0791      	lsls	r1, r2, #30
 800234a:	d50e      	bpl.n	800236a <HAL_TIM_IRQHandler+0x2a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800234c:	68da      	ldr	r2, [r3, #12]
 800234e:	0792      	lsls	r2, r2, #30
 8002350:	d50b      	bpl.n	800236a <HAL_TIM_IRQHandler+0x2a>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002352:	f06f 0202 	mvn.w	r2, #2
 8002356:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002358:	2201      	movs	r2, #1
 800235a:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800235c:	699b      	ldr	r3, [r3, #24]
 800235e:	079b      	lsls	r3, r3, #30
 8002360:	d077      	beq.n	8002452 <HAL_TIM_IRQHandler+0x112>
          HAL_TIM_IC_CaptureCallback(htim);
 8002362:	f7ff ffea 	bl	800233a <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002366:	2300      	movs	r3, #0
 8002368:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800236a:	6823      	ldr	r3, [r4, #0]
 800236c:	691a      	ldr	r2, [r3, #16]
 800236e:	0750      	lsls	r0, r2, #29
 8002370:	d510      	bpl.n	8002394 <HAL_TIM_IRQHandler+0x54>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002372:	68da      	ldr	r2, [r3, #12]
 8002374:	0751      	lsls	r1, r2, #29
 8002376:	d50d      	bpl.n	8002394 <HAL_TIM_IRQHandler+0x54>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002378:	f06f 0204 	mvn.w	r2, #4
 800237c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800237e:	2202      	movs	r2, #2
 8002380:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002382:	699b      	ldr	r3, [r3, #24]
        HAL_TIM_IC_CaptureCallback(htim);
 8002384:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002386:	f413 7f40 	tst.w	r3, #768	; 0x300
 800238a:	d068      	beq.n	800245e <HAL_TIM_IRQHandler+0x11e>
        HAL_TIM_IC_CaptureCallback(htim);
 800238c:	f7ff ffd5 	bl	800233a <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002390:	2300      	movs	r3, #0
 8002392:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002394:	6823      	ldr	r3, [r4, #0]
 8002396:	691a      	ldr	r2, [r3, #16]
 8002398:	0712      	lsls	r2, r2, #28
 800239a:	d50f      	bpl.n	80023bc <HAL_TIM_IRQHandler+0x7c>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800239c:	68da      	ldr	r2, [r3, #12]
 800239e:	0710      	lsls	r0, r2, #28
 80023a0:	d50c      	bpl.n	80023bc <HAL_TIM_IRQHandler+0x7c>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80023a2:	f06f 0208 	mvn.w	r2, #8
 80023a6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80023a8:	2204      	movs	r2, #4
 80023aa:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80023ac:	69db      	ldr	r3, [r3, #28]
        HAL_TIM_IC_CaptureCallback(htim);
 80023ae:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80023b0:	0799      	lsls	r1, r3, #30
 80023b2:	d05a      	beq.n	800246a <HAL_TIM_IRQHandler+0x12a>
        HAL_TIM_IC_CaptureCallback(htim);
 80023b4:	f7ff ffc1 	bl	800233a <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80023b8:	2300      	movs	r3, #0
 80023ba:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80023bc:	6823      	ldr	r3, [r4, #0]
 80023be:	691a      	ldr	r2, [r3, #16]
 80023c0:	06d2      	lsls	r2, r2, #27
 80023c2:	d510      	bpl.n	80023e6 <HAL_TIM_IRQHandler+0xa6>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80023c4:	68da      	ldr	r2, [r3, #12]
 80023c6:	06d0      	lsls	r0, r2, #27
 80023c8:	d50d      	bpl.n	80023e6 <HAL_TIM_IRQHandler+0xa6>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80023ca:	f06f 0210 	mvn.w	r2, #16
 80023ce:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80023d0:	2208      	movs	r2, #8
 80023d2:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80023d4:	69db      	ldr	r3, [r3, #28]
        HAL_TIM_IC_CaptureCallback(htim);
 80023d6:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80023d8:	f413 7f40 	tst.w	r3, #768	; 0x300
 80023dc:	d04b      	beq.n	8002476 <HAL_TIM_IRQHandler+0x136>
        HAL_TIM_IC_CaptureCallback(htim);
 80023de:	f7ff ffac 	bl	800233a <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80023e2:	2300      	movs	r3, #0
 80023e4:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80023e6:	6823      	ldr	r3, [r4, #0]
 80023e8:	691a      	ldr	r2, [r3, #16]
 80023ea:	07d1      	lsls	r1, r2, #31
 80023ec:	d508      	bpl.n	8002400 <HAL_TIM_IRQHandler+0xc0>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80023ee:	68da      	ldr	r2, [r3, #12]
 80023f0:	07d2      	lsls	r2, r2, #31
 80023f2:	d505      	bpl.n	8002400 <HAL_TIM_IRQHandler+0xc0>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80023f4:	f06f 0201 	mvn.w	r2, #1
      HAL_TIM_PeriodElapsedCallback(htim);
 80023f8:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80023fa:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 80023fc:	f7fe fd8e 	bl	8000f1c <HAL_TIM_PeriodElapsedCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002400:	6823      	ldr	r3, [r4, #0]
 8002402:	691a      	ldr	r2, [r3, #16]
 8002404:	0610      	lsls	r0, r2, #24
 8002406:	d508      	bpl.n	800241a <HAL_TIM_IRQHandler+0xda>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002408:	68da      	ldr	r2, [r3, #12]
 800240a:	0611      	lsls	r1, r2, #24
 800240c:	d505      	bpl.n	800241a <HAL_TIM_IRQHandler+0xda>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800240e:	f06f 0280 	mvn.w	r2, #128	; 0x80
      HAL_TIMEx_BreakCallback(htim);
 8002412:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002414:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8002416:	f000 f9da 	bl	80027ce <HAL_TIMEx_BreakCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800241a:	6823      	ldr	r3, [r4, #0]
 800241c:	691a      	ldr	r2, [r3, #16]
 800241e:	0652      	lsls	r2, r2, #25
 8002420:	d508      	bpl.n	8002434 <HAL_TIM_IRQHandler+0xf4>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002422:	68da      	ldr	r2, [r3, #12]
 8002424:	0650      	lsls	r0, r2, #25
 8002426:	d505      	bpl.n	8002434 <HAL_TIM_IRQHandler+0xf4>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002428:	f06f 0240 	mvn.w	r2, #64	; 0x40
      HAL_TIM_TriggerCallback(htim);
 800242c:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800242e:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8002430:	f7ff ff85 	bl	800233e <HAL_TIM_TriggerCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002434:	6823      	ldr	r3, [r4, #0]
 8002436:	691a      	ldr	r2, [r3, #16]
 8002438:	0691      	lsls	r1, r2, #26
 800243a:	d522      	bpl.n	8002482 <HAL_TIM_IRQHandler+0x142>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800243c:	68da      	ldr	r2, [r3, #12]
 800243e:	0692      	lsls	r2, r2, #26
 8002440:	d51f      	bpl.n	8002482 <HAL_TIM_IRQHandler+0x142>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002442:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutCallback(htim);
 8002446:	4620      	mov	r0, r4
}
 8002448:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800244c:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutCallback(htim);
 800244e:	f000 b9bd 	b.w	80027cc <HAL_TIMEx_CommutCallback>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002452:	f7ff ff71 	bl	8002338 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002456:	4620      	mov	r0, r4
 8002458:	f7ff ff70 	bl	800233c <HAL_TIM_PWM_PulseFinishedCallback>
 800245c:	e783      	b.n	8002366 <HAL_TIM_IRQHandler+0x26>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800245e:	f7ff ff6b 	bl	8002338 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002462:	4620      	mov	r0, r4
 8002464:	f7ff ff6a 	bl	800233c <HAL_TIM_PWM_PulseFinishedCallback>
 8002468:	e792      	b.n	8002390 <HAL_TIM_IRQHandler+0x50>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800246a:	f7ff ff65 	bl	8002338 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800246e:	4620      	mov	r0, r4
 8002470:	f7ff ff64 	bl	800233c <HAL_TIM_PWM_PulseFinishedCallback>
 8002474:	e7a0      	b.n	80023b8 <HAL_TIM_IRQHandler+0x78>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002476:	f7ff ff5f 	bl	8002338 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800247a:	4620      	mov	r0, r4
 800247c:	f7ff ff5e 	bl	800233c <HAL_TIM_PWM_PulseFinishedCallback>
 8002480:	e7af      	b.n	80023e2 <HAL_TIM_IRQHandler+0xa2>
}
 8002482:	bd10      	pop	{r4, pc}

08002484 <TIM_Base_SetConfig>:
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002484:	4a1a      	ldr	r2, [pc, #104]	; (80024f0 <TIM_Base_SetConfig+0x6c>)
  tmpcr1 = TIMx->CR1;
 8002486:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002488:	4290      	cmp	r0, r2
 800248a:	d00a      	beq.n	80024a2 <TIM_Base_SetConfig+0x1e>
 800248c:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8002490:	d007      	beq.n	80024a2 <TIM_Base_SetConfig+0x1e>
 8002492:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8002496:	4290      	cmp	r0, r2
 8002498:	d003      	beq.n	80024a2 <TIM_Base_SetConfig+0x1e>
 800249a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800249e:	4290      	cmp	r0, r2
 80024a0:	d115      	bne.n	80024ce <TIM_Base_SetConfig+0x4a>
    tmpcr1 |= Structure->CounterMode;
 80024a2:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80024a4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 80024a8:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80024aa:	4a11      	ldr	r2, [pc, #68]	; (80024f0 <TIM_Base_SetConfig+0x6c>)
 80024ac:	4290      	cmp	r0, r2
 80024ae:	d00a      	beq.n	80024c6 <TIM_Base_SetConfig+0x42>
 80024b0:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80024b4:	d007      	beq.n	80024c6 <TIM_Base_SetConfig+0x42>
 80024b6:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 80024ba:	4290      	cmp	r0, r2
 80024bc:	d003      	beq.n	80024c6 <TIM_Base_SetConfig+0x42>
 80024be:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80024c2:	4290      	cmp	r0, r2
 80024c4:	d103      	bne.n	80024ce <TIM_Base_SetConfig+0x4a>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80024c6:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 80024c8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80024cc:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80024ce:	694a      	ldr	r2, [r1, #20]
 80024d0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80024d4:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 80024d6:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80024d8:	688b      	ldr	r3, [r1, #8]
 80024da:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 80024dc:	680b      	ldr	r3, [r1, #0]
 80024de:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80024e0:	4b03      	ldr	r3, [pc, #12]	; (80024f0 <TIM_Base_SetConfig+0x6c>)
 80024e2:	4298      	cmp	r0, r3
    TIMx->RCR = Structure->RepetitionCounter;
 80024e4:	bf04      	itt	eq
 80024e6:	690b      	ldreq	r3, [r1, #16]
 80024e8:	6303      	streq	r3, [r0, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 80024ea:	2301      	movs	r3, #1
 80024ec:	6143      	str	r3, [r0, #20]
}
 80024ee:	4770      	bx	lr
 80024f0:	40012c00 	.word	0x40012c00

080024f4 <HAL_TIM_Base_Init>:
{
 80024f4:	b510      	push	{r4, lr}
  if (htim == NULL)
 80024f6:	4604      	mov	r4, r0
 80024f8:	b330      	cbz	r0, 8002548 <HAL_TIM_Base_Init+0x54>
  if (htim->State == HAL_TIM_STATE_RESET)
 80024fa:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80024fe:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8002502:	b91b      	cbnz	r3, 800250c <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8002504:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8002508:	f7ff fec4 	bl	8002294 <HAL_TIM_Base_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 800250c:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800250e:	6820      	ldr	r0, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8002510:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002514:	1d21      	adds	r1, r4, #4
 8002516:	f7ff ffb5 	bl	8002484 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800251a:	2301      	movs	r3, #1
  return HAL_OK;
 800251c:	2000      	movs	r0, #0
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800251e:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002522:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 8002526:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 800252a:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 800252e:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002532:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002536:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800253a:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 800253e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
  htim->State = HAL_TIM_STATE_READY;
 8002542:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 8002546:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8002548:	2001      	movs	r0, #1
 800254a:	e7fc      	b.n	8002546 <HAL_TIM_Base_Init+0x52>

0800254c <HAL_TIM_PWM_Init>:
{
 800254c:	b510      	push	{r4, lr}
  if (htim == NULL)
 800254e:	4604      	mov	r4, r0
 8002550:	b330      	cbz	r0, 80025a0 <HAL_TIM_PWM_Init+0x54>
  if (htim->State == HAL_TIM_STATE_RESET)
 8002552:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8002556:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800255a:	b91b      	cbnz	r3, 8002564 <HAL_TIM_PWM_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 800255c:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_PWM_MspInit(htim);
 8002560:	f7fe fd4c 	bl	8000ffc <HAL_TIM_PWM_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 8002564:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002566:	6820      	ldr	r0, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8002568:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800256c:	1d21      	adds	r1, r4, #4
 800256e:	f7ff ff89 	bl	8002484 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002572:	2301      	movs	r3, #1
  return HAL_OK;
 8002574:	2000      	movs	r0, #0
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002576:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800257a:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 800257e:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8002582:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8002586:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800258a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800258e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002592:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8002596:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
  htim->State = HAL_TIM_STATE_READY;
 800259a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 800259e:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80025a0:	2001      	movs	r0, #1
 80025a2:	e7fc      	b.n	800259e <HAL_TIM_PWM_Init+0x52>

080025a4 <TIM_OC2_SetConfig>:
  tmpccer = TIMx->CCER;
 80025a4:	6a03      	ldr	r3, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80025a6:	6a02      	ldr	r2, [r0, #32]
{
 80025a8:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80025aa:	f022 0210 	bic.w	r2, r2, #16
 80025ae:	6202      	str	r2, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 80025b0:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 80025b2:	6982      	ldr	r2, [r0, #24]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80025b4:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80025b6:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80025ba:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80025be:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC2P;
 80025c0:	f023 0320 	bic.w	r3, r3, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80025c4:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80025c8:	4d0b      	ldr	r5, [pc, #44]	; (80025f8 <TIM_OC2_SetConfig+0x54>)
 80025ca:	42a8      	cmp	r0, r5
 80025cc:	d10d      	bne.n	80025ea <TIM_OC2_SetConfig+0x46>
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80025ce:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC2NP;
 80025d0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80025d4:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80025d8:	f424 6440 	bic.w	r4, r4, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80025dc:	e9d1 5605 	ldrd	r5, r6, [r1, #20]
 80025e0:	4335      	orrs	r5, r6
    tmpccer &= ~TIM_CCER_CC2NE;
 80025e2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80025e6:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
  TIMx->CR2 = tmpcr2;
 80025ea:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 80025ec:	6182      	str	r2, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 80025ee:	684a      	ldr	r2, [r1, #4]
 80025f0:	6382      	str	r2, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 80025f2:	6203      	str	r3, [r0, #32]
}
 80025f4:	bd70      	pop	{r4, r5, r6, pc}
 80025f6:	bf00      	nop
 80025f8:	40012c00 	.word	0x40012c00

080025fc <HAL_TIM_PWM_ConfigChannel>:
{
 80025fc:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(htim);
 80025fe:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
 8002602:	4605      	mov	r5, r0
  __HAL_LOCK(htim);
 8002604:	2b01      	cmp	r3, #1
 8002606:	d050      	beq.n	80026aa <HAL_TIM_PWM_ConfigChannel+0xae>
 8002608:	2301      	movs	r3, #1
  switch (Channel)
 800260a:	2a08      	cmp	r2, #8
  __HAL_LOCK(htim);
 800260c:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  switch (Channel)
 8002610:	d03b      	beq.n	800268a <HAL_TIM_PWM_ConfigChannel+0x8e>
 8002612:	d807      	bhi.n	8002624 <HAL_TIM_PWM_ConfigChannel+0x28>
 8002614:	b1c2      	cbz	r2, 8002648 <HAL_TIM_PWM_ConfigChannel+0x4c>
 8002616:	2a04      	cmp	r2, #4
 8002618:	d027      	beq.n	800266a <HAL_TIM_PWM_ConfigChannel+0x6e>
 800261a:	4618      	mov	r0, r3
  __HAL_UNLOCK(htim);
 800261c:	2300      	movs	r3, #0
 800261e:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
}
 8002622:	bd70      	pop	{r4, r5, r6, pc}
  switch (Channel)
 8002624:	2a0c      	cmp	r2, #12
 8002626:	d1f8      	bne.n	800261a <HAL_TIM_PWM_ConfigChannel+0x1e>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002628:	6800      	ldr	r0, [r0, #0]
 800262a:	f7ff fe11 	bl	8002250 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800262e:	69c3      	ldr	r3, [r0, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002630:	690a      	ldr	r2, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002632:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002636:	61c3      	str	r3, [r0, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002638:	69c3      	ldr	r3, [r0, #28]
 800263a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800263e:	61c3      	str	r3, [r0, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002640:	69c3      	ldr	r3, [r0, #28]
 8002642:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8002646:	e02e      	b.n	80026a6 <HAL_TIM_PWM_ConfigChannel+0xaa>
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002648:	6800      	ldr	r0, [r0, #0]
 800264a:	f7ff fdaf 	bl	80021ac <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800264e:	6983      	ldr	r3, [r0, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002650:	690a      	ldr	r2, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002652:	f043 0308 	orr.w	r3, r3, #8
 8002656:	6183      	str	r3, [r0, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002658:	6983      	ldr	r3, [r0, #24]
 800265a:	f023 0304 	bic.w	r3, r3, #4
 800265e:	6183      	str	r3, [r0, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002660:	6983      	ldr	r3, [r0, #24]
 8002662:	4313      	orrs	r3, r2
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002664:	6183      	str	r3, [r0, #24]
  HAL_StatusTypeDef status = HAL_OK;
 8002666:	2000      	movs	r0, #0
      break;
 8002668:	e7d8      	b.n	800261c <HAL_TIM_PWM_ConfigChannel+0x20>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800266a:	6800      	ldr	r0, [r0, #0]
 800266c:	f7ff ff9a 	bl	80025a4 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002670:	6983      	ldr	r3, [r0, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002672:	690a      	ldr	r2, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002674:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002678:	6183      	str	r3, [r0, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800267a:	6983      	ldr	r3, [r0, #24]
 800267c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002680:	6183      	str	r3, [r0, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002682:	6983      	ldr	r3, [r0, #24]
 8002684:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8002688:	e7ec      	b.n	8002664 <HAL_TIM_PWM_ConfigChannel+0x68>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800268a:	6800      	ldr	r0, [r0, #0]
 800268c:	f7ff fdb6 	bl	80021fc <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002690:	69c3      	ldr	r3, [r0, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002692:	690a      	ldr	r2, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002694:	f043 0308 	orr.w	r3, r3, #8
 8002698:	61c3      	str	r3, [r0, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800269a:	69c3      	ldr	r3, [r0, #28]
 800269c:	f023 0304 	bic.w	r3, r3, #4
 80026a0:	61c3      	str	r3, [r0, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80026a2:	69c3      	ldr	r3, [r0, #28]
 80026a4:	4313      	orrs	r3, r2
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80026a6:	61c3      	str	r3, [r0, #28]
 80026a8:	e7dd      	b.n	8002666 <HAL_TIM_PWM_ConfigChannel+0x6a>
  __HAL_LOCK(htim);
 80026aa:	2002      	movs	r0, #2
 80026ac:	e7b9      	b.n	8002622 <HAL_TIM_PWM_ConfigChannel+0x26>

080026ae <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80026ae:	b510      	push	{r4, lr}

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80026b0:	2401      	movs	r4, #1

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80026b2:	6a03      	ldr	r3, [r0, #32]
  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80026b4:	f001 011f 	and.w	r1, r1, #31
 80026b8:	408c      	lsls	r4, r1
  TIMx->CCER &= ~tmp;
 80026ba:	ea23 0304 	bic.w	r3, r3, r4
 80026be:	6203      	str	r3, [r0, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80026c0:	6a03      	ldr	r3, [r0, #32]
 80026c2:	408a      	lsls	r2, r1
 80026c4:	431a      	orrs	r2, r3
 80026c6:	6202      	str	r2, [r0, #32]
}
 80026c8:	bd10      	pop	{r4, pc}
	...

080026cc <HAL_TIM_OC_Start>:
{
 80026cc:	b508      	push	{r3, lr}
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80026ce:	b929      	cbnz	r1, 80026dc <HAL_TIM_OC_Start+0x10>
 80026d0:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
 80026d4:	2b01      	cmp	r3, #1
 80026d6:	d021      	beq.n	800271c <HAL_TIM_OC_Start+0x50>
    return HAL_ERROR;
 80026d8:	2001      	movs	r0, #1
}
 80026da:	bd08      	pop	{r3, pc}
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80026dc:	2904      	cmp	r1, #4
 80026de:	d107      	bne.n	80026f0 <HAL_TIM_OC_Start+0x24>
 80026e0:	f890 303f 	ldrb.w	r3, [r0, #63]	; 0x3f
 80026e4:	2b01      	cmp	r3, #1
 80026e6:	d1f7      	bne.n	80026d8 <HAL_TIM_OC_Start+0xc>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80026e8:	2302      	movs	r3, #2
 80026ea:	f880 303f 	strb.w	r3, [r0, #63]	; 0x3f
 80026ee:	e018      	b.n	8002722 <HAL_TIM_OC_Start+0x56>
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80026f0:	2908      	cmp	r1, #8
 80026f2:	d107      	bne.n	8002704 <HAL_TIM_OC_Start+0x38>
 80026f4:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 80026f8:	2b01      	cmp	r3, #1
 80026fa:	d1ed      	bne.n	80026d8 <HAL_TIM_OC_Start+0xc>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80026fc:	2302      	movs	r3, #2
 80026fe:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
 8002702:	e00e      	b.n	8002722 <HAL_TIM_OC_Start+0x56>
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002704:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8002708:	2b01      	cmp	r3, #1
 800270a:	d1e5      	bne.n	80026d8 <HAL_TIM_OC_Start+0xc>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800270c:	2904      	cmp	r1, #4
 800270e:	d0eb      	beq.n	80026e8 <HAL_TIM_OC_Start+0x1c>
 8002710:	2908      	cmp	r1, #8
 8002712:	d0f3      	beq.n	80026fc <HAL_TIM_OC_Start+0x30>
 8002714:	2302      	movs	r3, #2
 8002716:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
 800271a:	e002      	b.n	8002722 <HAL_TIM_OC_Start+0x56>
 800271c:	2302      	movs	r3, #2
 800271e:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002722:	6800      	ldr	r0, [r0, #0]
 8002724:	2201      	movs	r2, #1
 8002726:	f7ff ffc2 	bl	80026ae <TIM_CCxChannelCmd>
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800272a:	4b0e      	ldr	r3, [pc, #56]	; (8002764 <HAL_TIM_OC_Start+0x98>)
 800272c:	4298      	cmp	r0, r3
 800272e:	d10a      	bne.n	8002746 <HAL_TIM_OC_Start+0x7a>
    __HAL_TIM_MOE_ENABLE(htim);
 8002730:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8002732:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002736:	6443      	str	r3, [r0, #68]	; 0x44
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002738:	6883      	ldr	r3, [r0, #8]
 800273a:	f003 0307 	and.w	r3, r3, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800273e:	2b06      	cmp	r3, #6
 8002740:	d10b      	bne.n	800275a <HAL_TIM_OC_Start+0x8e>
  return HAL_OK;
 8002742:	2000      	movs	r0, #0
 8002744:	e7c9      	b.n	80026da <HAL_TIM_OC_Start+0xe>
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002746:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 800274a:	d0f5      	beq.n	8002738 <HAL_TIM_OC_Start+0x6c>
 800274c:	4b06      	ldr	r3, [pc, #24]	; (8002768 <HAL_TIM_OC_Start+0x9c>)
 800274e:	4298      	cmp	r0, r3
 8002750:	d0f2      	beq.n	8002738 <HAL_TIM_OC_Start+0x6c>
 8002752:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002756:	4298      	cmp	r0, r3
 8002758:	d0ee      	beq.n	8002738 <HAL_TIM_OC_Start+0x6c>
    __HAL_TIM_ENABLE(htim);
 800275a:	6803      	ldr	r3, [r0, #0]
 800275c:	f043 0301 	orr.w	r3, r3, #1
 8002760:	6003      	str	r3, [r0, #0]
 8002762:	e7ee      	b.n	8002742 <HAL_TIM_OC_Start+0x76>
 8002764:	40012c00 	.word	0x40012c00
 8002768:	40000400 	.word	0x40000400

0800276c <HAL_TIM_PWM_Start>:
 800276c:	f7ff bfae 	b.w	80026cc <HAL_TIM_OC_Start>

08002770 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002770:	b530      	push	{r4, r5, lr}
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002772:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
 8002776:	4602      	mov	r2, r0
  __HAL_LOCK(htim);
 8002778:	2b01      	cmp	r3, #1
 800277a:	f04f 0002 	mov.w	r0, #2
 800277e:	d022      	beq.n	80027c6 <HAL_TIMEx_MasterConfigSynchronization+0x56>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002780:	6813      	ldr	r3, [r2, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8002782:	f882 003d 	strb.w	r0, [r2, #61]	; 0x3d
  tmpcr2 = htim->Instance->CR2;
 8002786:	685c      	ldr	r4, [r3, #4]
  tmpsmcr = htim->Instance->SMCR;

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002788:	680d      	ldr	r5, [r1, #0]
  tmpcr2 &= ~TIM_CR2_MMS;
 800278a:	f024 0470 	bic.w	r4, r4, #112	; 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800278e:	432c      	orrs	r4, r5
  tmpsmcr = htim->Instance->SMCR;
 8002790:	6898      	ldr	r0, [r3, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002792:	605c      	str	r4, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002794:	4c0c      	ldr	r4, [pc, #48]	; (80027c8 <HAL_TIMEx_MasterConfigSynchronization+0x58>)
 8002796:	42a3      	cmp	r3, r4
 8002798:	d00a      	beq.n	80027b0 <HAL_TIMEx_MasterConfigSynchronization+0x40>
 800279a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800279e:	d007      	beq.n	80027b0 <HAL_TIMEx_MasterConfigSynchronization+0x40>
 80027a0:	f5a4 3494 	sub.w	r4, r4, #75776	; 0x12800
 80027a4:	42a3      	cmp	r3, r4
 80027a6:	d003      	beq.n	80027b0 <HAL_TIMEx_MasterConfigSynchronization+0x40>
 80027a8:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80027ac:	42a3      	cmp	r3, r4
 80027ae:	d104      	bne.n	80027ba <HAL_TIMEx_MasterConfigSynchronization+0x4a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80027b0:	6849      	ldr	r1, [r1, #4]
    tmpsmcr &= ~TIM_SMCR_MSM;
 80027b2:	f020 0080 	bic.w	r0, r0, #128	; 0x80
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80027b6:	4301      	orrs	r1, r0

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80027b8:	6099      	str	r1, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80027ba:	2301      	movs	r3, #1

  __HAL_UNLOCK(htim);
 80027bc:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 80027be:	f882 303d 	strb.w	r3, [r2, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 80027c2:	f882 003c 	strb.w	r0, [r2, #60]	; 0x3c

  return HAL_OK;
}
 80027c6:	bd30      	pop	{r4, r5, pc}
 80027c8:	40012c00 	.word	0x40012c00

080027cc <HAL_TIMEx_CommutCallback>:
 80027cc:	4770      	bx	lr

080027ce <HAL_TIMEx_BreakCallback>:
 80027ce:	4770      	bx	lr

080027d0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80027d0:	b510      	push	{r4, lr}
 80027d2:	4604      	mov	r4, r0
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80027d4:	6803      	ldr	r3, [r0, #0]
 80027d6:	68c1      	ldr	r1, [r0, #12]
 80027d8:	691a      	ldr	r2, [r3, #16]
 80027da:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 80027de:	430a      	orrs	r2, r1
 80027e0:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80027e2:	6882      	ldr	r2, [r0, #8]
 80027e4:	6900      	ldr	r0, [r0, #16]
  MODIFY_REG(huart->Instance->CR1,
 80027e6:	68d9      	ldr	r1, [r3, #12]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80027e8:	4302      	orrs	r2, r0
 80027ea:	6960      	ldr	r0, [r4, #20]
  MODIFY_REG(huart->Instance->CR1,
 80027ec:	f421 51b0 	bic.w	r1, r1, #5632	; 0x1600
 80027f0:	f021 010c 	bic.w	r1, r1, #12
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80027f4:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1,
 80027f6:	430a      	orrs	r2, r1
 80027f8:	60da      	str	r2, [r3, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80027fa:	695a      	ldr	r2, [r3, #20]
 80027fc:	69a1      	ldr	r1, [r4, #24]
 80027fe:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8002802:	430a      	orrs	r2, r1
 8002804:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8002806:	4a0e      	ldr	r2, [pc, #56]	; (8002840 <UART_SetConfig+0x70>)
 8002808:	4293      	cmp	r3, r2
 800280a:	d115      	bne.n	8002838 <UART_SetConfig+0x68>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800280c:	f7ff fc26 	bl	800205c <HAL_RCC_GetPCLK2Freq>
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002810:	2319      	movs	r3, #25
 8002812:	4343      	muls	r3, r0
 8002814:	6862      	ldr	r2, [r4, #4]
 8002816:	6820      	ldr	r0, [r4, #0]
 8002818:	0092      	lsls	r2, r2, #2
 800281a:	fbb3 f3f2 	udiv	r3, r3, r2
 800281e:	2264      	movs	r2, #100	; 0x64
 8002820:	fbb3 f1f2 	udiv	r1, r3, r2
 8002824:	fb02 3311 	mls	r3, r2, r1, r3
 8002828:	011b      	lsls	r3, r3, #4
 800282a:	3332      	adds	r3, #50	; 0x32
 800282c:	fbb3 f3f2 	udiv	r3, r3, r2
 8002830:	eb03 1301 	add.w	r3, r3, r1, lsl #4
 8002834:	6083      	str	r3, [r0, #8]
#endif /* USART_CR1_OVER8 */
}
 8002836:	bd10      	pop	{r4, pc}
    pclk = HAL_RCC_GetPCLK1Freq();
 8002838:	f7ff fc00 	bl	800203c <HAL_RCC_GetPCLK1Freq>
 800283c:	e7e8      	b.n	8002810 <UART_SetConfig+0x40>
 800283e:	bf00      	nop
 8002840:	40013800 	.word	0x40013800

08002844 <UART_WaitOnFlagUntilTimeout.constprop.0>:
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
 8002844:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002846:	4604      	mov	r4, r0
 8002848:	460e      	mov	r6, r1
 800284a:	4617      	mov	r7, r2
 800284c:	461d      	mov	r5, r3
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800284e:	6822      	ldr	r2, [r4, #0]
 8002850:	6813      	ldr	r3, [r2, #0]
 8002852:	ea36 0303 	bics.w	r3, r6, r3
 8002856:	d101      	bne.n	800285c <UART_WaitOnFlagUntilTimeout.constprop.0+0x18>
  return HAL_OK;
 8002858:	2000      	movs	r0, #0
 800285a:	e028      	b.n	80028ae <UART_WaitOnFlagUntilTimeout.constprop.0+0x6a>
    if (Timeout != HAL_MAX_DELAY)
 800285c:	1c6b      	adds	r3, r5, #1
 800285e:	d0f7      	beq.n	8002850 <UART_WaitOnFlagUntilTimeout.constprop.0+0xc>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002860:	b125      	cbz	r5, 800286c <UART_WaitOnFlagUntilTimeout.constprop.0+0x28>
 8002862:	f7fe fd11 	bl	8001288 <HAL_GetTick>
 8002866:	1bc0      	subs	r0, r0, r7
 8002868:	4285      	cmp	r5, r0
 800286a:	d2f0      	bcs.n	800284e <UART_WaitOnFlagUntilTimeout.constprop.0+0xa>
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800286c:	6822      	ldr	r2, [r4, #0]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800286e:	f102 030c 	add.w	r3, r2, #12
 8002872:	e853 3f00 	ldrex	r3, [r3]
 8002876:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800287a:	320c      	adds	r2, #12
 800287c:	e842 3000 	strex	r0, r3, [r2]
   return(result);
 8002880:	6821      	ldr	r1, [r4, #0]
 8002882:	2800      	cmp	r0, #0
 8002884:	d1f2      	bne.n	800286c <UART_WaitOnFlagUntilTimeout.constprop.0+0x28>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002886:	f101 0314 	add.w	r3, r1, #20
 800288a:	e853 3f00 	ldrex	r3, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800288e:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002892:	f101 0014 	add.w	r0, r1, #20
 8002896:	e840 3200 	strex	r2, r3, [r0]
 800289a:	2a00      	cmp	r2, #0
 800289c:	d1f3      	bne.n	8002886 <UART_WaitOnFlagUntilTimeout.constprop.0+0x42>
        huart->gState  = HAL_UART_STATE_READY;
 800289e:	2320      	movs	r3, #32
        __HAL_UNLOCK(huart);
 80028a0:	2003      	movs	r0, #3
        huart->gState  = HAL_UART_STATE_READY;
 80028a2:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
        __HAL_UNLOCK(huart);
 80028a6:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
        huart->RxState = HAL_UART_STATE_READY;
 80028aa:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
}
 80028ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080028b0 <HAL_UART_Init>:
{
 80028b0:	b510      	push	{r4, lr}
  if (huart == NULL)
 80028b2:	4604      	mov	r4, r0
 80028b4:	b348      	cbz	r0, 800290a <HAL_UART_Init+0x5a>
  if (huart->gState == HAL_UART_STATE_RESET)
 80028b6:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 80028ba:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80028be:	b91b      	cbnz	r3, 80028c8 <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 80028c0:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40
    HAL_UART_MspInit(huart);
 80028c4:	f7fe fbd4 	bl	8001070 <HAL_UART_MspInit>
  huart->gState = HAL_UART_STATE_BUSY;
 80028c8:	2324      	movs	r3, #36	; 0x24
  __HAL_UART_DISABLE(huart);
 80028ca:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 80028cc:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  __HAL_UART_DISABLE(huart);
 80028d0:	68d3      	ldr	r3, [r2, #12]
  UART_SetConfig(huart);
 80028d2:	4620      	mov	r0, r4
  __HAL_UART_DISABLE(huart);
 80028d4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80028d8:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 80028da:	f7ff ff79 	bl	80027d0 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80028de:	6823      	ldr	r3, [r4, #0]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80028e0:	2000      	movs	r0, #0
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80028e2:	691a      	ldr	r2, [r3, #16]
 80028e4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80028e8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80028ea:	695a      	ldr	r2, [r3, #20]
 80028ec:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80028f0:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 80028f2:	68da      	ldr	r2, [r3, #12]
 80028f4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80028f8:	60da      	str	r2, [r3, #12]
  huart->gState = HAL_UART_STATE_READY;
 80028fa:	2320      	movs	r3, #32
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80028fc:	6460      	str	r0, [r4, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 80028fe:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002902:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002906:	6360      	str	r0, [r4, #52]	; 0x34
}
 8002908:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 800290a:	2001      	movs	r0, #1
 800290c:	e7fc      	b.n	8002908 <HAL_UART_Init+0x58>

0800290e <HAL_UART_Transmit>:
{
 800290e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002912:	4699      	mov	r9, r3
  if (huart->gState == HAL_UART_STATE_READY)
 8002914:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
{
 8002918:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_READY)
 800291a:	2b20      	cmp	r3, #32
{
 800291c:	460e      	mov	r6, r1
 800291e:	4617      	mov	r7, r2
  if (huart->gState == HAL_UART_STATE_READY)
 8002920:	d13c      	bne.n	800299c <HAL_UART_Transmit+0x8e>
    if ((pData == NULL) || (Size == 0U))
 8002922:	2900      	cmp	r1, #0
 8002924:	d03c      	beq.n	80029a0 <HAL_UART_Transmit+0x92>
 8002926:	2a00      	cmp	r2, #0
 8002928:	d03a      	beq.n	80029a0 <HAL_UART_Transmit+0x92>
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800292a:	2321      	movs	r3, #33	; 0x21
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800292c:	2500      	movs	r5, #0
 800292e:	6445      	str	r5, [r0, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002930:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
    tickstart = HAL_GetTick();
 8002934:	f7fe fca8 	bl	8001288 <HAL_GetTick>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002938:	68a3      	ldr	r3, [r4, #8]
    tickstart = HAL_GetTick();
 800293a:	4680      	mov	r8, r0
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800293c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
    huart->TxXferSize = Size;
 8002940:	84a7      	strh	r7, [r4, #36]	; 0x24
    huart->TxXferCount = Size;
 8002942:	84e7      	strh	r7, [r4, #38]	; 0x26
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002944:	d103      	bne.n	800294e <HAL_UART_Transmit+0x40>
 8002946:	6923      	ldr	r3, [r4, #16]
 8002948:	b90b      	cbnz	r3, 800294e <HAL_UART_Transmit+0x40>
 800294a:	4635      	mov	r5, r6
      pdata8bits  = NULL;
 800294c:	461e      	mov	r6, r3
    while (huart->TxXferCount > 0U)
 800294e:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 8002950:	b29b      	uxth	r3, r3
 8002952:	b953      	cbnz	r3, 800296a <HAL_UART_Transmit+0x5c>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002954:	464b      	mov	r3, r9
 8002956:	4642      	mov	r2, r8
 8002958:	2140      	movs	r1, #64	; 0x40
 800295a:	4620      	mov	r0, r4
 800295c:	f7ff ff72 	bl	8002844 <UART_WaitOnFlagUntilTimeout.constprop.0>
 8002960:	b950      	cbnz	r0, 8002978 <HAL_UART_Transmit+0x6a>
    huart->gState = HAL_UART_STATE_READY;
 8002962:	2320      	movs	r3, #32
 8002964:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    return HAL_OK;
 8002968:	e007      	b.n	800297a <HAL_UART_Transmit+0x6c>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800296a:	464b      	mov	r3, r9
 800296c:	4642      	mov	r2, r8
 800296e:	2180      	movs	r1, #128	; 0x80
 8002970:	4620      	mov	r0, r4
 8002972:	f7ff ff67 	bl	8002844 <UART_WaitOnFlagUntilTimeout.constprop.0>
 8002976:	b110      	cbz	r0, 800297e <HAL_UART_Transmit+0x70>
        return HAL_TIMEOUT;
 8002978:	2003      	movs	r0, #3
}
 800297a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800297e:	6822      	ldr	r2, [r4, #0]
      if (pdata8bits == NULL)
 8002980:	b94e      	cbnz	r6, 8002996 <HAL_UART_Transmit+0x88>
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002982:	f835 3b02 	ldrh.w	r3, [r5], #2
 8002986:	f3c3 0308 	ubfx	r3, r3, #0, #9
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800298a:	6053      	str	r3, [r2, #4]
      huart->TxXferCount--;
 800298c:	8ce1      	ldrh	r1, [r4, #38]	; 0x26
 800298e:	3901      	subs	r1, #1
 8002990:	b289      	uxth	r1, r1
 8002992:	84e1      	strh	r1, [r4, #38]	; 0x26
 8002994:	e7db      	b.n	800294e <HAL_UART_Transmit+0x40>
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002996:	f816 3b01 	ldrb.w	r3, [r6], #1
 800299a:	e7f6      	b.n	800298a <HAL_UART_Transmit+0x7c>
    return HAL_BUSY;
 800299c:	2002      	movs	r0, #2
 800299e:	e7ec      	b.n	800297a <HAL_UART_Transmit+0x6c>
      return  HAL_ERROR;
 80029a0:	2001      	movs	r0, #1
 80029a2:	e7ea      	b.n	800297a <HAL_UART_Transmit+0x6c>

080029a4 <siprintf>:
 80029a4:	b40e      	push	{r1, r2, r3}
 80029a6:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80029aa:	b500      	push	{lr}
 80029ac:	b09c      	sub	sp, #112	; 0x70
 80029ae:	ab1d      	add	r3, sp, #116	; 0x74
 80029b0:	9002      	str	r0, [sp, #8]
 80029b2:	9006      	str	r0, [sp, #24]
 80029b4:	9107      	str	r1, [sp, #28]
 80029b6:	9104      	str	r1, [sp, #16]
 80029b8:	4808      	ldr	r0, [pc, #32]	; (80029dc <siprintf+0x38>)
 80029ba:	4909      	ldr	r1, [pc, #36]	; (80029e0 <siprintf+0x3c>)
 80029bc:	f853 2b04 	ldr.w	r2, [r3], #4
 80029c0:	9105      	str	r1, [sp, #20]
 80029c2:	6800      	ldr	r0, [r0, #0]
 80029c4:	a902      	add	r1, sp, #8
 80029c6:	9301      	str	r3, [sp, #4]
 80029c8:	f000 f98e 	bl	8002ce8 <_svfiprintf_r>
 80029cc:	2200      	movs	r2, #0
 80029ce:	9b02      	ldr	r3, [sp, #8]
 80029d0:	701a      	strb	r2, [r3, #0]
 80029d2:	b01c      	add	sp, #112	; 0x70
 80029d4:	f85d eb04 	ldr.w	lr, [sp], #4
 80029d8:	b003      	add	sp, #12
 80029da:	4770      	bx	lr
 80029dc:	2000005c 	.word	0x2000005c
 80029e0:	ffff0208 	.word	0xffff0208

080029e4 <memset>:
 80029e4:	4603      	mov	r3, r0
 80029e6:	4402      	add	r2, r0
 80029e8:	4293      	cmp	r3, r2
 80029ea:	d100      	bne.n	80029ee <memset+0xa>
 80029ec:	4770      	bx	lr
 80029ee:	f803 1b01 	strb.w	r1, [r3], #1
 80029f2:	e7f9      	b.n	80029e8 <memset+0x4>

080029f4 <__errno>:
 80029f4:	4b01      	ldr	r3, [pc, #4]	; (80029fc <__errno+0x8>)
 80029f6:	6818      	ldr	r0, [r3, #0]
 80029f8:	4770      	bx	lr
 80029fa:	bf00      	nop
 80029fc:	2000005c 	.word	0x2000005c

08002a00 <__libc_init_array>:
 8002a00:	b570      	push	{r4, r5, r6, lr}
 8002a02:	2600      	movs	r6, #0
 8002a04:	4d0c      	ldr	r5, [pc, #48]	; (8002a38 <__libc_init_array+0x38>)
 8002a06:	4c0d      	ldr	r4, [pc, #52]	; (8002a3c <__libc_init_array+0x3c>)
 8002a08:	1b64      	subs	r4, r4, r5
 8002a0a:	10a4      	asrs	r4, r4, #2
 8002a0c:	42a6      	cmp	r6, r4
 8002a0e:	d109      	bne.n	8002a24 <__libc_init_array+0x24>
 8002a10:	f000 fc7a 	bl	8003308 <_init>
 8002a14:	2600      	movs	r6, #0
 8002a16:	4d0a      	ldr	r5, [pc, #40]	; (8002a40 <__libc_init_array+0x40>)
 8002a18:	4c0a      	ldr	r4, [pc, #40]	; (8002a44 <__libc_init_array+0x44>)
 8002a1a:	1b64      	subs	r4, r4, r5
 8002a1c:	10a4      	asrs	r4, r4, #2
 8002a1e:	42a6      	cmp	r6, r4
 8002a20:	d105      	bne.n	8002a2e <__libc_init_array+0x2e>
 8002a22:	bd70      	pop	{r4, r5, r6, pc}
 8002a24:	f855 3b04 	ldr.w	r3, [r5], #4
 8002a28:	4798      	blx	r3
 8002a2a:	3601      	adds	r6, #1
 8002a2c:	e7ee      	b.n	8002a0c <__libc_init_array+0xc>
 8002a2e:	f855 3b04 	ldr.w	r3, [r5], #4
 8002a32:	4798      	blx	r3
 8002a34:	3601      	adds	r6, #1
 8002a36:	e7f2      	b.n	8002a1e <__libc_init_array+0x1e>
 8002a38:	08003388 	.word	0x08003388
 8002a3c:	08003388 	.word	0x08003388
 8002a40:	08003388 	.word	0x08003388
 8002a44:	0800338c 	.word	0x0800338c

08002a48 <__retarget_lock_acquire_recursive>:
 8002a48:	4770      	bx	lr

08002a4a <__retarget_lock_release_recursive>:
 8002a4a:	4770      	bx	lr

08002a4c <_free_r>:
 8002a4c:	b538      	push	{r3, r4, r5, lr}
 8002a4e:	4605      	mov	r5, r0
 8002a50:	2900      	cmp	r1, #0
 8002a52:	d040      	beq.n	8002ad6 <_free_r+0x8a>
 8002a54:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002a58:	1f0c      	subs	r4, r1, #4
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	bfb8      	it	lt
 8002a5e:	18e4      	addlt	r4, r4, r3
 8002a60:	f000 f8dc 	bl	8002c1c <__malloc_lock>
 8002a64:	4a1c      	ldr	r2, [pc, #112]	; (8002ad8 <_free_r+0x8c>)
 8002a66:	6813      	ldr	r3, [r2, #0]
 8002a68:	b933      	cbnz	r3, 8002a78 <_free_r+0x2c>
 8002a6a:	6063      	str	r3, [r4, #4]
 8002a6c:	6014      	str	r4, [r2, #0]
 8002a6e:	4628      	mov	r0, r5
 8002a70:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002a74:	f000 b8d8 	b.w	8002c28 <__malloc_unlock>
 8002a78:	42a3      	cmp	r3, r4
 8002a7a:	d908      	bls.n	8002a8e <_free_r+0x42>
 8002a7c:	6820      	ldr	r0, [r4, #0]
 8002a7e:	1821      	adds	r1, r4, r0
 8002a80:	428b      	cmp	r3, r1
 8002a82:	bf01      	itttt	eq
 8002a84:	6819      	ldreq	r1, [r3, #0]
 8002a86:	685b      	ldreq	r3, [r3, #4]
 8002a88:	1809      	addeq	r1, r1, r0
 8002a8a:	6021      	streq	r1, [r4, #0]
 8002a8c:	e7ed      	b.n	8002a6a <_free_r+0x1e>
 8002a8e:	461a      	mov	r2, r3
 8002a90:	685b      	ldr	r3, [r3, #4]
 8002a92:	b10b      	cbz	r3, 8002a98 <_free_r+0x4c>
 8002a94:	42a3      	cmp	r3, r4
 8002a96:	d9fa      	bls.n	8002a8e <_free_r+0x42>
 8002a98:	6811      	ldr	r1, [r2, #0]
 8002a9a:	1850      	adds	r0, r2, r1
 8002a9c:	42a0      	cmp	r0, r4
 8002a9e:	d10b      	bne.n	8002ab8 <_free_r+0x6c>
 8002aa0:	6820      	ldr	r0, [r4, #0]
 8002aa2:	4401      	add	r1, r0
 8002aa4:	1850      	adds	r0, r2, r1
 8002aa6:	4283      	cmp	r3, r0
 8002aa8:	6011      	str	r1, [r2, #0]
 8002aaa:	d1e0      	bne.n	8002a6e <_free_r+0x22>
 8002aac:	6818      	ldr	r0, [r3, #0]
 8002aae:	685b      	ldr	r3, [r3, #4]
 8002ab0:	4408      	add	r0, r1
 8002ab2:	6010      	str	r0, [r2, #0]
 8002ab4:	6053      	str	r3, [r2, #4]
 8002ab6:	e7da      	b.n	8002a6e <_free_r+0x22>
 8002ab8:	d902      	bls.n	8002ac0 <_free_r+0x74>
 8002aba:	230c      	movs	r3, #12
 8002abc:	602b      	str	r3, [r5, #0]
 8002abe:	e7d6      	b.n	8002a6e <_free_r+0x22>
 8002ac0:	6820      	ldr	r0, [r4, #0]
 8002ac2:	1821      	adds	r1, r4, r0
 8002ac4:	428b      	cmp	r3, r1
 8002ac6:	bf01      	itttt	eq
 8002ac8:	6819      	ldreq	r1, [r3, #0]
 8002aca:	685b      	ldreq	r3, [r3, #4]
 8002acc:	1809      	addeq	r1, r1, r0
 8002ace:	6021      	streq	r1, [r4, #0]
 8002ad0:	6063      	str	r3, [r4, #4]
 8002ad2:	6054      	str	r4, [r2, #4]
 8002ad4:	e7cb      	b.n	8002a6e <_free_r+0x22>
 8002ad6:	bd38      	pop	{r3, r4, r5, pc}
 8002ad8:	2000037c 	.word	0x2000037c

08002adc <sbrk_aligned>:
 8002adc:	b570      	push	{r4, r5, r6, lr}
 8002ade:	4e0e      	ldr	r6, [pc, #56]	; (8002b18 <sbrk_aligned+0x3c>)
 8002ae0:	460c      	mov	r4, r1
 8002ae2:	6831      	ldr	r1, [r6, #0]
 8002ae4:	4605      	mov	r5, r0
 8002ae6:	b911      	cbnz	r1, 8002aee <sbrk_aligned+0x12>
 8002ae8:	f000 fbaa 	bl	8003240 <_sbrk_r>
 8002aec:	6030      	str	r0, [r6, #0]
 8002aee:	4621      	mov	r1, r4
 8002af0:	4628      	mov	r0, r5
 8002af2:	f000 fba5 	bl	8003240 <_sbrk_r>
 8002af6:	1c43      	adds	r3, r0, #1
 8002af8:	d00a      	beq.n	8002b10 <sbrk_aligned+0x34>
 8002afa:	1cc4      	adds	r4, r0, #3
 8002afc:	f024 0403 	bic.w	r4, r4, #3
 8002b00:	42a0      	cmp	r0, r4
 8002b02:	d007      	beq.n	8002b14 <sbrk_aligned+0x38>
 8002b04:	1a21      	subs	r1, r4, r0
 8002b06:	4628      	mov	r0, r5
 8002b08:	f000 fb9a 	bl	8003240 <_sbrk_r>
 8002b0c:	3001      	adds	r0, #1
 8002b0e:	d101      	bne.n	8002b14 <sbrk_aligned+0x38>
 8002b10:	f04f 34ff 	mov.w	r4, #4294967295
 8002b14:	4620      	mov	r0, r4
 8002b16:	bd70      	pop	{r4, r5, r6, pc}
 8002b18:	20000380 	.word	0x20000380

08002b1c <_malloc_r>:
 8002b1c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002b20:	1ccd      	adds	r5, r1, #3
 8002b22:	f025 0503 	bic.w	r5, r5, #3
 8002b26:	3508      	adds	r5, #8
 8002b28:	2d0c      	cmp	r5, #12
 8002b2a:	bf38      	it	cc
 8002b2c:	250c      	movcc	r5, #12
 8002b2e:	2d00      	cmp	r5, #0
 8002b30:	4607      	mov	r7, r0
 8002b32:	db01      	blt.n	8002b38 <_malloc_r+0x1c>
 8002b34:	42a9      	cmp	r1, r5
 8002b36:	d905      	bls.n	8002b44 <_malloc_r+0x28>
 8002b38:	230c      	movs	r3, #12
 8002b3a:	2600      	movs	r6, #0
 8002b3c:	603b      	str	r3, [r7, #0]
 8002b3e:	4630      	mov	r0, r6
 8002b40:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002b44:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8002c18 <_malloc_r+0xfc>
 8002b48:	f000 f868 	bl	8002c1c <__malloc_lock>
 8002b4c:	f8d8 3000 	ldr.w	r3, [r8]
 8002b50:	461c      	mov	r4, r3
 8002b52:	bb5c      	cbnz	r4, 8002bac <_malloc_r+0x90>
 8002b54:	4629      	mov	r1, r5
 8002b56:	4638      	mov	r0, r7
 8002b58:	f7ff ffc0 	bl	8002adc <sbrk_aligned>
 8002b5c:	1c43      	adds	r3, r0, #1
 8002b5e:	4604      	mov	r4, r0
 8002b60:	d155      	bne.n	8002c0e <_malloc_r+0xf2>
 8002b62:	f8d8 4000 	ldr.w	r4, [r8]
 8002b66:	4626      	mov	r6, r4
 8002b68:	2e00      	cmp	r6, #0
 8002b6a:	d145      	bne.n	8002bf8 <_malloc_r+0xdc>
 8002b6c:	2c00      	cmp	r4, #0
 8002b6e:	d048      	beq.n	8002c02 <_malloc_r+0xe6>
 8002b70:	6823      	ldr	r3, [r4, #0]
 8002b72:	4631      	mov	r1, r6
 8002b74:	4638      	mov	r0, r7
 8002b76:	eb04 0903 	add.w	r9, r4, r3
 8002b7a:	f000 fb61 	bl	8003240 <_sbrk_r>
 8002b7e:	4581      	cmp	r9, r0
 8002b80:	d13f      	bne.n	8002c02 <_malloc_r+0xe6>
 8002b82:	6821      	ldr	r1, [r4, #0]
 8002b84:	4638      	mov	r0, r7
 8002b86:	1a6d      	subs	r5, r5, r1
 8002b88:	4629      	mov	r1, r5
 8002b8a:	f7ff ffa7 	bl	8002adc <sbrk_aligned>
 8002b8e:	3001      	adds	r0, #1
 8002b90:	d037      	beq.n	8002c02 <_malloc_r+0xe6>
 8002b92:	6823      	ldr	r3, [r4, #0]
 8002b94:	442b      	add	r3, r5
 8002b96:	6023      	str	r3, [r4, #0]
 8002b98:	f8d8 3000 	ldr.w	r3, [r8]
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d038      	beq.n	8002c12 <_malloc_r+0xf6>
 8002ba0:	685a      	ldr	r2, [r3, #4]
 8002ba2:	42a2      	cmp	r2, r4
 8002ba4:	d12b      	bne.n	8002bfe <_malloc_r+0xe2>
 8002ba6:	2200      	movs	r2, #0
 8002ba8:	605a      	str	r2, [r3, #4]
 8002baa:	e00f      	b.n	8002bcc <_malloc_r+0xb0>
 8002bac:	6822      	ldr	r2, [r4, #0]
 8002bae:	1b52      	subs	r2, r2, r5
 8002bb0:	d41f      	bmi.n	8002bf2 <_malloc_r+0xd6>
 8002bb2:	2a0b      	cmp	r2, #11
 8002bb4:	d917      	bls.n	8002be6 <_malloc_r+0xca>
 8002bb6:	1961      	adds	r1, r4, r5
 8002bb8:	42a3      	cmp	r3, r4
 8002bba:	6025      	str	r5, [r4, #0]
 8002bbc:	bf18      	it	ne
 8002bbe:	6059      	strne	r1, [r3, #4]
 8002bc0:	6863      	ldr	r3, [r4, #4]
 8002bc2:	bf08      	it	eq
 8002bc4:	f8c8 1000 	streq.w	r1, [r8]
 8002bc8:	5162      	str	r2, [r4, r5]
 8002bca:	604b      	str	r3, [r1, #4]
 8002bcc:	4638      	mov	r0, r7
 8002bce:	f104 060b 	add.w	r6, r4, #11
 8002bd2:	f000 f829 	bl	8002c28 <__malloc_unlock>
 8002bd6:	f026 0607 	bic.w	r6, r6, #7
 8002bda:	1d23      	adds	r3, r4, #4
 8002bdc:	1af2      	subs	r2, r6, r3
 8002bde:	d0ae      	beq.n	8002b3e <_malloc_r+0x22>
 8002be0:	1b9b      	subs	r3, r3, r6
 8002be2:	50a3      	str	r3, [r4, r2]
 8002be4:	e7ab      	b.n	8002b3e <_malloc_r+0x22>
 8002be6:	42a3      	cmp	r3, r4
 8002be8:	6862      	ldr	r2, [r4, #4]
 8002bea:	d1dd      	bne.n	8002ba8 <_malloc_r+0x8c>
 8002bec:	f8c8 2000 	str.w	r2, [r8]
 8002bf0:	e7ec      	b.n	8002bcc <_malloc_r+0xb0>
 8002bf2:	4623      	mov	r3, r4
 8002bf4:	6864      	ldr	r4, [r4, #4]
 8002bf6:	e7ac      	b.n	8002b52 <_malloc_r+0x36>
 8002bf8:	4634      	mov	r4, r6
 8002bfa:	6876      	ldr	r6, [r6, #4]
 8002bfc:	e7b4      	b.n	8002b68 <_malloc_r+0x4c>
 8002bfe:	4613      	mov	r3, r2
 8002c00:	e7cc      	b.n	8002b9c <_malloc_r+0x80>
 8002c02:	230c      	movs	r3, #12
 8002c04:	4638      	mov	r0, r7
 8002c06:	603b      	str	r3, [r7, #0]
 8002c08:	f000 f80e 	bl	8002c28 <__malloc_unlock>
 8002c0c:	e797      	b.n	8002b3e <_malloc_r+0x22>
 8002c0e:	6025      	str	r5, [r4, #0]
 8002c10:	e7dc      	b.n	8002bcc <_malloc_r+0xb0>
 8002c12:	605b      	str	r3, [r3, #4]
 8002c14:	deff      	udf	#255	; 0xff
 8002c16:	bf00      	nop
 8002c18:	2000037c 	.word	0x2000037c

08002c1c <__malloc_lock>:
 8002c1c:	4801      	ldr	r0, [pc, #4]	; (8002c24 <__malloc_lock+0x8>)
 8002c1e:	f7ff bf13 	b.w	8002a48 <__retarget_lock_acquire_recursive>
 8002c22:	bf00      	nop
 8002c24:	20000378 	.word	0x20000378

08002c28 <__malloc_unlock>:
 8002c28:	4801      	ldr	r0, [pc, #4]	; (8002c30 <__malloc_unlock+0x8>)
 8002c2a:	f7ff bf0e 	b.w	8002a4a <__retarget_lock_release_recursive>
 8002c2e:	bf00      	nop
 8002c30:	20000378 	.word	0x20000378

08002c34 <__ssputs_r>:
 8002c34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002c38:	461f      	mov	r7, r3
 8002c3a:	688e      	ldr	r6, [r1, #8]
 8002c3c:	4682      	mov	sl, r0
 8002c3e:	42be      	cmp	r6, r7
 8002c40:	460c      	mov	r4, r1
 8002c42:	4690      	mov	r8, r2
 8002c44:	680b      	ldr	r3, [r1, #0]
 8002c46:	d82c      	bhi.n	8002ca2 <__ssputs_r+0x6e>
 8002c48:	898a      	ldrh	r2, [r1, #12]
 8002c4a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8002c4e:	d026      	beq.n	8002c9e <__ssputs_r+0x6a>
 8002c50:	6965      	ldr	r5, [r4, #20]
 8002c52:	6909      	ldr	r1, [r1, #16]
 8002c54:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8002c58:	eba3 0901 	sub.w	r9, r3, r1
 8002c5c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8002c60:	1c7b      	adds	r3, r7, #1
 8002c62:	444b      	add	r3, r9
 8002c64:	106d      	asrs	r5, r5, #1
 8002c66:	429d      	cmp	r5, r3
 8002c68:	bf38      	it	cc
 8002c6a:	461d      	movcc	r5, r3
 8002c6c:	0553      	lsls	r3, r2, #21
 8002c6e:	d527      	bpl.n	8002cc0 <__ssputs_r+0x8c>
 8002c70:	4629      	mov	r1, r5
 8002c72:	f7ff ff53 	bl	8002b1c <_malloc_r>
 8002c76:	4606      	mov	r6, r0
 8002c78:	b360      	cbz	r0, 8002cd4 <__ssputs_r+0xa0>
 8002c7a:	464a      	mov	r2, r9
 8002c7c:	6921      	ldr	r1, [r4, #16]
 8002c7e:	f000 fafd 	bl	800327c <memcpy>
 8002c82:	89a3      	ldrh	r3, [r4, #12]
 8002c84:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8002c88:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002c8c:	81a3      	strh	r3, [r4, #12]
 8002c8e:	6126      	str	r6, [r4, #16]
 8002c90:	444e      	add	r6, r9
 8002c92:	6026      	str	r6, [r4, #0]
 8002c94:	463e      	mov	r6, r7
 8002c96:	6165      	str	r5, [r4, #20]
 8002c98:	eba5 0509 	sub.w	r5, r5, r9
 8002c9c:	60a5      	str	r5, [r4, #8]
 8002c9e:	42be      	cmp	r6, r7
 8002ca0:	d900      	bls.n	8002ca4 <__ssputs_r+0x70>
 8002ca2:	463e      	mov	r6, r7
 8002ca4:	4632      	mov	r2, r6
 8002ca6:	4641      	mov	r1, r8
 8002ca8:	6820      	ldr	r0, [r4, #0]
 8002caa:	f000 faaf 	bl	800320c <memmove>
 8002cae:	2000      	movs	r0, #0
 8002cb0:	68a3      	ldr	r3, [r4, #8]
 8002cb2:	1b9b      	subs	r3, r3, r6
 8002cb4:	60a3      	str	r3, [r4, #8]
 8002cb6:	6823      	ldr	r3, [r4, #0]
 8002cb8:	4433      	add	r3, r6
 8002cba:	6023      	str	r3, [r4, #0]
 8002cbc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002cc0:	462a      	mov	r2, r5
 8002cc2:	f000 fae9 	bl	8003298 <_realloc_r>
 8002cc6:	4606      	mov	r6, r0
 8002cc8:	2800      	cmp	r0, #0
 8002cca:	d1e0      	bne.n	8002c8e <__ssputs_r+0x5a>
 8002ccc:	4650      	mov	r0, sl
 8002cce:	6921      	ldr	r1, [r4, #16]
 8002cd0:	f7ff febc 	bl	8002a4c <_free_r>
 8002cd4:	230c      	movs	r3, #12
 8002cd6:	f8ca 3000 	str.w	r3, [sl]
 8002cda:	89a3      	ldrh	r3, [r4, #12]
 8002cdc:	f04f 30ff 	mov.w	r0, #4294967295
 8002ce0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002ce4:	81a3      	strh	r3, [r4, #12]
 8002ce6:	e7e9      	b.n	8002cbc <__ssputs_r+0x88>

08002ce8 <_svfiprintf_r>:
 8002ce8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002cec:	4698      	mov	r8, r3
 8002cee:	898b      	ldrh	r3, [r1, #12]
 8002cf0:	4607      	mov	r7, r0
 8002cf2:	061b      	lsls	r3, r3, #24
 8002cf4:	460d      	mov	r5, r1
 8002cf6:	4614      	mov	r4, r2
 8002cf8:	b09d      	sub	sp, #116	; 0x74
 8002cfa:	d50e      	bpl.n	8002d1a <_svfiprintf_r+0x32>
 8002cfc:	690b      	ldr	r3, [r1, #16]
 8002cfe:	b963      	cbnz	r3, 8002d1a <_svfiprintf_r+0x32>
 8002d00:	2140      	movs	r1, #64	; 0x40
 8002d02:	f7ff ff0b 	bl	8002b1c <_malloc_r>
 8002d06:	6028      	str	r0, [r5, #0]
 8002d08:	6128      	str	r0, [r5, #16]
 8002d0a:	b920      	cbnz	r0, 8002d16 <_svfiprintf_r+0x2e>
 8002d0c:	230c      	movs	r3, #12
 8002d0e:	603b      	str	r3, [r7, #0]
 8002d10:	f04f 30ff 	mov.w	r0, #4294967295
 8002d14:	e0d0      	b.n	8002eb8 <_svfiprintf_r+0x1d0>
 8002d16:	2340      	movs	r3, #64	; 0x40
 8002d18:	616b      	str	r3, [r5, #20]
 8002d1a:	2300      	movs	r3, #0
 8002d1c:	9309      	str	r3, [sp, #36]	; 0x24
 8002d1e:	2320      	movs	r3, #32
 8002d20:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8002d24:	2330      	movs	r3, #48	; 0x30
 8002d26:	f04f 0901 	mov.w	r9, #1
 8002d2a:	f8cd 800c 	str.w	r8, [sp, #12]
 8002d2e:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 8002ed0 <_svfiprintf_r+0x1e8>
 8002d32:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8002d36:	4623      	mov	r3, r4
 8002d38:	469a      	mov	sl, r3
 8002d3a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002d3e:	b10a      	cbz	r2, 8002d44 <_svfiprintf_r+0x5c>
 8002d40:	2a25      	cmp	r2, #37	; 0x25
 8002d42:	d1f9      	bne.n	8002d38 <_svfiprintf_r+0x50>
 8002d44:	ebba 0b04 	subs.w	fp, sl, r4
 8002d48:	d00b      	beq.n	8002d62 <_svfiprintf_r+0x7a>
 8002d4a:	465b      	mov	r3, fp
 8002d4c:	4622      	mov	r2, r4
 8002d4e:	4629      	mov	r1, r5
 8002d50:	4638      	mov	r0, r7
 8002d52:	f7ff ff6f 	bl	8002c34 <__ssputs_r>
 8002d56:	3001      	adds	r0, #1
 8002d58:	f000 80a9 	beq.w	8002eae <_svfiprintf_r+0x1c6>
 8002d5c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002d5e:	445a      	add	r2, fp
 8002d60:	9209      	str	r2, [sp, #36]	; 0x24
 8002d62:	f89a 3000 	ldrb.w	r3, [sl]
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	f000 80a1 	beq.w	8002eae <_svfiprintf_r+0x1c6>
 8002d6c:	2300      	movs	r3, #0
 8002d6e:	f04f 32ff 	mov.w	r2, #4294967295
 8002d72:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002d76:	f10a 0a01 	add.w	sl, sl, #1
 8002d7a:	9304      	str	r3, [sp, #16]
 8002d7c:	9307      	str	r3, [sp, #28]
 8002d7e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8002d82:	931a      	str	r3, [sp, #104]	; 0x68
 8002d84:	4654      	mov	r4, sl
 8002d86:	2205      	movs	r2, #5
 8002d88:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002d8c:	4850      	ldr	r0, [pc, #320]	; (8002ed0 <_svfiprintf_r+0x1e8>)
 8002d8e:	f000 fa67 	bl	8003260 <memchr>
 8002d92:	9a04      	ldr	r2, [sp, #16]
 8002d94:	b9d8      	cbnz	r0, 8002dce <_svfiprintf_r+0xe6>
 8002d96:	06d0      	lsls	r0, r2, #27
 8002d98:	bf44      	itt	mi
 8002d9a:	2320      	movmi	r3, #32
 8002d9c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002da0:	0711      	lsls	r1, r2, #28
 8002da2:	bf44      	itt	mi
 8002da4:	232b      	movmi	r3, #43	; 0x2b
 8002da6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002daa:	f89a 3000 	ldrb.w	r3, [sl]
 8002dae:	2b2a      	cmp	r3, #42	; 0x2a
 8002db0:	d015      	beq.n	8002dde <_svfiprintf_r+0xf6>
 8002db2:	4654      	mov	r4, sl
 8002db4:	2000      	movs	r0, #0
 8002db6:	f04f 0c0a 	mov.w	ip, #10
 8002dba:	9a07      	ldr	r2, [sp, #28]
 8002dbc:	4621      	mov	r1, r4
 8002dbe:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002dc2:	3b30      	subs	r3, #48	; 0x30
 8002dc4:	2b09      	cmp	r3, #9
 8002dc6:	d94d      	bls.n	8002e64 <_svfiprintf_r+0x17c>
 8002dc8:	b1b0      	cbz	r0, 8002df8 <_svfiprintf_r+0x110>
 8002dca:	9207      	str	r2, [sp, #28]
 8002dcc:	e014      	b.n	8002df8 <_svfiprintf_r+0x110>
 8002dce:	eba0 0308 	sub.w	r3, r0, r8
 8002dd2:	fa09 f303 	lsl.w	r3, r9, r3
 8002dd6:	4313      	orrs	r3, r2
 8002dd8:	46a2      	mov	sl, r4
 8002dda:	9304      	str	r3, [sp, #16]
 8002ddc:	e7d2      	b.n	8002d84 <_svfiprintf_r+0x9c>
 8002dde:	9b03      	ldr	r3, [sp, #12]
 8002de0:	1d19      	adds	r1, r3, #4
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	9103      	str	r1, [sp, #12]
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	bfbb      	ittet	lt
 8002dea:	425b      	neglt	r3, r3
 8002dec:	f042 0202 	orrlt.w	r2, r2, #2
 8002df0:	9307      	strge	r3, [sp, #28]
 8002df2:	9307      	strlt	r3, [sp, #28]
 8002df4:	bfb8      	it	lt
 8002df6:	9204      	strlt	r2, [sp, #16]
 8002df8:	7823      	ldrb	r3, [r4, #0]
 8002dfa:	2b2e      	cmp	r3, #46	; 0x2e
 8002dfc:	d10c      	bne.n	8002e18 <_svfiprintf_r+0x130>
 8002dfe:	7863      	ldrb	r3, [r4, #1]
 8002e00:	2b2a      	cmp	r3, #42	; 0x2a
 8002e02:	d134      	bne.n	8002e6e <_svfiprintf_r+0x186>
 8002e04:	9b03      	ldr	r3, [sp, #12]
 8002e06:	3402      	adds	r4, #2
 8002e08:	1d1a      	adds	r2, r3, #4
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	9203      	str	r2, [sp, #12]
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	bfb8      	it	lt
 8002e12:	f04f 33ff 	movlt.w	r3, #4294967295
 8002e16:	9305      	str	r3, [sp, #20]
 8002e18:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 8002ed4 <_svfiprintf_r+0x1ec>
 8002e1c:	2203      	movs	r2, #3
 8002e1e:	4650      	mov	r0, sl
 8002e20:	7821      	ldrb	r1, [r4, #0]
 8002e22:	f000 fa1d 	bl	8003260 <memchr>
 8002e26:	b138      	cbz	r0, 8002e38 <_svfiprintf_r+0x150>
 8002e28:	2240      	movs	r2, #64	; 0x40
 8002e2a:	9b04      	ldr	r3, [sp, #16]
 8002e2c:	eba0 000a 	sub.w	r0, r0, sl
 8002e30:	4082      	lsls	r2, r0
 8002e32:	4313      	orrs	r3, r2
 8002e34:	3401      	adds	r4, #1
 8002e36:	9304      	str	r3, [sp, #16]
 8002e38:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002e3c:	2206      	movs	r2, #6
 8002e3e:	4826      	ldr	r0, [pc, #152]	; (8002ed8 <_svfiprintf_r+0x1f0>)
 8002e40:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8002e44:	f000 fa0c 	bl	8003260 <memchr>
 8002e48:	2800      	cmp	r0, #0
 8002e4a:	d038      	beq.n	8002ebe <_svfiprintf_r+0x1d6>
 8002e4c:	4b23      	ldr	r3, [pc, #140]	; (8002edc <_svfiprintf_r+0x1f4>)
 8002e4e:	bb1b      	cbnz	r3, 8002e98 <_svfiprintf_r+0x1b0>
 8002e50:	9b03      	ldr	r3, [sp, #12]
 8002e52:	3307      	adds	r3, #7
 8002e54:	f023 0307 	bic.w	r3, r3, #7
 8002e58:	3308      	adds	r3, #8
 8002e5a:	9303      	str	r3, [sp, #12]
 8002e5c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002e5e:	4433      	add	r3, r6
 8002e60:	9309      	str	r3, [sp, #36]	; 0x24
 8002e62:	e768      	b.n	8002d36 <_svfiprintf_r+0x4e>
 8002e64:	460c      	mov	r4, r1
 8002e66:	2001      	movs	r0, #1
 8002e68:	fb0c 3202 	mla	r2, ip, r2, r3
 8002e6c:	e7a6      	b.n	8002dbc <_svfiprintf_r+0xd4>
 8002e6e:	2300      	movs	r3, #0
 8002e70:	f04f 0c0a 	mov.w	ip, #10
 8002e74:	4619      	mov	r1, r3
 8002e76:	3401      	adds	r4, #1
 8002e78:	9305      	str	r3, [sp, #20]
 8002e7a:	4620      	mov	r0, r4
 8002e7c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002e80:	3a30      	subs	r2, #48	; 0x30
 8002e82:	2a09      	cmp	r2, #9
 8002e84:	d903      	bls.n	8002e8e <_svfiprintf_r+0x1a6>
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d0c6      	beq.n	8002e18 <_svfiprintf_r+0x130>
 8002e8a:	9105      	str	r1, [sp, #20]
 8002e8c:	e7c4      	b.n	8002e18 <_svfiprintf_r+0x130>
 8002e8e:	4604      	mov	r4, r0
 8002e90:	2301      	movs	r3, #1
 8002e92:	fb0c 2101 	mla	r1, ip, r1, r2
 8002e96:	e7f0      	b.n	8002e7a <_svfiprintf_r+0x192>
 8002e98:	ab03      	add	r3, sp, #12
 8002e9a:	9300      	str	r3, [sp, #0]
 8002e9c:	462a      	mov	r2, r5
 8002e9e:	4638      	mov	r0, r7
 8002ea0:	4b0f      	ldr	r3, [pc, #60]	; (8002ee0 <_svfiprintf_r+0x1f8>)
 8002ea2:	a904      	add	r1, sp, #16
 8002ea4:	f3af 8000 	nop.w
 8002ea8:	1c42      	adds	r2, r0, #1
 8002eaa:	4606      	mov	r6, r0
 8002eac:	d1d6      	bne.n	8002e5c <_svfiprintf_r+0x174>
 8002eae:	89ab      	ldrh	r3, [r5, #12]
 8002eb0:	065b      	lsls	r3, r3, #25
 8002eb2:	f53f af2d 	bmi.w	8002d10 <_svfiprintf_r+0x28>
 8002eb6:	9809      	ldr	r0, [sp, #36]	; 0x24
 8002eb8:	b01d      	add	sp, #116	; 0x74
 8002eba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002ebe:	ab03      	add	r3, sp, #12
 8002ec0:	9300      	str	r3, [sp, #0]
 8002ec2:	462a      	mov	r2, r5
 8002ec4:	4638      	mov	r0, r7
 8002ec6:	4b06      	ldr	r3, [pc, #24]	; (8002ee0 <_svfiprintf_r+0x1f8>)
 8002ec8:	a904      	add	r1, sp, #16
 8002eca:	f000 f87d 	bl	8002fc8 <_printf_i>
 8002ece:	e7eb      	b.n	8002ea8 <_svfiprintf_r+0x1c0>
 8002ed0:	08003355 	.word	0x08003355
 8002ed4:	0800335b 	.word	0x0800335b
 8002ed8:	0800335f 	.word	0x0800335f
 8002edc:	00000000 	.word	0x00000000
 8002ee0:	08002c35 	.word	0x08002c35

08002ee4 <_printf_common>:
 8002ee4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002ee8:	4616      	mov	r6, r2
 8002eea:	4699      	mov	r9, r3
 8002eec:	688a      	ldr	r2, [r1, #8]
 8002eee:	690b      	ldr	r3, [r1, #16]
 8002ef0:	4607      	mov	r7, r0
 8002ef2:	4293      	cmp	r3, r2
 8002ef4:	bfb8      	it	lt
 8002ef6:	4613      	movlt	r3, r2
 8002ef8:	6033      	str	r3, [r6, #0]
 8002efa:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8002efe:	460c      	mov	r4, r1
 8002f00:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8002f04:	b10a      	cbz	r2, 8002f0a <_printf_common+0x26>
 8002f06:	3301      	adds	r3, #1
 8002f08:	6033      	str	r3, [r6, #0]
 8002f0a:	6823      	ldr	r3, [r4, #0]
 8002f0c:	0699      	lsls	r1, r3, #26
 8002f0e:	bf42      	ittt	mi
 8002f10:	6833      	ldrmi	r3, [r6, #0]
 8002f12:	3302      	addmi	r3, #2
 8002f14:	6033      	strmi	r3, [r6, #0]
 8002f16:	6825      	ldr	r5, [r4, #0]
 8002f18:	f015 0506 	ands.w	r5, r5, #6
 8002f1c:	d106      	bne.n	8002f2c <_printf_common+0x48>
 8002f1e:	f104 0a19 	add.w	sl, r4, #25
 8002f22:	68e3      	ldr	r3, [r4, #12]
 8002f24:	6832      	ldr	r2, [r6, #0]
 8002f26:	1a9b      	subs	r3, r3, r2
 8002f28:	42ab      	cmp	r3, r5
 8002f2a:	dc2b      	bgt.n	8002f84 <_printf_common+0xa0>
 8002f2c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8002f30:	1e13      	subs	r3, r2, #0
 8002f32:	6822      	ldr	r2, [r4, #0]
 8002f34:	bf18      	it	ne
 8002f36:	2301      	movne	r3, #1
 8002f38:	0692      	lsls	r2, r2, #26
 8002f3a:	d430      	bmi.n	8002f9e <_printf_common+0xba>
 8002f3c:	4649      	mov	r1, r9
 8002f3e:	4638      	mov	r0, r7
 8002f40:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002f44:	47c0      	blx	r8
 8002f46:	3001      	adds	r0, #1
 8002f48:	d023      	beq.n	8002f92 <_printf_common+0xae>
 8002f4a:	6823      	ldr	r3, [r4, #0]
 8002f4c:	6922      	ldr	r2, [r4, #16]
 8002f4e:	f003 0306 	and.w	r3, r3, #6
 8002f52:	2b04      	cmp	r3, #4
 8002f54:	bf14      	ite	ne
 8002f56:	2500      	movne	r5, #0
 8002f58:	6833      	ldreq	r3, [r6, #0]
 8002f5a:	f04f 0600 	mov.w	r6, #0
 8002f5e:	bf08      	it	eq
 8002f60:	68e5      	ldreq	r5, [r4, #12]
 8002f62:	f104 041a 	add.w	r4, r4, #26
 8002f66:	bf08      	it	eq
 8002f68:	1aed      	subeq	r5, r5, r3
 8002f6a:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8002f6e:	bf08      	it	eq
 8002f70:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002f74:	4293      	cmp	r3, r2
 8002f76:	bfc4      	itt	gt
 8002f78:	1a9b      	subgt	r3, r3, r2
 8002f7a:	18ed      	addgt	r5, r5, r3
 8002f7c:	42b5      	cmp	r5, r6
 8002f7e:	d11a      	bne.n	8002fb6 <_printf_common+0xd2>
 8002f80:	2000      	movs	r0, #0
 8002f82:	e008      	b.n	8002f96 <_printf_common+0xb2>
 8002f84:	2301      	movs	r3, #1
 8002f86:	4652      	mov	r2, sl
 8002f88:	4649      	mov	r1, r9
 8002f8a:	4638      	mov	r0, r7
 8002f8c:	47c0      	blx	r8
 8002f8e:	3001      	adds	r0, #1
 8002f90:	d103      	bne.n	8002f9a <_printf_common+0xb6>
 8002f92:	f04f 30ff 	mov.w	r0, #4294967295
 8002f96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002f9a:	3501      	adds	r5, #1
 8002f9c:	e7c1      	b.n	8002f22 <_printf_common+0x3e>
 8002f9e:	2030      	movs	r0, #48	; 0x30
 8002fa0:	18e1      	adds	r1, r4, r3
 8002fa2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8002fa6:	1c5a      	adds	r2, r3, #1
 8002fa8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8002fac:	4422      	add	r2, r4
 8002fae:	3302      	adds	r3, #2
 8002fb0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8002fb4:	e7c2      	b.n	8002f3c <_printf_common+0x58>
 8002fb6:	2301      	movs	r3, #1
 8002fb8:	4622      	mov	r2, r4
 8002fba:	4649      	mov	r1, r9
 8002fbc:	4638      	mov	r0, r7
 8002fbe:	47c0      	blx	r8
 8002fc0:	3001      	adds	r0, #1
 8002fc2:	d0e6      	beq.n	8002f92 <_printf_common+0xae>
 8002fc4:	3601      	adds	r6, #1
 8002fc6:	e7d9      	b.n	8002f7c <_printf_common+0x98>

08002fc8 <_printf_i>:
 8002fc8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002fcc:	7e0f      	ldrb	r7, [r1, #24]
 8002fce:	4691      	mov	r9, r2
 8002fd0:	2f78      	cmp	r7, #120	; 0x78
 8002fd2:	4680      	mov	r8, r0
 8002fd4:	460c      	mov	r4, r1
 8002fd6:	469a      	mov	sl, r3
 8002fd8:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8002fda:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8002fde:	d807      	bhi.n	8002ff0 <_printf_i+0x28>
 8002fe0:	2f62      	cmp	r7, #98	; 0x62
 8002fe2:	d80a      	bhi.n	8002ffa <_printf_i+0x32>
 8002fe4:	2f00      	cmp	r7, #0
 8002fe6:	f000 80d5 	beq.w	8003194 <_printf_i+0x1cc>
 8002fea:	2f58      	cmp	r7, #88	; 0x58
 8002fec:	f000 80c1 	beq.w	8003172 <_printf_i+0x1aa>
 8002ff0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002ff4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8002ff8:	e03a      	b.n	8003070 <_printf_i+0xa8>
 8002ffa:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8002ffe:	2b15      	cmp	r3, #21
 8003000:	d8f6      	bhi.n	8002ff0 <_printf_i+0x28>
 8003002:	a101      	add	r1, pc, #4	; (adr r1, 8003008 <_printf_i+0x40>)
 8003004:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003008:	08003061 	.word	0x08003061
 800300c:	08003075 	.word	0x08003075
 8003010:	08002ff1 	.word	0x08002ff1
 8003014:	08002ff1 	.word	0x08002ff1
 8003018:	08002ff1 	.word	0x08002ff1
 800301c:	08002ff1 	.word	0x08002ff1
 8003020:	08003075 	.word	0x08003075
 8003024:	08002ff1 	.word	0x08002ff1
 8003028:	08002ff1 	.word	0x08002ff1
 800302c:	08002ff1 	.word	0x08002ff1
 8003030:	08002ff1 	.word	0x08002ff1
 8003034:	0800317b 	.word	0x0800317b
 8003038:	080030a1 	.word	0x080030a1
 800303c:	08003135 	.word	0x08003135
 8003040:	08002ff1 	.word	0x08002ff1
 8003044:	08002ff1 	.word	0x08002ff1
 8003048:	0800319d 	.word	0x0800319d
 800304c:	08002ff1 	.word	0x08002ff1
 8003050:	080030a1 	.word	0x080030a1
 8003054:	08002ff1 	.word	0x08002ff1
 8003058:	08002ff1 	.word	0x08002ff1
 800305c:	0800313d 	.word	0x0800313d
 8003060:	682b      	ldr	r3, [r5, #0]
 8003062:	1d1a      	adds	r2, r3, #4
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	602a      	str	r2, [r5, #0]
 8003068:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800306c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003070:	2301      	movs	r3, #1
 8003072:	e0a0      	b.n	80031b6 <_printf_i+0x1ee>
 8003074:	6820      	ldr	r0, [r4, #0]
 8003076:	682b      	ldr	r3, [r5, #0]
 8003078:	0607      	lsls	r7, r0, #24
 800307a:	f103 0104 	add.w	r1, r3, #4
 800307e:	6029      	str	r1, [r5, #0]
 8003080:	d501      	bpl.n	8003086 <_printf_i+0xbe>
 8003082:	681e      	ldr	r6, [r3, #0]
 8003084:	e003      	b.n	800308e <_printf_i+0xc6>
 8003086:	0646      	lsls	r6, r0, #25
 8003088:	d5fb      	bpl.n	8003082 <_printf_i+0xba>
 800308a:	f9b3 6000 	ldrsh.w	r6, [r3]
 800308e:	2e00      	cmp	r6, #0
 8003090:	da03      	bge.n	800309a <_printf_i+0xd2>
 8003092:	232d      	movs	r3, #45	; 0x2d
 8003094:	4276      	negs	r6, r6
 8003096:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800309a:	230a      	movs	r3, #10
 800309c:	4859      	ldr	r0, [pc, #356]	; (8003204 <_printf_i+0x23c>)
 800309e:	e012      	b.n	80030c6 <_printf_i+0xfe>
 80030a0:	682b      	ldr	r3, [r5, #0]
 80030a2:	6820      	ldr	r0, [r4, #0]
 80030a4:	1d19      	adds	r1, r3, #4
 80030a6:	6029      	str	r1, [r5, #0]
 80030a8:	0605      	lsls	r5, r0, #24
 80030aa:	d501      	bpl.n	80030b0 <_printf_i+0xe8>
 80030ac:	681e      	ldr	r6, [r3, #0]
 80030ae:	e002      	b.n	80030b6 <_printf_i+0xee>
 80030b0:	0641      	lsls	r1, r0, #25
 80030b2:	d5fb      	bpl.n	80030ac <_printf_i+0xe4>
 80030b4:	881e      	ldrh	r6, [r3, #0]
 80030b6:	2f6f      	cmp	r7, #111	; 0x6f
 80030b8:	bf0c      	ite	eq
 80030ba:	2308      	moveq	r3, #8
 80030bc:	230a      	movne	r3, #10
 80030be:	4851      	ldr	r0, [pc, #324]	; (8003204 <_printf_i+0x23c>)
 80030c0:	2100      	movs	r1, #0
 80030c2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80030c6:	6865      	ldr	r5, [r4, #4]
 80030c8:	2d00      	cmp	r5, #0
 80030ca:	bfa8      	it	ge
 80030cc:	6821      	ldrge	r1, [r4, #0]
 80030ce:	60a5      	str	r5, [r4, #8]
 80030d0:	bfa4      	itt	ge
 80030d2:	f021 0104 	bicge.w	r1, r1, #4
 80030d6:	6021      	strge	r1, [r4, #0]
 80030d8:	b90e      	cbnz	r6, 80030de <_printf_i+0x116>
 80030da:	2d00      	cmp	r5, #0
 80030dc:	d04b      	beq.n	8003176 <_printf_i+0x1ae>
 80030de:	4615      	mov	r5, r2
 80030e0:	fbb6 f1f3 	udiv	r1, r6, r3
 80030e4:	fb03 6711 	mls	r7, r3, r1, r6
 80030e8:	5dc7      	ldrb	r7, [r0, r7]
 80030ea:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80030ee:	4637      	mov	r7, r6
 80030f0:	42bb      	cmp	r3, r7
 80030f2:	460e      	mov	r6, r1
 80030f4:	d9f4      	bls.n	80030e0 <_printf_i+0x118>
 80030f6:	2b08      	cmp	r3, #8
 80030f8:	d10b      	bne.n	8003112 <_printf_i+0x14a>
 80030fa:	6823      	ldr	r3, [r4, #0]
 80030fc:	07de      	lsls	r6, r3, #31
 80030fe:	d508      	bpl.n	8003112 <_printf_i+0x14a>
 8003100:	6923      	ldr	r3, [r4, #16]
 8003102:	6861      	ldr	r1, [r4, #4]
 8003104:	4299      	cmp	r1, r3
 8003106:	bfde      	ittt	le
 8003108:	2330      	movle	r3, #48	; 0x30
 800310a:	f805 3c01 	strble.w	r3, [r5, #-1]
 800310e:	f105 35ff 	addle.w	r5, r5, #4294967295
 8003112:	1b52      	subs	r2, r2, r5
 8003114:	6122      	str	r2, [r4, #16]
 8003116:	464b      	mov	r3, r9
 8003118:	4621      	mov	r1, r4
 800311a:	4640      	mov	r0, r8
 800311c:	f8cd a000 	str.w	sl, [sp]
 8003120:	aa03      	add	r2, sp, #12
 8003122:	f7ff fedf 	bl	8002ee4 <_printf_common>
 8003126:	3001      	adds	r0, #1
 8003128:	d14a      	bne.n	80031c0 <_printf_i+0x1f8>
 800312a:	f04f 30ff 	mov.w	r0, #4294967295
 800312e:	b004      	add	sp, #16
 8003130:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003134:	6823      	ldr	r3, [r4, #0]
 8003136:	f043 0320 	orr.w	r3, r3, #32
 800313a:	6023      	str	r3, [r4, #0]
 800313c:	2778      	movs	r7, #120	; 0x78
 800313e:	4832      	ldr	r0, [pc, #200]	; (8003208 <_printf_i+0x240>)
 8003140:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8003144:	6823      	ldr	r3, [r4, #0]
 8003146:	6829      	ldr	r1, [r5, #0]
 8003148:	061f      	lsls	r7, r3, #24
 800314a:	f851 6b04 	ldr.w	r6, [r1], #4
 800314e:	d402      	bmi.n	8003156 <_printf_i+0x18e>
 8003150:	065f      	lsls	r7, r3, #25
 8003152:	bf48      	it	mi
 8003154:	b2b6      	uxthmi	r6, r6
 8003156:	07df      	lsls	r7, r3, #31
 8003158:	bf48      	it	mi
 800315a:	f043 0320 	orrmi.w	r3, r3, #32
 800315e:	6029      	str	r1, [r5, #0]
 8003160:	bf48      	it	mi
 8003162:	6023      	strmi	r3, [r4, #0]
 8003164:	b91e      	cbnz	r6, 800316e <_printf_i+0x1a6>
 8003166:	6823      	ldr	r3, [r4, #0]
 8003168:	f023 0320 	bic.w	r3, r3, #32
 800316c:	6023      	str	r3, [r4, #0]
 800316e:	2310      	movs	r3, #16
 8003170:	e7a6      	b.n	80030c0 <_printf_i+0xf8>
 8003172:	4824      	ldr	r0, [pc, #144]	; (8003204 <_printf_i+0x23c>)
 8003174:	e7e4      	b.n	8003140 <_printf_i+0x178>
 8003176:	4615      	mov	r5, r2
 8003178:	e7bd      	b.n	80030f6 <_printf_i+0x12e>
 800317a:	682b      	ldr	r3, [r5, #0]
 800317c:	6826      	ldr	r6, [r4, #0]
 800317e:	1d18      	adds	r0, r3, #4
 8003180:	6961      	ldr	r1, [r4, #20]
 8003182:	6028      	str	r0, [r5, #0]
 8003184:	0635      	lsls	r5, r6, #24
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	d501      	bpl.n	800318e <_printf_i+0x1c6>
 800318a:	6019      	str	r1, [r3, #0]
 800318c:	e002      	b.n	8003194 <_printf_i+0x1cc>
 800318e:	0670      	lsls	r0, r6, #25
 8003190:	d5fb      	bpl.n	800318a <_printf_i+0x1c2>
 8003192:	8019      	strh	r1, [r3, #0]
 8003194:	2300      	movs	r3, #0
 8003196:	4615      	mov	r5, r2
 8003198:	6123      	str	r3, [r4, #16]
 800319a:	e7bc      	b.n	8003116 <_printf_i+0x14e>
 800319c:	682b      	ldr	r3, [r5, #0]
 800319e:	2100      	movs	r1, #0
 80031a0:	1d1a      	adds	r2, r3, #4
 80031a2:	602a      	str	r2, [r5, #0]
 80031a4:	681d      	ldr	r5, [r3, #0]
 80031a6:	6862      	ldr	r2, [r4, #4]
 80031a8:	4628      	mov	r0, r5
 80031aa:	f000 f859 	bl	8003260 <memchr>
 80031ae:	b108      	cbz	r0, 80031b4 <_printf_i+0x1ec>
 80031b0:	1b40      	subs	r0, r0, r5
 80031b2:	6060      	str	r0, [r4, #4]
 80031b4:	6863      	ldr	r3, [r4, #4]
 80031b6:	6123      	str	r3, [r4, #16]
 80031b8:	2300      	movs	r3, #0
 80031ba:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80031be:	e7aa      	b.n	8003116 <_printf_i+0x14e>
 80031c0:	462a      	mov	r2, r5
 80031c2:	4649      	mov	r1, r9
 80031c4:	4640      	mov	r0, r8
 80031c6:	6923      	ldr	r3, [r4, #16]
 80031c8:	47d0      	blx	sl
 80031ca:	3001      	adds	r0, #1
 80031cc:	d0ad      	beq.n	800312a <_printf_i+0x162>
 80031ce:	6823      	ldr	r3, [r4, #0]
 80031d0:	079b      	lsls	r3, r3, #30
 80031d2:	d413      	bmi.n	80031fc <_printf_i+0x234>
 80031d4:	68e0      	ldr	r0, [r4, #12]
 80031d6:	9b03      	ldr	r3, [sp, #12]
 80031d8:	4298      	cmp	r0, r3
 80031da:	bfb8      	it	lt
 80031dc:	4618      	movlt	r0, r3
 80031de:	e7a6      	b.n	800312e <_printf_i+0x166>
 80031e0:	2301      	movs	r3, #1
 80031e2:	4632      	mov	r2, r6
 80031e4:	4649      	mov	r1, r9
 80031e6:	4640      	mov	r0, r8
 80031e8:	47d0      	blx	sl
 80031ea:	3001      	adds	r0, #1
 80031ec:	d09d      	beq.n	800312a <_printf_i+0x162>
 80031ee:	3501      	adds	r5, #1
 80031f0:	68e3      	ldr	r3, [r4, #12]
 80031f2:	9903      	ldr	r1, [sp, #12]
 80031f4:	1a5b      	subs	r3, r3, r1
 80031f6:	42ab      	cmp	r3, r5
 80031f8:	dcf2      	bgt.n	80031e0 <_printf_i+0x218>
 80031fa:	e7eb      	b.n	80031d4 <_printf_i+0x20c>
 80031fc:	2500      	movs	r5, #0
 80031fe:	f104 0619 	add.w	r6, r4, #25
 8003202:	e7f5      	b.n	80031f0 <_printf_i+0x228>
 8003204:	08003366 	.word	0x08003366
 8003208:	08003377 	.word	0x08003377

0800320c <memmove>:
 800320c:	4288      	cmp	r0, r1
 800320e:	b510      	push	{r4, lr}
 8003210:	eb01 0402 	add.w	r4, r1, r2
 8003214:	d902      	bls.n	800321c <memmove+0x10>
 8003216:	4284      	cmp	r4, r0
 8003218:	4623      	mov	r3, r4
 800321a:	d807      	bhi.n	800322c <memmove+0x20>
 800321c:	1e43      	subs	r3, r0, #1
 800321e:	42a1      	cmp	r1, r4
 8003220:	d008      	beq.n	8003234 <memmove+0x28>
 8003222:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003226:	f803 2f01 	strb.w	r2, [r3, #1]!
 800322a:	e7f8      	b.n	800321e <memmove+0x12>
 800322c:	4601      	mov	r1, r0
 800322e:	4402      	add	r2, r0
 8003230:	428a      	cmp	r2, r1
 8003232:	d100      	bne.n	8003236 <memmove+0x2a>
 8003234:	bd10      	pop	{r4, pc}
 8003236:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800323a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800323e:	e7f7      	b.n	8003230 <memmove+0x24>

08003240 <_sbrk_r>:
 8003240:	b538      	push	{r3, r4, r5, lr}
 8003242:	2300      	movs	r3, #0
 8003244:	4d05      	ldr	r5, [pc, #20]	; (800325c <_sbrk_r+0x1c>)
 8003246:	4604      	mov	r4, r0
 8003248:	4608      	mov	r0, r1
 800324a:	602b      	str	r3, [r5, #0]
 800324c:	f7fd ffaa 	bl	80011a4 <_sbrk>
 8003250:	1c43      	adds	r3, r0, #1
 8003252:	d102      	bne.n	800325a <_sbrk_r+0x1a>
 8003254:	682b      	ldr	r3, [r5, #0]
 8003256:	b103      	cbz	r3, 800325a <_sbrk_r+0x1a>
 8003258:	6023      	str	r3, [r4, #0]
 800325a:	bd38      	pop	{r3, r4, r5, pc}
 800325c:	20000374 	.word	0x20000374

08003260 <memchr>:
 8003260:	4603      	mov	r3, r0
 8003262:	b510      	push	{r4, lr}
 8003264:	b2c9      	uxtb	r1, r1
 8003266:	4402      	add	r2, r0
 8003268:	4293      	cmp	r3, r2
 800326a:	4618      	mov	r0, r3
 800326c:	d101      	bne.n	8003272 <memchr+0x12>
 800326e:	2000      	movs	r0, #0
 8003270:	e003      	b.n	800327a <memchr+0x1a>
 8003272:	7804      	ldrb	r4, [r0, #0]
 8003274:	3301      	adds	r3, #1
 8003276:	428c      	cmp	r4, r1
 8003278:	d1f6      	bne.n	8003268 <memchr+0x8>
 800327a:	bd10      	pop	{r4, pc}

0800327c <memcpy>:
 800327c:	440a      	add	r2, r1
 800327e:	4291      	cmp	r1, r2
 8003280:	f100 33ff 	add.w	r3, r0, #4294967295
 8003284:	d100      	bne.n	8003288 <memcpy+0xc>
 8003286:	4770      	bx	lr
 8003288:	b510      	push	{r4, lr}
 800328a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800328e:	4291      	cmp	r1, r2
 8003290:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003294:	d1f9      	bne.n	800328a <memcpy+0xe>
 8003296:	bd10      	pop	{r4, pc}

08003298 <_realloc_r>:
 8003298:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800329c:	4680      	mov	r8, r0
 800329e:	4614      	mov	r4, r2
 80032a0:	460e      	mov	r6, r1
 80032a2:	b921      	cbnz	r1, 80032ae <_realloc_r+0x16>
 80032a4:	4611      	mov	r1, r2
 80032a6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80032aa:	f7ff bc37 	b.w	8002b1c <_malloc_r>
 80032ae:	b92a      	cbnz	r2, 80032bc <_realloc_r+0x24>
 80032b0:	f7ff fbcc 	bl	8002a4c <_free_r>
 80032b4:	4625      	mov	r5, r4
 80032b6:	4628      	mov	r0, r5
 80032b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80032bc:	f000 f81b 	bl	80032f6 <_malloc_usable_size_r>
 80032c0:	4284      	cmp	r4, r0
 80032c2:	4607      	mov	r7, r0
 80032c4:	d802      	bhi.n	80032cc <_realloc_r+0x34>
 80032c6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80032ca:	d812      	bhi.n	80032f2 <_realloc_r+0x5a>
 80032cc:	4621      	mov	r1, r4
 80032ce:	4640      	mov	r0, r8
 80032d0:	f7ff fc24 	bl	8002b1c <_malloc_r>
 80032d4:	4605      	mov	r5, r0
 80032d6:	2800      	cmp	r0, #0
 80032d8:	d0ed      	beq.n	80032b6 <_realloc_r+0x1e>
 80032da:	42bc      	cmp	r4, r7
 80032dc:	4622      	mov	r2, r4
 80032de:	4631      	mov	r1, r6
 80032e0:	bf28      	it	cs
 80032e2:	463a      	movcs	r2, r7
 80032e4:	f7ff ffca 	bl	800327c <memcpy>
 80032e8:	4631      	mov	r1, r6
 80032ea:	4640      	mov	r0, r8
 80032ec:	f7ff fbae 	bl	8002a4c <_free_r>
 80032f0:	e7e1      	b.n	80032b6 <_realloc_r+0x1e>
 80032f2:	4635      	mov	r5, r6
 80032f4:	e7df      	b.n	80032b6 <_realloc_r+0x1e>

080032f6 <_malloc_usable_size_r>:
 80032f6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80032fa:	1f18      	subs	r0, r3, #4
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	bfbc      	itt	lt
 8003300:	580b      	ldrlt	r3, [r1, r0]
 8003302:	18c0      	addlt	r0, r0, r3
 8003304:	4770      	bx	lr
	...

08003308 <_init>:
 8003308:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800330a:	bf00      	nop
 800330c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800330e:	bc08      	pop	{r3}
 8003310:	469e      	mov	lr, r3
 8003312:	4770      	bx	lr

08003314 <_fini>:
 8003314:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003316:	bf00      	nop
 8003318:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800331a:	bc08      	pop	{r3}
 800331c:	469e      	mov	lr, r3
 800331e:	4770      	bx	lr
