
EVMS_CubeMX.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002900  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000002c  08002a0c  08002a0c  00012a0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002a38  08002a38  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08002a38  08002a38  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002a38  08002a38  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002a38  08002a38  00012a38  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002a3c  08002a3c  00012a3c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08002a40  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000009c  2000000c  08002a4c  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000a8  08002a4c  000200a8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009d42  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001b7f  00000000  00000000  00029d77  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000008a0  00000000  00000000  0002b8f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000007e8  00000000  00000000  0002c198  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016f03  00000000  00000000  0002c980  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000a69f  00000000  00000000  00043883  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008574b  00000000  00000000  0004df22  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000d366d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000021a4  00000000  00000000  000d36c0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	080029f4 	.word	0x080029f4

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	080029f4 	.word	0x080029f4

0800014c <CAN_init>:

/*******************************************************************************
 *                       Public functions definitions                          *
 *******************************************************************************/

void CAN_init(CAN_TypeDef *CANx, CAN_TypeDef_Config Copy_enuCANConfig) {
 800014c:	b580      	push	{r7, lr}
 800014e:	b082      	sub	sp, #8
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
 8000154:	460b      	mov	r3, r1
 8000156:	70fb      	strb	r3, [r7, #3]

	/* Instance check */
	if (!IS_CAN_INSTANCE(CANx))
 8000158:	687b      	ldr	r3, [r7, #4]
 800015a:	4a56      	ldr	r2, [pc, #344]	; (80002b4 <CAN_init+0x168>)
 800015c:	4293      	cmp	r3, r2
 800015e:	d004      	beq.n	800016a <CAN_init+0x1e>
 8000160:	687b      	ldr	r3, [r7, #4]
 8000162:	4a55      	ldr	r2, [pc, #340]	; (80002b8 <CAN_init+0x16c>)
 8000164:	4293      	cmp	r3, r2
 8000166:	f040 80a1 	bne.w	80002ac <CAN_init+0x160>
		return;

	/* Enable CAN clock */
	RCC_voidEnableClock(APB1, RCC_APB1_CANEN);
 800016a:	2119      	movs	r1, #25
 800016c:	2001      	movs	r0, #1
 800016e:	f000 fe51 	bl	8000e14 <RCC_voidEnableClock>

	/* Set up GPIO pins as Alternate function mode for CAN pins */
	GPIO_enablePortClock(GPIOA_ID);
 8000172:	2000      	movs	r0, #0
 8000174:	f000 fe2a 	bl	8000dcc <GPIO_enablePortClock>
	/* Setup CAN Rx (PIN11) as input */
	GPIO_setupPinMode(GPIOA_ID, PIN11, INPUT_PULLUP_PULLDOWN);
 8000178:	2208      	movs	r2, #8
 800017a:	210b      	movs	r1, #11
 800017c:	2000      	movs	r0, #0
 800017e:	f000 fd55 	bl	8000c2c <GPIO_setupPinMode>
	/* Setup CAN Tx (PIN12) as output alternate function*/
	GPIO_setupPinMode(GPIOA_ID, PIN12, OUTPUT_SPEED_50MHZ_AFPP);
 8000182:	220b      	movs	r2, #11
 8000184:	210c      	movs	r1, #12
 8000186:	2000      	movs	r0, #0
 8000188:	f000 fd50 	bl	8000c2c <GPIO_setupPinMode>
	 *	CAN1_BAUD_RATE_PRESCALER
	 *		CAN baud rate which defines the time quantum unit.
	 *		tq = (BRP[9:0]+1) x tPCLK
	 *
	 * */
	switch (Copy_enuCANConfig) {
 800018c:	78fb      	ldrb	r3, [r7, #3]
 800018e:	2b00      	cmp	r3, #0
 8000190:	d002      	beq.n	8000198 <CAN_init+0x4c>
 8000192:	2b01      	cmp	r3, #1
 8000194:	d045      	beq.n	8000222 <CAN_init+0xd6>
				| (CAN2_TIME_SEGMENT_1 << BTR_TS1_4BITS)
				| (CAN2_TIME_SEGMENT_2 << BTR_TS2_3BITS)
				| ((CAN2_BAUD_RATE_PRESCALER - 1) << BTR_BRP_10BITS));
		break;
	default:
		break;
 8000196:	e08a      	b.n	80002ae <CAN_init+0x162>
		SET_BIT(CANx->MCR, MCR_INRQ);
 8000198:	687b      	ldr	r3, [r7, #4]
 800019a:	681b      	ldr	r3, [r3, #0]
 800019c:	f043 0201 	orr.w	r2, r3, #1
 80001a0:	687b      	ldr	r3, [r7, #4]
 80001a2:	601a      	str	r2, [r3, #0]
		while (GET_BIT(CANx->MSR, MSR_INAK) == 0U)
 80001a4:	bf00      	nop
 80001a6:	687b      	ldr	r3, [r7, #4]
 80001a8:	685b      	ldr	r3, [r3, #4]
 80001aa:	f003 0301 	and.w	r3, r3, #1
 80001ae:	2b00      	cmp	r3, #0
 80001b0:	d0f9      	beq.n	80001a6 <CAN_init+0x5a>
		CLR_BIT(CANx->MCR, MCR_SLEEP);
 80001b2:	687b      	ldr	r3, [r7, #4]
 80001b4:	681b      	ldr	r3, [r3, #0]
 80001b6:	f023 0202 	bic.w	r2, r3, #2
 80001ba:	687b      	ldr	r3, [r7, #4]
 80001bc:	601a      	str	r2, [r3, #0]
		while (GET_BIT(CANx->MSR, MSR_SLAK) != 0U)
 80001be:	bf00      	nop
 80001c0:	687b      	ldr	r3, [r7, #4]
 80001c2:	685b      	ldr	r3, [r3, #4]
 80001c4:	f003 0302 	and.w	r3, r3, #2
 80001c8:	2b00      	cmp	r3, #0
 80001ca:	d1f9      	bne.n	80001c0 <CAN_init+0x74>
		CANx->IER = 0;
 80001cc:	687b      	ldr	r3, [r7, #4]
 80001ce:	2200      	movs	r2, #0
 80001d0:	615a      	str	r2, [r3, #20]
		WRITE_BIT(CANx->MCR, MCR_TXFP, CAN1_FIFO_PRIORITY);
 80001d2:	687b      	ldr	r3, [r7, #4]
 80001d4:	681b      	ldr	r3, [r3, #0]
 80001d6:	f023 0204 	bic.w	r2, r3, #4
 80001da:	687b      	ldr	r3, [r7, #4]
 80001dc:	601a      	str	r2, [r3, #0]
		WRITE_BIT(CANx->MCR, MCR_RFLM, CAN1_RECEIVE_FIFO_LOCKED_MODE);
 80001de:	687b      	ldr	r3, [r7, #4]
 80001e0:	681b      	ldr	r3, [r3, #0]
 80001e2:	f023 0208 	bic.w	r2, r3, #8
 80001e6:	687b      	ldr	r3, [r7, #4]
 80001e8:	601a      	str	r2, [r3, #0]
		WRITE_BIT(CANx->MCR, MCR_NART, CAN1_NO_AUTOMATIC_RETRANSMISSION);
 80001ea:	687b      	ldr	r3, [r7, #4]
 80001ec:	681b      	ldr	r3, [r3, #0]
 80001ee:	f043 0210 	orr.w	r2, r3, #16
 80001f2:	687b      	ldr	r3, [r7, #4]
 80001f4:	601a      	str	r2, [r3, #0]
		WRITE_BIT(CANx->MCR, MCR_AWUM, CAN1_AUTOMATIC_WAKE_UP_MODE);
 80001f6:	687b      	ldr	r3, [r7, #4]
 80001f8:	681b      	ldr	r3, [r3, #0]
 80001fa:	f023 0220 	bic.w	r2, r3, #32
 80001fe:	687b      	ldr	r3, [r7, #4]
 8000200:	601a      	str	r2, [r3, #0]
		WRITE_BIT(CANx->MCR, MCR_ABOT, CAN1_AUTOMATIC_BUS_OFF);
 8000202:	687b      	ldr	r3, [r7, #4]
 8000204:	681b      	ldr	r3, [r3, #0]
 8000206:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 800020a:	687b      	ldr	r3, [r7, #4]
 800020c:	601a      	str	r2, [r3, #0]
		WRITE_BIT(CANx->MCR, MCR_TTCM, CAN1_TIME_TRIGGERED_COMMUNICATION_MODE);
 800020e:	687b      	ldr	r3, [r7, #4]
 8000210:	681b      	ldr	r3, [r3, #0]
 8000212:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8000216:	687b      	ldr	r3, [r7, #4]
 8000218:	601a      	str	r2, [r3, #0]
		CANx->BTR = (u32) ((CAN1_MODE << BTR_LBKM)
 800021a:	687b      	ldr	r3, [r7, #4]
 800021c:	4a27      	ldr	r2, [pc, #156]	; (80002bc <CAN_init+0x170>)
 800021e:	61da      	str	r2, [r3, #28]
		break;
 8000220:	e045      	b.n	80002ae <CAN_init+0x162>
		SET_BIT(CANx->MCR, MCR_INRQ);
 8000222:	687b      	ldr	r3, [r7, #4]
 8000224:	681b      	ldr	r3, [r3, #0]
 8000226:	f043 0201 	orr.w	r2, r3, #1
 800022a:	687b      	ldr	r3, [r7, #4]
 800022c:	601a      	str	r2, [r3, #0]
		while (GET_BIT(CANx->MSR, MSR_INAK) == 0U)
 800022e:	bf00      	nop
 8000230:	687b      	ldr	r3, [r7, #4]
 8000232:	685b      	ldr	r3, [r3, #4]
 8000234:	f003 0301 	and.w	r3, r3, #1
 8000238:	2b00      	cmp	r3, #0
 800023a:	d0f9      	beq.n	8000230 <CAN_init+0xe4>
		CLR_BIT(CANx->MCR, MCR_SLEEP);
 800023c:	687b      	ldr	r3, [r7, #4]
 800023e:	681b      	ldr	r3, [r3, #0]
 8000240:	f023 0202 	bic.w	r2, r3, #2
 8000244:	687b      	ldr	r3, [r7, #4]
 8000246:	601a      	str	r2, [r3, #0]
		while (GET_BIT(CANx->MSR, MSR_SLAK) != 0U)
 8000248:	bf00      	nop
 800024a:	687b      	ldr	r3, [r7, #4]
 800024c:	685b      	ldr	r3, [r3, #4]
 800024e:	f003 0302 	and.w	r3, r3, #2
 8000252:	2b00      	cmp	r3, #0
 8000254:	d1f9      	bne.n	800024a <CAN_init+0xfe>
		CANx->IER = 0;
 8000256:	687b      	ldr	r3, [r7, #4]
 8000258:	2200      	movs	r2, #0
 800025a:	615a      	str	r2, [r3, #20]
		WRITE_BIT(CANx->MCR, MCR_TXFP, CAN2_FIFO_PRIORITY);
 800025c:	687b      	ldr	r3, [r7, #4]
 800025e:	681b      	ldr	r3, [r3, #0]
 8000260:	f043 0204 	orr.w	r2, r3, #4
 8000264:	687b      	ldr	r3, [r7, #4]
 8000266:	601a      	str	r2, [r3, #0]
		WRITE_BIT(CANx->MCR, MCR_RFLM, CAN2_RECEIVE_FIFO_LOCKED_MODE);
 8000268:	687b      	ldr	r3, [r7, #4]
 800026a:	681b      	ldr	r3, [r3, #0]
 800026c:	f043 0208 	orr.w	r2, r3, #8
 8000270:	687b      	ldr	r3, [r7, #4]
 8000272:	601a      	str	r2, [r3, #0]
		WRITE_BIT(CANx->MCR, MCR_NART, CAN2_NO_AUTOMATIC_RETRANSMISSION);
 8000274:	687b      	ldr	r3, [r7, #4]
 8000276:	681b      	ldr	r3, [r3, #0]
 8000278:	f023 0210 	bic.w	r2, r3, #16
 800027c:	687b      	ldr	r3, [r7, #4]
 800027e:	601a      	str	r2, [r3, #0]
		WRITE_BIT(CANx->MCR, MCR_AWUM, CAN2_AUTOMATIC_WAKE_UP_MODE);
 8000280:	687b      	ldr	r3, [r7, #4]
 8000282:	681b      	ldr	r3, [r3, #0]
 8000284:	f043 0220 	orr.w	r2, r3, #32
 8000288:	687b      	ldr	r3, [r7, #4]
 800028a:	601a      	str	r2, [r3, #0]
		WRITE_BIT(CANx->MCR, MCR_ABOT, CAN2_AUTOMATIC_BUS_OFF);
 800028c:	687b      	ldr	r3, [r7, #4]
 800028e:	681b      	ldr	r3, [r3, #0]
 8000290:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8000294:	687b      	ldr	r3, [r7, #4]
 8000296:	601a      	str	r2, [r3, #0]
		WRITE_BIT(CANx->MCR, MCR_TTCM, CAN2_TIME_TRIGGERED_COMMUNICATION_MODE);
 8000298:	687b      	ldr	r3, [r7, #4]
 800029a:	681b      	ldr	r3, [r3, #0]
 800029c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80002a0:	687b      	ldr	r3, [r7, #4]
 80002a2:	601a      	str	r2, [r3, #0]
		CANx->BTR = ((CAN2_MODE << BTR_LBKM)
 80002a4:	687b      	ldr	r3, [r7, #4]
 80002a6:	4a06      	ldr	r2, [pc, #24]	; (80002c0 <CAN_init+0x174>)
 80002a8:	61da      	str	r2, [r3, #28]
		break;
 80002aa:	e000      	b.n	80002ae <CAN_init+0x162>
		return;
 80002ac:	bf00      	nop
	}
}
 80002ae:	3708      	adds	r7, #8
 80002b0:	46bd      	mov	sp, r7
 80002b2:	bd80      	pop	{r7, pc}
 80002b4:	40006400 	.word	0x40006400
 80002b8:	40006800 	.word	0x40006800
 80002bc:	0133000f 	.word	0x0133000f
 80002c0:	c12d0000 	.word	0xc12d0000

080002c4 <CAN_setMode>:

void CAN_setMode(CAN_TypeDef *CANx, CAN_Mode a_mode) {
 80002c4:	b480      	push	{r7}
 80002c6:	b083      	sub	sp, #12
 80002c8:	af00      	add	r7, sp, #0
 80002ca:	6078      	str	r0, [r7, #4]
 80002cc:	460b      	mov	r3, r1
 80002ce:	70fb      	strb	r3, [r7, #3]
	/* Instance check */
	if (!IS_CAN_INSTANCE(CANx))
 80002d0:	687b      	ldr	r3, [r7, #4]
 80002d2:	4a25      	ldr	r2, [pc, #148]	; (8000368 <CAN_setMode+0xa4>)
 80002d4:	4293      	cmp	r3, r2
 80002d6:	d003      	beq.n	80002e0 <CAN_setMode+0x1c>
 80002d8:	687b      	ldr	r3, [r7, #4]
 80002da:	4a24      	ldr	r2, [pc, #144]	; (800036c <CAN_setMode+0xa8>)
 80002dc:	4293      	cmp	r3, r2
 80002de:	d13e      	bne.n	800035e <CAN_setMode+0x9a>
		return;

	switch (a_mode) {
 80002e0:	78fb      	ldrb	r3, [r7, #3]
 80002e2:	2b02      	cmp	r3, #2
 80002e4:	d019      	beq.n	800031a <CAN_setMode+0x56>
 80002e6:	2b02      	cmp	r3, #2
 80002e8:	dc3a      	bgt.n	8000360 <CAN_setMode+0x9c>
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	d029      	beq.n	8000342 <CAN_setMode+0x7e>
 80002ee:	2b01      	cmp	r3, #1
 80002f0:	d136      	bne.n	8000360 <CAN_setMode+0x9c>
	case CAN_Mode_Sleep:
		SET_BIT(CANx->MCR, SLEEP);
 80002f2:	687b      	ldr	r3, [r7, #4]
 80002f4:	681b      	ldr	r3, [r3, #0]
 80002f6:	f043 0202 	orr.w	r2, r3, #2
 80002fa:	687b      	ldr	r3, [r7, #4]
 80002fc:	601a      	str	r2, [r3, #0]
		CLR_BIT(CANx->MCR, INRQ);
 80002fe:	687b      	ldr	r3, [r7, #4]
 8000300:	681b      	ldr	r3, [r3, #0]
 8000302:	f023 0201 	bic.w	r2, r3, #1
 8000306:	687b      	ldr	r3, [r7, #4]
 8000308:	601a      	str	r2, [r3, #0]
		/* Wait until HW is in sleep  mode
		 INAK = 0
		 SLAK = 1
		 */
		while (GET_BIT(CANx->MSR, MSR_SLAK) == 0U)
 800030a:	bf00      	nop
 800030c:	687b      	ldr	r3, [r7, #4]
 800030e:	685b      	ldr	r3, [r3, #4]
 8000310:	f003 0302 	and.w	r3, r3, #2
 8000314:	2b00      	cmp	r3, #0
 8000316:	d0f9      	beq.n	800030c <CAN_setMode+0x48>
			;

		break;
 8000318:	e022      	b.n	8000360 <CAN_setMode+0x9c>
	case CAN_Mode_Init:
		SET_BIT(CANx->MCR, INRQ);
 800031a:	687b      	ldr	r3, [r7, #4]
 800031c:	681b      	ldr	r3, [r3, #0]
 800031e:	f043 0201 	orr.w	r2, r3, #1
 8000322:	687b      	ldr	r3, [r7, #4]
 8000324:	601a      	str	r2, [r3, #0]
		CLR_BIT(CANx->MCR, SLEEP);
 8000326:	687b      	ldr	r3, [r7, #4]
 8000328:	681b      	ldr	r3, [r3, #0]
 800032a:	f023 0202 	bic.w	r2, r3, #2
 800032e:	687b      	ldr	r3, [r7, #4]
 8000330:	601a      	str	r2, [r3, #0]
		/* Wait until HW is in sleep  mode
		 INAK = 0
		 SLAK = 1
		 */
		while (GET_BIT(CANx->MSR, MSR_INAK) == 0U)
 8000332:	bf00      	nop
 8000334:	687b      	ldr	r3, [r7, #4]
 8000336:	685b      	ldr	r3, [r3, #4]
 8000338:	f003 0301 	and.w	r3, r3, #1
 800033c:	2b00      	cmp	r3, #0
 800033e:	d0f9      	beq.n	8000334 <CAN_setMode+0x70>
			;
		break;
 8000340:	e00e      	b.n	8000360 <CAN_setMode+0x9c>
	case CAN_Mode_Normal:
//		CLR_BIT(CANx->MCR, 3);
//		CLR_BIT(CANx->MCR, SLEEP);
//		CLR_BIT(CANx->MCR, INRQ);
		CANx->MCR &= ~(1 << 0);
 8000342:	687b      	ldr	r3, [r7, #4]
 8000344:	681b      	ldr	r3, [r3, #0]
 8000346:	f023 0201 	bic.w	r2, r3, #1
 800034a:	687b      	ldr	r3, [r7, #4]
 800034c:	601a      	str	r2, [r3, #0]
		/* Wait until HW is in sleep  mode
		 INAK = 0
		 SLAK = 1
		 */
		while (GET_BIT(CANx->MSR, MSR_INAK) == 0U)
 800034e:	bf00      	nop
 8000350:	687b      	ldr	r3, [r7, #4]
 8000352:	685b      	ldr	r3, [r3, #4]
 8000354:	f003 0301 	and.w	r3, r3, #1
 8000358:	2b00      	cmp	r3, #0
 800035a:	d0f9      	beq.n	8000350 <CAN_setMode+0x8c>
			;
		break;
 800035c:	e000      	b.n	8000360 <CAN_setMode+0x9c>
		return;
 800035e:	bf00      	nop
	}
}
 8000360:	370c      	adds	r7, #12
 8000362:	46bd      	mov	sp, r7
 8000364:	bc80      	pop	{r7}
 8000366:	4770      	bx	lr
 8000368:	40006400 	.word	0x40006400
 800036c:	40006800 	.word	0x40006800

08000370 <CAN_initFilter>:

void CAN_initFilter(CAN_FilterInitTypeDef *PTR_sFilterInit) {
 8000370:	b490      	push	{r4, r7}
 8000372:	b082      	sub	sp, #8
 8000374:	af00      	add	r7, sp, #0
 8000376:	6078      	str	r0, [r7, #4]
	 *
	 * Mask/identifier mode is configured in FBMxbits in CAN_FMxR
	 */

	/* set filter to initialize mode */
	SET_BIT(CAN1->FMR, FINIT);
 8000378:	4b9d      	ldr	r3, [pc, #628]	; (80005f0 <CAN_initFilter+0x280>)
 800037a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800037e:	4a9c      	ldr	r2, [pc, #624]	; (80005f0 <CAN_initFilter+0x280>)
 8000380:	f043 0301 	orr.w	r3, r3, #1
 8000384:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

	/* de-activate the filter before initialization */
	CLR_BIT(CAN1->FA1R, PTR_sFilterInit->FilterNumber);
 8000388:	4b99      	ldr	r3, [pc, #612]	; (80005f0 <CAN_initFilter+0x280>)
 800038a:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 800038e:	687a      	ldr	r2, [r7, #4]
 8000390:	7b92      	ldrb	r2, [r2, #14]
 8000392:	4611      	mov	r1, r2
 8000394:	2201      	movs	r2, #1
 8000396:	408a      	lsls	r2, r1
 8000398:	43d2      	mvns	r2, r2
 800039a:	4611      	mov	r1, r2
 800039c:	4a94      	ldr	r2, [pc, #592]	; (80005f0 <CAN_initFilter+0x280>)
 800039e:	400b      	ands	r3, r1
 80003a0:	f8c2 321c 	str.w	r3, [r2, #540]	; 0x21c

	/* adjust CAN filter mode : */
	CAN1->FM1R = (CAN1->FM1R & ~(1 << PTR_sFilterInit->FilterNumber))
 80003a4:	4b92      	ldr	r3, [pc, #584]	; (80005f0 <CAN_initFilter+0x280>)
 80003a6:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80003aa:	687a      	ldr	r2, [r7, #4]
 80003ac:	7b92      	ldrb	r2, [r2, #14]
 80003ae:	4611      	mov	r1, r2
 80003b0:	2201      	movs	r2, #1
 80003b2:	408a      	lsls	r2, r1
 80003b4:	43d2      	mvns	r2, r2
 80003b6:	4013      	ands	r3, r2
			| (PTR_sFilterInit->FilterMode << PTR_sFilterInit->FilterNumber);
 80003b8:	687a      	ldr	r2, [r7, #4]
 80003ba:	7bd2      	ldrb	r2, [r2, #15]
 80003bc:	4611      	mov	r1, r2
 80003be:	687a      	ldr	r2, [r7, #4]
 80003c0:	7b92      	ldrb	r2, [r2, #14]
 80003c2:	fa01 f202 	lsl.w	r2, r1, r2
 80003c6:	4611      	mov	r1, r2
	CAN1->FM1R = (CAN1->FM1R & ~(1 << PTR_sFilterInit->FilterNumber))
 80003c8:	4a89      	ldr	r2, [pc, #548]	; (80005f0 <CAN_initFilter+0x280>)
			| (PTR_sFilterInit->FilterMode << PTR_sFilterInit->FilterNumber);
 80003ca:	430b      	orrs	r3, r1
	CAN1->FM1R = (CAN1->FM1R & ~(1 << PTR_sFilterInit->FilterNumber))
 80003cc:	f8c2 3204 	str.w	r3, [r2, #516]	; 0x204

	/* adjust CAN scale mode : */
	CAN1->FS1R = (CAN1->FS1R & ~(1 << PTR_sFilterInit->FilterNumber))
 80003d0:	4b87      	ldr	r3, [pc, #540]	; (80005f0 <CAN_initFilter+0x280>)
 80003d2:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 80003d6:	687a      	ldr	r2, [r7, #4]
 80003d8:	7b92      	ldrb	r2, [r2, #14]
 80003da:	4611      	mov	r1, r2
 80003dc:	2201      	movs	r2, #1
 80003de:	408a      	lsls	r2, r1
 80003e0:	43d2      	mvns	r2, r2
 80003e2:	4013      	ands	r3, r2
			| (PTR_sFilterInit->FilterScale << PTR_sFilterInit->FilterNumber);
 80003e4:	687a      	ldr	r2, [r7, #4]
 80003e6:	7c12      	ldrb	r2, [r2, #16]
 80003e8:	4611      	mov	r1, r2
 80003ea:	687a      	ldr	r2, [r7, #4]
 80003ec:	7b92      	ldrb	r2, [r2, #14]
 80003ee:	fa01 f202 	lsl.w	r2, r1, r2
 80003f2:	4611      	mov	r1, r2
	CAN1->FS1R = (CAN1->FS1R & ~(1 << PTR_sFilterInit->FilterNumber))
 80003f4:	4a7e      	ldr	r2, [pc, #504]	; (80005f0 <CAN_initFilter+0x280>)
			| (PTR_sFilterInit->FilterScale << PTR_sFilterInit->FilterNumber);
 80003f6:	430b      	orrs	r3, r1
	CAN1->FS1R = (CAN1->FS1R & ~(1 << PTR_sFilterInit->FilterNumber))
 80003f8:	f8c2 320c 	str.w	r3, [r2, #524]	; 0x20c

	/* state if the message passed to the filterNumber will be stored in FIFO 0 or  FIFO 1 */
	CAN1->FFA1R = (CAN1->FFA1R & ~(1 << PTR_sFilterInit->FilterNumber))
 80003fc:	4b7c      	ldr	r3, [pc, #496]	; (80005f0 <CAN_initFilter+0x280>)
 80003fe:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8000402:	687a      	ldr	r2, [r7, #4]
 8000404:	7b92      	ldrb	r2, [r2, #14]
 8000406:	4611      	mov	r1, r2
 8000408:	2201      	movs	r2, #1
 800040a:	408a      	lsls	r2, r1
 800040c:	43d2      	mvns	r2, r2
 800040e:	4013      	ands	r3, r2
			| (PTR_sFilterInit->FilterFIFOAssignment
 8000410:	687a      	ldr	r2, [r7, #4]
 8000412:	8992      	ldrh	r2, [r2, #12]
 8000414:	4611      	mov	r1, r2
					<< PTR_sFilterInit->FilterNumber);
 8000416:	687a      	ldr	r2, [r7, #4]
 8000418:	7b92      	ldrb	r2, [r2, #14]
 800041a:	fa01 f202 	lsl.w	r2, r1, r2
 800041e:	4611      	mov	r1, r2
	CAN1->FFA1R = (CAN1->FFA1R & ~(1 << PTR_sFilterInit->FilterNumber))
 8000420:	4a73      	ldr	r2, [pc, #460]	; (80005f0 <CAN_initFilter+0x280>)
			| (PTR_sFilterInit->FilterFIFOAssignment
 8000422:	430b      	orrs	r3, r1
	CAN1->FFA1R = (CAN1->FFA1R & ~(1 << PTR_sFilterInit->FilterNumber))
 8000424:	f8c2 3214 	str.w	r3, [r2, #532]	; 0x214

	/* adjust filter activation mode */
	CAN1->FA1R = (CAN1->FA1R & ~(1 << PTR_sFilterInit->FilterNumber))
 8000428:	4b71      	ldr	r3, [pc, #452]	; (80005f0 <CAN_initFilter+0x280>)
 800042a:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 800042e:	687a      	ldr	r2, [r7, #4]
 8000430:	7b92      	ldrb	r2, [r2, #14]
 8000432:	4611      	mov	r1, r2
 8000434:	2201      	movs	r2, #1
 8000436:	408a      	lsls	r2, r1
 8000438:	43d2      	mvns	r2, r2
 800043a:	4013      	ands	r3, r2
			| ((PTR_sFilterInit->FilterActivation)
 800043c:	687a      	ldr	r2, [r7, #4]
 800043e:	7c52      	ldrb	r2, [r2, #17]
 8000440:	4611      	mov	r1, r2
					<< (PTR_sFilterInit->FilterNumber));
 8000442:	687a      	ldr	r2, [r7, #4]
 8000444:	7b92      	ldrb	r2, [r2, #14]
 8000446:	fa01 f202 	lsl.w	r2, r1, r2
 800044a:	4611      	mov	r1, r2
	CAN1->FA1R = (CAN1->FA1R & ~(1 << PTR_sFilterInit->FilterNumber))
 800044c:	4a68      	ldr	r2, [pc, #416]	; (80005f0 <CAN_initFilter+0x280>)
			| ((PTR_sFilterInit->FilterActivation)
 800044e:	430b      	orrs	r3, r1
	CAN1->FA1R = (CAN1->FA1R & ~(1 << PTR_sFilterInit->FilterNumber))
 8000450:	f8c2 321c 	str.w	r3, [r2, #540]	; 0x21c

	/* copy identifier into filter bank */
	switch (PTR_sFilterInit->FilterScale) {
 8000454:	687b      	ldr	r3, [r7, #4]
 8000456:	7c1b      	ldrb	r3, [r3, #16]
 8000458:	2b00      	cmp	r3, #0
 800045a:	d05d      	beq.n	8000518 <CAN_initFilter+0x1a8>
 800045c:	2b01      	cmp	r3, #1
 800045e:	f040 80ba 	bne.w	80005d6 <CAN_initFilter+0x266>
	case SINGLE_32: {
		switch (PTR_sFilterInit->FilterMode) {
 8000462:	687b      	ldr	r3, [r7, #4]
 8000464:	7bdb      	ldrb	r3, [r3, #15]
 8000466:	2b00      	cmp	r3, #0
 8000468:	d002      	beq.n	8000470 <CAN_initFilter+0x100>
 800046a:	2b01      	cmp	r3, #1
 800046c:	d031      	beq.n	80004d2 <CAN_initFilter+0x162>
							| (PTR_sFilterInit->FilterIdLowR2);
		}
			break;
		}
	}
		break;
 800046e:	e0b2      	b.n	80005d6 <CAN_initFilter+0x266>
			CAN1->sFilterRegister[PTR_sFilterInit->FilterMode].FR2 = 0;
 8000470:	4a5f      	ldr	r2, [pc, #380]	; (80005f0 <CAN_initFilter+0x280>)
 8000472:	687b      	ldr	r3, [r7, #4]
 8000474:	7bdb      	ldrb	r3, [r3, #15]
 8000476:	3348      	adds	r3, #72	; 0x48
 8000478:	00db      	lsls	r3, r3, #3
 800047a:	4413      	add	r3, r2
 800047c:	2200      	movs	r2, #0
 800047e:	605a      	str	r2, [r3, #4]
			CAN1->sFilterRegister[PTR_sFilterInit->FilterMode].FR1 = 0;
 8000480:	4a5b      	ldr	r2, [pc, #364]	; (80005f0 <CAN_initFilter+0x280>)
 8000482:	687b      	ldr	r3, [r7, #4]
 8000484:	7bdb      	ldrb	r3, [r3, #15]
 8000486:	3348      	adds	r3, #72	; 0x48
 8000488:	2100      	movs	r1, #0
 800048a:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
					(((u32) PTR_sFilterInit->FilterMaskIdHigh) << 16)
 800048e:	687b      	ldr	r3, [r7, #4]
 8000490:	891b      	ldrh	r3, [r3, #8]
 8000492:	041b      	lsls	r3, r3, #16
							| (PTR_sFilterInit->FilterMaskIdLow);
 8000494:	687a      	ldr	r2, [r7, #4]
 8000496:	8952      	ldrh	r2, [r2, #10]
 8000498:	4614      	mov	r4, r2
			CAN1->sFilterRegister[PTR_sFilterInit->FilterMode].FR2 =
 800049a:	4955      	ldr	r1, [pc, #340]	; (80005f0 <CAN_initFilter+0x280>)
 800049c:	687a      	ldr	r2, [r7, #4]
 800049e:	7bd2      	ldrb	r2, [r2, #15]
 80004a0:	4610      	mov	r0, r2
							| (PTR_sFilterInit->FilterMaskIdLow);
 80004a2:	ea43 0204 	orr.w	r2, r3, r4
			CAN1->sFilterRegister[PTR_sFilterInit->FilterMode].FR2 =
 80004a6:	f100 0348 	add.w	r3, r0, #72	; 0x48
 80004aa:	00db      	lsls	r3, r3, #3
 80004ac:	440b      	add	r3, r1
 80004ae:	605a      	str	r2, [r3, #4]
					(((u32) PTR_sFilterInit->FilterIdHighR1) << 16)
 80004b0:	687b      	ldr	r3, [r7, #4]
 80004b2:	885b      	ldrh	r3, [r3, #2]
 80004b4:	041b      	lsls	r3, r3, #16
							| (PTR_sFilterInit->FilterIdLowR1);
 80004b6:	687a      	ldr	r2, [r7, #4]
 80004b8:	8812      	ldrh	r2, [r2, #0]
 80004ba:	4614      	mov	r4, r2
			CAN1->sFilterRegister[PTR_sFilterInit->FilterMode].FR1 =
 80004bc:	494c      	ldr	r1, [pc, #304]	; (80005f0 <CAN_initFilter+0x280>)
 80004be:	687a      	ldr	r2, [r7, #4]
 80004c0:	7bd2      	ldrb	r2, [r2, #15]
 80004c2:	4610      	mov	r0, r2
							| (PTR_sFilterInit->FilterIdLowR1);
 80004c4:	ea43 0204 	orr.w	r2, r3, r4
			CAN1->sFilterRegister[PTR_sFilterInit->FilterMode].FR1 =
 80004c8:	f100 0348 	add.w	r3, r0, #72	; 0x48
 80004cc:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
			break;
 80004d0:	e021      	b.n	8000516 <CAN_initFilter+0x1a6>
					(((u32) PTR_sFilterInit->FilterIdHighR1) << 16)
 80004d2:	687b      	ldr	r3, [r7, #4]
 80004d4:	885b      	ldrh	r3, [r3, #2]
 80004d6:	041b      	lsls	r3, r3, #16
							| (PTR_sFilterInit->FilterIdLowR1);
 80004d8:	687a      	ldr	r2, [r7, #4]
 80004da:	8812      	ldrh	r2, [r2, #0]
 80004dc:	4614      	mov	r4, r2
			CAN1->sFilterRegister[PTR_sFilterInit->FilterNumber].FR1 =
 80004de:	4944      	ldr	r1, [pc, #272]	; (80005f0 <CAN_initFilter+0x280>)
 80004e0:	687a      	ldr	r2, [r7, #4]
 80004e2:	7b92      	ldrb	r2, [r2, #14]
 80004e4:	4610      	mov	r0, r2
							| (PTR_sFilterInit->FilterIdLowR1);
 80004e6:	ea43 0204 	orr.w	r2, r3, r4
			CAN1->sFilterRegister[PTR_sFilterInit->FilterNumber].FR1 =
 80004ea:	f100 0348 	add.w	r3, r0, #72	; 0x48
 80004ee:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
					(((u32) PTR_sFilterInit->FilterIdHighR2) << 16)
 80004f2:	687b      	ldr	r3, [r7, #4]
 80004f4:	88db      	ldrh	r3, [r3, #6]
 80004f6:	041b      	lsls	r3, r3, #16
							| (PTR_sFilterInit->FilterIdLowR2);
 80004f8:	687a      	ldr	r2, [r7, #4]
 80004fa:	8892      	ldrh	r2, [r2, #4]
 80004fc:	4614      	mov	r4, r2
			CAN1->sFilterRegister[PTR_sFilterInit->FilterNumber].FR2 =
 80004fe:	493c      	ldr	r1, [pc, #240]	; (80005f0 <CAN_initFilter+0x280>)
 8000500:	687a      	ldr	r2, [r7, #4]
 8000502:	7b92      	ldrb	r2, [r2, #14]
 8000504:	4610      	mov	r0, r2
							| (PTR_sFilterInit->FilterIdLowR2);
 8000506:	ea43 0204 	orr.w	r2, r3, r4
			CAN1->sFilterRegister[PTR_sFilterInit->FilterNumber].FR2 =
 800050a:	f100 0348 	add.w	r3, r0, #72	; 0x48
 800050e:	00db      	lsls	r3, r3, #3
 8000510:	440b      	add	r3, r1
 8000512:	605a      	str	r2, [r3, #4]
			break;
 8000514:	bf00      	nop
		break;
 8000516:	e05e      	b.n	80005d6 <CAN_initFilter+0x266>

	case DOUBLE_16: {
		switch (PTR_sFilterInit->FilterMode) {
 8000518:	687b      	ldr	r3, [r7, #4]
 800051a:	7bdb      	ldrb	r3, [r3, #15]
 800051c:	2b00      	cmp	r3, #0
 800051e:	d002      	beq.n	8000526 <CAN_initFilter+0x1b6>
 8000520:	2b01      	cmp	r3, #1
 8000522:	d036      	beq.n	8000592 <CAN_initFilter+0x222>
							| (((u32) PTR_sFilterInit->FilterIdHighR2) << 16);
		}
			break;
		}
	}
		break;
 8000524:	e056      	b.n	80005d4 <CAN_initFilter+0x264>
					(PTR_sFilterInit->FilterIdLowR1);
 8000526:	687b      	ldr	r3, [r7, #4]
 8000528:	8819      	ldrh	r1, [r3, #0]
			CAN1->sFilterRegister[PTR_sFilterInit->FilterNumber].FR1 =
 800052a:	4a31      	ldr	r2, [pc, #196]	; (80005f0 <CAN_initFilter+0x280>)
 800052c:	687b      	ldr	r3, [r7, #4]
 800052e:	7b9b      	ldrb	r3, [r3, #14]
 8000530:	3348      	adds	r3, #72	; 0x48
 8000532:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
					(PTR_sFilterInit->FilterIdLowR2);
 8000536:	687b      	ldr	r3, [r7, #4]
 8000538:	8899      	ldrh	r1, [r3, #4]
			CAN1->sFilterRegister[PTR_sFilterInit->FilterNumber].FR2 =
 800053a:	4a2d      	ldr	r2, [pc, #180]	; (80005f0 <CAN_initFilter+0x280>)
 800053c:	687b      	ldr	r3, [r7, #4]
 800053e:	7b9b      	ldrb	r3, [r3, #14]
 8000540:	3348      	adds	r3, #72	; 0x48
 8000542:	00db      	lsls	r3, r3, #3
 8000544:	4413      	add	r3, r2
 8000546:	6059      	str	r1, [r3, #4]
			CAN1->sFilterRegister[PTR_sFilterInit->FilterNumber].FR1 |=
 8000548:	4a29      	ldr	r2, [pc, #164]	; (80005f0 <CAN_initFilter+0x280>)
 800054a:	687b      	ldr	r3, [r7, #4]
 800054c:	7b9b      	ldrb	r3, [r3, #14]
 800054e:	3348      	adds	r3, #72	; 0x48
 8000550:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
					(((u32) PTR_sFilterInit->FilterMaskIdLow) << 16);
 8000554:	687b      	ldr	r3, [r7, #4]
 8000556:	895b      	ldrh	r3, [r3, #10]
 8000558:	041b      	lsls	r3, r3, #16
			CAN1->sFilterRegister[PTR_sFilterInit->FilterNumber].FR1 |=
 800055a:	4825      	ldr	r0, [pc, #148]	; (80005f0 <CAN_initFilter+0x280>)
 800055c:	6879      	ldr	r1, [r7, #4]
 800055e:	7b89      	ldrb	r1, [r1, #14]
 8000560:	431a      	orrs	r2, r3
 8000562:	f101 0348 	add.w	r3, r1, #72	; 0x48
 8000566:	f840 2033 	str.w	r2, [r0, r3, lsl #3]
			CAN1->sFilterRegister[PTR_sFilterInit->FilterNumber].FR2 |=
 800056a:	4a21      	ldr	r2, [pc, #132]	; (80005f0 <CAN_initFilter+0x280>)
 800056c:	687b      	ldr	r3, [r7, #4]
 800056e:	7b9b      	ldrb	r3, [r3, #14]
 8000570:	3348      	adds	r3, #72	; 0x48
 8000572:	00db      	lsls	r3, r3, #3
 8000574:	4413      	add	r3, r2
 8000576:	685a      	ldr	r2, [r3, #4]
					(((u32) PTR_sFilterInit->FilterMaskIdHigh) << 16);
 8000578:	687b      	ldr	r3, [r7, #4]
 800057a:	891b      	ldrh	r3, [r3, #8]
 800057c:	041b      	lsls	r3, r3, #16
			CAN1->sFilterRegister[PTR_sFilterInit->FilterNumber].FR2 |=
 800057e:	481c      	ldr	r0, [pc, #112]	; (80005f0 <CAN_initFilter+0x280>)
 8000580:	6879      	ldr	r1, [r7, #4]
 8000582:	7b89      	ldrb	r1, [r1, #14]
 8000584:	431a      	orrs	r2, r3
 8000586:	f101 0348 	add.w	r3, r1, #72	; 0x48
 800058a:	00db      	lsls	r3, r3, #3
 800058c:	4403      	add	r3, r0
 800058e:	605a      	str	r2, [r3, #4]
			break;
 8000590:	e020      	b.n	80005d4 <CAN_initFilter+0x264>
					(PTR_sFilterInit->FilterIdLowR1)
 8000592:	687b      	ldr	r3, [r7, #4]
 8000594:	881b      	ldrh	r3, [r3, #0]
 8000596:	461c      	mov	r4, r3
							| (((u32) PTR_sFilterInit->FilterIdHighR1) << 16);
 8000598:	687b      	ldr	r3, [r7, #4]
 800059a:	885b      	ldrh	r3, [r3, #2]
 800059c:	041b      	lsls	r3, r3, #16
			CAN1->sFilterRegister[PTR_sFilterInit->FilterNumber].FR1 =
 800059e:	4914      	ldr	r1, [pc, #80]	; (80005f0 <CAN_initFilter+0x280>)
 80005a0:	687a      	ldr	r2, [r7, #4]
 80005a2:	7b92      	ldrb	r2, [r2, #14]
 80005a4:	4610      	mov	r0, r2
							| (((u32) PTR_sFilterInit->FilterIdHighR1) << 16);
 80005a6:	ea44 0203 	orr.w	r2, r4, r3
			CAN1->sFilterRegister[PTR_sFilterInit->FilterNumber].FR1 =
 80005aa:	f100 0348 	add.w	r3, r0, #72	; 0x48
 80005ae:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
					(PTR_sFilterInit->FilterIdLowR2)
 80005b2:	687b      	ldr	r3, [r7, #4]
 80005b4:	889b      	ldrh	r3, [r3, #4]
 80005b6:	461c      	mov	r4, r3
							| (((u32) PTR_sFilterInit->FilterIdHighR2) << 16);
 80005b8:	687b      	ldr	r3, [r7, #4]
 80005ba:	88db      	ldrh	r3, [r3, #6]
 80005bc:	041b      	lsls	r3, r3, #16
			CAN1->sFilterRegister[PTR_sFilterInit->FilterNumber].FR1 =
 80005be:	490c      	ldr	r1, [pc, #48]	; (80005f0 <CAN_initFilter+0x280>)
 80005c0:	687a      	ldr	r2, [r7, #4]
 80005c2:	7b92      	ldrb	r2, [r2, #14]
 80005c4:	4610      	mov	r0, r2
							| (((u32) PTR_sFilterInit->FilterIdHighR2) << 16);
 80005c6:	ea44 0203 	orr.w	r2, r4, r3
			CAN1->sFilterRegister[PTR_sFilterInit->FilterNumber].FR1 =
 80005ca:	f100 0348 	add.w	r3, r0, #72	; 0x48
 80005ce:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
			break;
 80005d2:	bf00      	nop
		break;
 80005d4:	bf00      	nop
	}
	CLR_BIT(CAN1->FMR, FMR_FINIT);
 80005d6:	4b06      	ldr	r3, [pc, #24]	; (80005f0 <CAN_initFilter+0x280>)
 80005d8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80005dc:	4a04      	ldr	r2, [pc, #16]	; (80005f0 <CAN_initFilter+0x280>)
 80005de:	f023 0301 	bic.w	r3, r3, #1
 80005e2:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
}
 80005e6:	bf00      	nop
 80005e8:	3708      	adds	r7, #8
 80005ea:	46bd      	mov	sp, r7
 80005ec:	bc90      	pop	{r4, r7}
 80005ee:	4770      	bx	lr
 80005f0:	40006400 	.word	0x40006400

080005f4 <CAN_setSlaveStartBank>:

void CAN_setSlaveStartBank(u8 Copy_u8CANBankNumber) {
 80005f4:	b480      	push	{r7}
 80005f6:	b083      	sub	sp, #12
 80005f8:	af00      	add	r7, sp, #0
 80005fa:	4603      	mov	r3, r0
 80005fc:	71fb      	strb	r3, [r7, #7]
	/* define the start bank for the CAN2 interface in range from ( 0 to 27 ) */
	/* assign 0 to CAN2SB[5:0] == no filters are assigned to CAN1
	 * assign 28 to CAN2SB[5:0] == all filters are assigned to CAN1
	 */

	CAN1->FMR = 0x2A1C0E01; /* register RESET value */
 80005fe:	4b0e      	ldr	r3, [pc, #56]	; (8000638 <CAN_setSlaveStartBank+0x44>)
 8000600:	4a0e      	ldr	r2, [pc, #56]	; (800063c <CAN_setSlaveStartBank+0x48>)
 8000602:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

	CAN1->FMR |= (Copy_u8CANBankNumber & 0x3F) << CAN2SB;
 8000606:	4b0c      	ldr	r3, [pc, #48]	; (8000638 <CAN_setSlaveStartBank+0x44>)
 8000608:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 800060c:	79fb      	ldrb	r3, [r7, #7]
 800060e:	021b      	lsls	r3, r3, #8
 8000610:	f403 537c 	and.w	r3, r3, #16128	; 0x3f00
 8000614:	4908      	ldr	r1, [pc, #32]	; (8000638 <CAN_setSlaveStartBank+0x44>)
 8000616:	4313      	orrs	r3, r2
 8000618:	f8c1 3200 	str.w	r3, [r1, #512]	; 0x200

	CLR_BIT(CAN1->FMR, FINIT); /* active filter mode enabled */
 800061c:	4b06      	ldr	r3, [pc, #24]	; (8000638 <CAN_setSlaveStartBank+0x44>)
 800061e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8000622:	4a05      	ldr	r2, [pc, #20]	; (8000638 <CAN_setSlaveStartBank+0x44>)
 8000624:	f023 0301 	bic.w	r3, r3, #1
 8000628:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
}
 800062c:	bf00      	nop
 800062e:	370c      	adds	r7, #12
 8000630:	46bd      	mov	sp, r7
 8000632:	bc80      	pop	{r7}
 8000634:	4770      	bx	lr
 8000636:	bf00      	nop
 8000638:	40006400 	.word	0x40006400
 800063c:	2a1c0e01 	.word	0x2a1c0e01

08000640 <CAN_receive>:
	/* Return The used MailBox*/
	return Local_CAN_TxMailBox_TypeDef_CurrentMailBox;
}

void CAN_receive(CAN_TypeDef *CANx, CAN_Rx_FIFO_TypeDef FIFONumber,
		CanRxMsg *RxMessage) {
 8000640:	b480      	push	{r7}
 8000642:	b085      	sub	sp, #20
 8000644:	af00      	add	r7, sp, #0
 8000646:	60f8      	str	r0, [r7, #12]
 8000648:	460b      	mov	r3, r1
 800064a:	607a      	str	r2, [r7, #4]
 800064c:	72fb      	strb	r3, [r7, #11]

	/* Check if the selected mailbox is empty */
	switch (FIFONumber) {
 800064e:	7afb      	ldrb	r3, [r7, #11]
 8000650:	2b00      	cmp	r3, #0
 8000652:	d002      	beq.n	800065a <CAN_receive+0x1a>
 8000654:	2b01      	cmp	r3, #1
 8000656:	d007      	beq.n	8000668 <CAN_receive+0x28>
 8000658:	e00f      	b.n	800067a <CAN_receive+0x3a>
	/*If the first FIFO mailbox is selected*/
	case (CAN_RX_FIFO_1): {
		if ((CANx->RF0R & 0x3) == 0U) {
 800065a:	68fb      	ldr	r3, [r7, #12]
 800065c:	68db      	ldr	r3, [r3, #12]
 800065e:	f003 0303 	and.w	r3, r3, #3
 8000662:	2b00      	cmp	r3, #0
 8000664:	d108      	bne.n	8000678 <CAN_receive+0x38>
			return;
 8000666:	e0c8      	b.n	80007fa <CAN_receive+0x1ba>
		}
		break;
	}
		/*If the second FIFO mailbox is selected*/
	case (CAN_RX_FIFO_2): {
		if ((CANx->RF1R & 0x3) == 0U) {
 8000668:	68fb      	ldr	r3, [r7, #12]
 800066a:	691b      	ldr	r3, [r3, #16]
 800066c:	f003 0303 	and.w	r3, r3, #3
 8000670:	2b00      	cmp	r3, #0
 8000672:	f000 80c1 	beq.w	80007f8 <CAN_receive+0x1b8>
			return;
		}
		break;
 8000676:	e000      	b.n	800067a <CAN_receive+0x3a>
		break;
 8000678:	bf00      	nop
	}
	}

	/*Getting the identifier type either Standard or Extended from received message*/
	RxMessage->IDE = (u8) GET_BIT(CANx->sFIFOMailBox[FIFONumber].RIR, RIR_IDE);
 800067a:	7afb      	ldrb	r3, [r7, #11]
 800067c:	68fa      	ldr	r2, [r7, #12]
 800067e:	331b      	adds	r3, #27
 8000680:	011b      	lsls	r3, r3, #4
 8000682:	4413      	add	r3, r2
 8000684:	681b      	ldr	r3, [r3, #0]
 8000686:	089b      	lsrs	r3, r3, #2
 8000688:	b2db      	uxtb	r3, r3
 800068a:	f003 0301 	and.w	r3, r3, #1
 800068e:	b2da      	uxtb	r2, r3
 8000690:	687b      	ldr	r3, [r7, #4]
 8000692:	721a      	strb	r2, [r3, #8]

	/*Operating depending on the received identifier type*/
	switch (RxMessage->IDE) {
 8000694:	687b      	ldr	r3, [r7, #4]
 8000696:	7a1b      	ldrb	r3, [r3, #8]
 8000698:	2b00      	cmp	r3, #0
 800069a:	d002      	beq.n	80006a2 <CAN_receive+0x62>
 800069c:	2b01      	cmp	r3, #1
 800069e:	d00d      	beq.n	80006bc <CAN_receive+0x7c>
 80006a0:	e018      	b.n	80006d4 <CAN_receive+0x94>
	/*Standard Identifier*/
	case (CAN_STANDARD_IDENTIFIER): {
		/*Get the value of the Standard Identifier*/
		RxMessage->StdId = (u16) ((CANx->sFIFOMailBox[FIFONumber].RIR
 80006a2:	7afb      	ldrb	r3, [r7, #11]
 80006a4:	68fa      	ldr	r2, [r7, #12]
 80006a6:	331b      	adds	r3, #27
 80006a8:	011b      	lsls	r3, r3, #4
 80006aa:	4413      	add	r3, r2
 80006ac:	681b      	ldr	r3, [r3, #0]
				>> RIR_STID_11BITS) & 0x000007FF);
 80006ae:	0d5b      	lsrs	r3, r3, #21
		RxMessage->StdId = (u16) ((CANx->sFIFOMailBox[FIFONumber].RIR
 80006b0:	b29b      	uxth	r3, r3
 80006b2:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80006b6:	687b      	ldr	r3, [r7, #4]
 80006b8:	601a      	str	r2, [r3, #0]
		break;
 80006ba:	e00b      	b.n	80006d4 <CAN_receive+0x94>
	}
		/*Extended Identifier*/
	case (CAN_EXTENDED_IDENTIFIER): {
		/*Get the value of the Extended Identifier*/
		RxMessage->ExtId = (u32) ((CANx->sFIFOMailBox[FIFONumber].RIR
 80006bc:	7afb      	ldrb	r3, [r7, #11]
 80006be:	68fa      	ldr	r2, [r7, #12]
 80006c0:	331b      	adds	r3, #27
 80006c2:	011b      	lsls	r3, r3, #4
 80006c4:	4413      	add	r3, r2
 80006c6:	681b      	ldr	r3, [r3, #0]
				>> RIR_EXID_17BITS) & 0x1FFFFFFF);
 80006c8:	08db      	lsrs	r3, r3, #3
		RxMessage->ExtId = (u32) ((CANx->sFIFOMailBox[FIFONumber].RIR
 80006ca:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 80006ce:	687b      	ldr	r3, [r7, #4]
 80006d0:	605a      	str	r2, [r3, #4]
		break;
 80006d2:	bf00      	nop
	}
	}

	/*Get the value of the frame either it is data or remote*/
	RxMessage->RTR = GET_BIT(CANx->sFIFOMailBox[FIFONumber].RIR, RIR_RTR);
 80006d4:	7afb      	ldrb	r3, [r7, #11]
 80006d6:	68fa      	ldr	r2, [r7, #12]
 80006d8:	331b      	adds	r3, #27
 80006da:	011b      	lsls	r3, r3, #4
 80006dc:	4413      	add	r3, r2
 80006de:	681b      	ldr	r3, [r3, #0]
 80006e0:	085b      	lsrs	r3, r3, #1
 80006e2:	b2db      	uxtb	r3, r3
 80006e4:	f003 0301 	and.w	r3, r3, #1
 80006e8:	b2da      	uxtb	r2, r3
 80006ea:	687b      	ldr	r3, [r7, #4]
 80006ec:	725a      	strb	r2, [r3, #9]

	/*Get the value of the data length code*/
	RxMessage->DLC = (u8) (0x0F & (CANx->sFIFOMailBox[FIFONumber].RDTR));
 80006ee:	7afb      	ldrb	r3, [r7, #11]
 80006f0:	68fa      	ldr	r2, [r7, #12]
 80006f2:	331b      	adds	r3, #27
 80006f4:	011b      	lsls	r3, r3, #4
 80006f6:	4413      	add	r3, r2
 80006f8:	3304      	adds	r3, #4
 80006fa:	681b      	ldr	r3, [r3, #0]
 80006fc:	b2db      	uxtb	r3, r3
 80006fe:	f003 030f 	and.w	r3, r3, #15
 8000702:	b2da      	uxtb	r2, r3
 8000704:	687b      	ldr	r3, [r7, #4]
 8000706:	729a      	strb	r2, [r3, #10]

	/*Read the index of the filter message*/
	RxMessage->FMI = (u8) (0x0F
			& (CANx->sFIFOMailBox[FIFONumber].RDTR >> RDTR_FMI_8BITS));
 8000708:	7afb      	ldrb	r3, [r7, #11]
 800070a:	68fa      	ldr	r2, [r7, #12]
 800070c:	331b      	adds	r3, #27
 800070e:	011b      	lsls	r3, r3, #4
 8000710:	4413      	add	r3, r2
 8000712:	3304      	adds	r3, #4
 8000714:	681b      	ldr	r3, [r3, #0]
 8000716:	0a1b      	lsrs	r3, r3, #8
	RxMessage->FMI = (u8) (0x0F
 8000718:	b2db      	uxtb	r3, r3
 800071a:	f003 030f 	and.w	r3, r3, #15
 800071e:	b2da      	uxtb	r2, r3
 8000720:	687b      	ldr	r3, [r7, #4]
 8000722:	74da      	strb	r2, [r3, #19]

	/*Read the data received*/
	/*Reading the data from the RDLR register*/
	RxMessage->Data[0] = (u8) (0xFF & (CANx->sFIFOMailBox[FIFONumber].RDLR));
 8000724:	7afb      	ldrb	r3, [r7, #11]
 8000726:	68fa      	ldr	r2, [r7, #12]
 8000728:	011b      	lsls	r3, r3, #4
 800072a:	4413      	add	r3, r2
 800072c:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8000730:	681b      	ldr	r3, [r3, #0]
 8000732:	b2da      	uxtb	r2, r3
 8000734:	687b      	ldr	r3, [r7, #4]
 8000736:	72da      	strb	r2, [r3, #11]
	RxMessage->Data[1] =
			(u8) (0xFF & (CANx->sFIFOMailBox[FIFONumber].RDLR >> 8));
 8000738:	7afb      	ldrb	r3, [r7, #11]
 800073a:	68fa      	ldr	r2, [r7, #12]
 800073c:	011b      	lsls	r3, r3, #4
 800073e:	4413      	add	r3, r2
 8000740:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8000744:	681b      	ldr	r3, [r3, #0]
 8000746:	0a1b      	lsrs	r3, r3, #8
 8000748:	b2da      	uxtb	r2, r3
	RxMessage->Data[1] =
 800074a:	687b      	ldr	r3, [r7, #4]
 800074c:	731a      	strb	r2, [r3, #12]
	RxMessage->Data[2] = (u8) (0xFF
			& (CANx->sFIFOMailBox[FIFONumber].RDLR >> 16));
 800074e:	7afb      	ldrb	r3, [r7, #11]
 8000750:	68fa      	ldr	r2, [r7, #12]
 8000752:	011b      	lsls	r3, r3, #4
 8000754:	4413      	add	r3, r2
 8000756:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800075a:	681b      	ldr	r3, [r3, #0]
 800075c:	0c1b      	lsrs	r3, r3, #16
	RxMessage->Data[2] = (u8) (0xFF
 800075e:	b2da      	uxtb	r2, r3
 8000760:	687b      	ldr	r3, [r7, #4]
 8000762:	735a      	strb	r2, [r3, #13]
	RxMessage->Data[3] = (u8) (0xFF
			& (CANx->sFIFOMailBox[FIFONumber].RDLR >> 24));
 8000764:	7afb      	ldrb	r3, [r7, #11]
 8000766:	68fa      	ldr	r2, [r7, #12]
 8000768:	011b      	lsls	r3, r3, #4
 800076a:	4413      	add	r3, r2
 800076c:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8000770:	681b      	ldr	r3, [r3, #0]
 8000772:	0e1b      	lsrs	r3, r3, #24
	RxMessage->Data[3] = (u8) (0xFF
 8000774:	b2da      	uxtb	r2, r3
 8000776:	687b      	ldr	r3, [r7, #4]
 8000778:	739a      	strb	r2, [r3, #14]
	/*Reading the data from the RDHR register*/
	RxMessage->Data[4] = (u8) (0xFF & (CANx->sFIFOMailBox[FIFONumber].RDHR));
 800077a:	7afb      	ldrb	r3, [r7, #11]
 800077c:	68fa      	ldr	r2, [r7, #12]
 800077e:	011b      	lsls	r3, r3, #4
 8000780:	4413      	add	r3, r2
 8000782:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8000786:	681b      	ldr	r3, [r3, #0]
 8000788:	b2da      	uxtb	r2, r3
 800078a:	687b      	ldr	r3, [r7, #4]
 800078c:	73da      	strb	r2, [r3, #15]
	RxMessage->Data[5] =
			(u8) (0xFF & (CANx->sFIFOMailBox[FIFONumber].RDHR >> 8));
 800078e:	7afb      	ldrb	r3, [r7, #11]
 8000790:	68fa      	ldr	r2, [r7, #12]
 8000792:	011b      	lsls	r3, r3, #4
 8000794:	4413      	add	r3, r2
 8000796:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800079a:	681b      	ldr	r3, [r3, #0]
 800079c:	0a1b      	lsrs	r3, r3, #8
 800079e:	b2da      	uxtb	r2, r3
	RxMessage->Data[5] =
 80007a0:	687b      	ldr	r3, [r7, #4]
 80007a2:	741a      	strb	r2, [r3, #16]
	RxMessage->Data[6] = (u8) (0xFF
			& (CANx->sFIFOMailBox[FIFONumber].RDHR >> 16));
 80007a4:	7afb      	ldrb	r3, [r7, #11]
 80007a6:	68fa      	ldr	r2, [r7, #12]
 80007a8:	011b      	lsls	r3, r3, #4
 80007aa:	4413      	add	r3, r2
 80007ac:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80007b0:	681b      	ldr	r3, [r3, #0]
 80007b2:	0c1b      	lsrs	r3, r3, #16
	RxMessage->Data[6] = (u8) (0xFF
 80007b4:	b2da      	uxtb	r2, r3
 80007b6:	687b      	ldr	r3, [r7, #4]
 80007b8:	745a      	strb	r2, [r3, #17]
	RxMessage->Data[7] = (u8) (0xFF
			& (CANx->sFIFOMailBox[FIFONumber].RDHR >> 24));
 80007ba:	7afb      	ldrb	r3, [r7, #11]
 80007bc:	68fa      	ldr	r2, [r7, #12]
 80007be:	011b      	lsls	r3, r3, #4
 80007c0:	4413      	add	r3, r2
 80007c2:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80007c6:	681b      	ldr	r3, [r3, #0]
 80007c8:	0e1b      	lsrs	r3, r3, #24
	RxMessage->Data[7] = (u8) (0xFF
 80007ca:	b2da      	uxtb	r2, r3
 80007cc:	687b      	ldr	r3, [r7, #4]
 80007ce:	749a      	strb	r2, [r3, #18]
	/*Checking on the entered FIFO number to know which mailbox to work with*/
	switch (FIFONumber) {
 80007d0:	7afb      	ldrb	r3, [r7, #11]
 80007d2:	2b00      	cmp	r3, #0
 80007d4:	d002      	beq.n	80007dc <CAN_receive+0x19c>
 80007d6:	2b01      	cmp	r3, #1
 80007d8:	d007      	beq.n	80007ea <CAN_receive+0x1aa>
 80007da:	e00e      	b.n	80007fa <CAN_receive+0x1ba>
	/*If the first FIFO mailbox is selected*/
	case (CAN_RX_FIFO_1): {
		/*Setting the RFOM bit to release output from mailbox*/
		SET_BIT(CANx->RF0R, RFR_RFOM);
 80007dc:	68fb      	ldr	r3, [r7, #12]
 80007de:	68db      	ldr	r3, [r3, #12]
 80007e0:	f043 0220 	orr.w	r2, r3, #32
 80007e4:	68fb      	ldr	r3, [r7, #12]
 80007e6:	60da      	str	r2, [r3, #12]
		break;
 80007e8:	e007      	b.n	80007fa <CAN_receive+0x1ba>
	}
		/*If the second FIFO mailbox is selected*/
	case (CAN_RX_FIFO_2): {
		/*Setting the RFOM bit to release output from mailbox*/
		SET_BIT(CANx->RF1R, RFR_RFOM);
 80007ea:	68fb      	ldr	r3, [r7, #12]
 80007ec:	691b      	ldr	r3, [r3, #16]
 80007ee:	f043 0220 	orr.w	r2, r3, #32
 80007f2:	68fb      	ldr	r3, [r7, #12]
 80007f4:	611a      	str	r2, [r3, #16]
		break;
 80007f6:	e000      	b.n	80007fa <CAN_receive+0x1ba>
			return;
 80007f8:	bf00      	nop
	}
	}
}
 80007fa:	3714      	adds	r7, #20
 80007fc:	46bd      	mov	sp, r7
 80007fe:	bc80      	pop	{r7}
 8000800:	4770      	bx	lr

08000802 <CAN_formatIdentifierIntoFRx>:

u32 CAN_formatIdentifierIntoFRx(u32 STDID, u32 EXTID,
		CAN_Identifier_TypeDef a_idType, CAN_FilterScale scale, u8 RTR) {
 8000802:	b480      	push	{r7}
 8000804:	b087      	sub	sp, #28
 8000806:	af00      	add	r7, sp, #0
 8000808:	60f8      	str	r0, [r7, #12]
 800080a:	60b9      	str	r1, [r7, #8]
 800080c:	4611      	mov	r1, r2
 800080e:	461a      	mov	r2, r3
 8000810:	460b      	mov	r3, r1
 8000812:	71fb      	strb	r3, [r7, #7]
 8000814:	4613      	mov	r3, r2
 8000816:	71bb      	strb	r3, [r7, #6]

	CAN_FilterRegisterUnion_Single32 FRx_union32 = { 0 };
 8000818:	2300      	movs	r3, #0
 800081a:	617b      	str	r3, [r7, #20]

	CAN_FilterRegisterUnion_Double16 FRx_union16 = { 0 };
 800081c:	2300      	movs	r3, #0
 800081e:	823b      	strh	r3, [r7, #16]

	RTR &= 0x1;
 8000820:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000824:	f003 0301 	and.w	r3, r3, #1
 8000828:	f887 3020 	strb.w	r3, [r7, #32]
	/* Union used to set the identifier bits as the mapping in actual FRx register */

	switch (a_idType) {
 800082c:	79fb      	ldrb	r3, [r7, #7]
 800082e:	2b00      	cmp	r3, #0
 8000830:	d002      	beq.n	8000838 <CAN_formatIdentifierIntoFRx+0x36>
 8000832:	2b01      	cmp	r3, #1
 8000834:	d044      	beq.n	80008c0 <CAN_formatIdentifierIntoFRx+0xbe>
 8000836:	e0a7      	b.n	8000988 <CAN_formatIdentifierIntoFRx+0x186>
	case CAN_STANDARD_IDENTIFIER:

		/* Sanitize input: Mask the first 11 bits */
		STDID &= 0x7FF;
 8000838:	68fb      	ldr	r3, [r7, #12]
 800083a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800083e:	60fb      	str	r3, [r7, #12]
		switch (scale) {
 8000840:	79bb      	ldrb	r3, [r7, #6]
 8000842:	2b00      	cmp	r3, #0
 8000844:	d01d      	beq.n	8000882 <CAN_formatIdentifierIntoFRx+0x80>
 8000846:	2b01      	cmp	r3, #1
 8000848:	f040 809b 	bne.w	8000982 <CAN_formatIdentifierIntoFRx+0x180>
		case SINGLE_32:

			/* Set IDE bit */
			FRx_union32.Bits.IDE = a_idType;
 800084c:	79fb      	ldrb	r3, [r7, #7]
 800084e:	f003 0301 	and.w	r3, r3, #1
 8000852:	b2da      	uxtb	r2, r3
 8000854:	7d3b      	ldrb	r3, [r7, #20]
 8000856:	f362 0382 	bfi	r3, r2, #2, #1
 800085a:	753b      	strb	r3, [r7, #20]
			/* Set RTR bit */
			FRx_union32.Bits.RTR = RTR;
 800085c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000860:	f003 0301 	and.w	r3, r3, #1
 8000864:	b2da      	uxtb	r2, r3
 8000866:	7d3b      	ldrb	r3, [r7, #20]
 8000868:	f362 0341 	bfi	r3, r2, #1, #1
 800086c:	753b      	strb	r3, [r7, #20]
			/* Set all 11 bits of STID */
			FRx_union32.Bits.STID = STDID;
 800086e:	68fb      	ldr	r3, [r7, #12]
 8000870:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8000874:	b29a      	uxth	r2, r3
 8000876:	8afb      	ldrh	r3, [r7, #22]
 8000878:	f362 134f 	bfi	r3, r2, #5, #11
 800087c:	82fb      	strh	r3, [r7, #22]

			return FRx_union32.FRx;
 800087e:	697b      	ldr	r3, [r7, #20]
 8000880:	e083      	b.n	800098a <CAN_formatIdentifierIntoFRx+0x188>
			break;

		case DOUBLE_16:

			/* Set IDE bit */
			FRx_union32.Bits.IDE = a_idType;
 8000882:	79fb      	ldrb	r3, [r7, #7]
 8000884:	f003 0301 	and.w	r3, r3, #1
 8000888:	b2da      	uxtb	r2, r3
 800088a:	7d3b      	ldrb	r3, [r7, #20]
 800088c:	f362 0382 	bfi	r3, r2, #2, #1
 8000890:	753b      	strb	r3, [r7, #20]
			/* Set RTR bit */
			FRx_union32.Bits.RTR = RTR;
 8000892:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000896:	f003 0301 	and.w	r3, r3, #1
 800089a:	b2da      	uxtb	r2, r3
 800089c:	7d3b      	ldrb	r3, [r7, #20]
 800089e:	f362 0341 	bfi	r3, r2, #1, #1
 80008a2:	753b      	strb	r3, [r7, #20]
			/* Set 1st 3 bits of STID */
			FRx_union16.Bits.STID_0_2 = STDID & 0x7UL;
 80008a4:	68fb      	ldr	r3, [r7, #12]
 80008a6:	f003 0307 	and.w	r3, r3, #7
 80008aa:	b2da      	uxtb	r2, r3
 80008ac:	7c3b      	ldrb	r3, [r7, #16]
 80008ae:	f362 1347 	bfi	r3, r2, #5, #3
 80008b2:	743b      	strb	r3, [r7, #16]
			/* Set rest of the bits of STID */
			FRx_union16.Bits.STID_3_10 = ((STDID >> 3) & 0xFFUL);
 80008b4:	68fb      	ldr	r3, [r7, #12]
 80008b6:	08db      	lsrs	r3, r3, #3
 80008b8:	b2db      	uxtb	r3, r3
 80008ba:	747b      	strb	r3, [r7, #17]

			return FRx_union16.FRx;
 80008bc:	8a3b      	ldrh	r3, [r7, #16]
 80008be:	e064      	b.n	800098a <CAN_formatIdentifierIntoFRx+0x188>

		break;
	case CAN_EXTENDED_IDENTIFIER:

		/* Sanitize input: Mask the first 11 bits */
		STDID &= 0x7FF;
 80008c0:	68fb      	ldr	r3, [r7, #12]
 80008c2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80008c6:	60fb      	str	r3, [r7, #12]
		/* Sanitize input: Mask the first 18 bits */
		EXTID &= 0x3FFFF;
 80008c8:	68bb      	ldr	r3, [r7, #8]
 80008ca:	f3c3 0311 	ubfx	r3, r3, #0, #18
 80008ce:	60bb      	str	r3, [r7, #8]

		switch (scale) {
 80008d0:	79bb      	ldrb	r3, [r7, #6]
 80008d2:	2b00      	cmp	r3, #0
 80008d4:	d02d      	beq.n	8000932 <CAN_formatIdentifierIntoFRx+0x130>
 80008d6:	2b01      	cmp	r3, #1
 80008d8:	d155      	bne.n	8000986 <CAN_formatIdentifierIntoFRx+0x184>
		case SINGLE_32:

			/* Set IDE bit */
			FRx_union32.Bits.IDE = a_idType;
 80008da:	79fb      	ldrb	r3, [r7, #7]
 80008dc:	f003 0301 	and.w	r3, r3, #1
 80008e0:	b2da      	uxtb	r2, r3
 80008e2:	7d3b      	ldrb	r3, [r7, #20]
 80008e4:	f362 0382 	bfi	r3, r2, #2, #1
 80008e8:	753b      	strb	r3, [r7, #20]
			/* Set RTR bit */
			FRx_union32.Bits.RTR = RTR;
 80008ea:	f897 3020 	ldrb.w	r3, [r7, #32]
 80008ee:	f003 0301 	and.w	r3, r3, #1
 80008f2:	b2da      	uxtb	r2, r3
 80008f4:	7d3b      	ldrb	r3, [r7, #20]
 80008f6:	f362 0341 	bfi	r3, r2, #1, #1
 80008fa:	753b      	strb	r3, [r7, #20]
			/* Set all 11 bits of STID */
			FRx_union32.Bits.STID = STDID;
 80008fc:	68fb      	ldr	r3, [r7, #12]
 80008fe:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8000902:	b29a      	uxth	r2, r3
 8000904:	8afb      	ldrh	r3, [r7, #22]
 8000906:	f362 134f 	bfi	r3, r2, #5, #11
 800090a:	82fb      	strh	r3, [r7, #22]
			/* Get 1st 13 bits from EXTID */
			FRx_union32.Bits.EXID_0_12 = (EXTID & 0x1FFF);
 800090c:	68bb      	ldr	r3, [r7, #8]
 800090e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8000912:	b29a      	uxth	r2, r3
 8000914:	8abb      	ldrh	r3, [r7, #20]
 8000916:	f362 03cf 	bfi	r3, r2, #3, #13
 800091a:	82bb      	strh	r3, [r7, #20]
			/* Get last 5 bits from EXTID */
			FRx_union32.Bits.EXID_13_17 = (EXTID >> 13) & 0x1FULL;
 800091c:	68bb      	ldr	r3, [r7, #8]
 800091e:	0b5b      	lsrs	r3, r3, #13
 8000920:	f003 031f 	and.w	r3, r3, #31
 8000924:	b2da      	uxtb	r2, r3
 8000926:	7dbb      	ldrb	r3, [r7, #22]
 8000928:	f362 0304 	bfi	r3, r2, #0, #5
 800092c:	75bb      	strb	r3, [r7, #22]

			return FRx_union32.FRx;
 800092e:	697b      	ldr	r3, [r7, #20]
 8000930:	e02b      	b.n	800098a <CAN_formatIdentifierIntoFRx+0x188>

			break;
		case DOUBLE_16:

			/* Set IDE bit */
			FRx_union16.Bits.IDE = a_idType;
 8000932:	79fb      	ldrb	r3, [r7, #7]
 8000934:	f003 0301 	and.w	r3, r3, #1
 8000938:	b2da      	uxtb	r2, r3
 800093a:	7c3b      	ldrb	r3, [r7, #16]
 800093c:	f362 03c3 	bfi	r3, r2, #3, #1
 8000940:	743b      	strb	r3, [r7, #16]
			/* Set RTR bit */
			FRx_union16.Bits.RTR = RTR;
 8000942:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000946:	f003 0301 	and.w	r3, r3, #1
 800094a:	b2da      	uxtb	r2, r3
 800094c:	7c3b      	ldrb	r3, [r7, #16]
 800094e:	f362 1304 	bfi	r3, r2, #4, #1
 8000952:	743b      	strb	r3, [r7, #16]
			/* Set 1st 3 bits of STID */
			FRx_union16.Bits.STID_0_2 = STDID & 0x7UL;
 8000954:	68fb      	ldr	r3, [r7, #12]
 8000956:	f003 0307 	and.w	r3, r3, #7
 800095a:	b2da      	uxtb	r2, r3
 800095c:	7c3b      	ldrb	r3, [r7, #16]
 800095e:	f362 1347 	bfi	r3, r2, #5, #3
 8000962:	743b      	strb	r3, [r7, #16]
			/* Set rest of the bits of STID */
			FRx_union16.Bits.STID_3_10 = ((STDID >> 3) & 0xFFUL);
 8000964:	68fb      	ldr	r3, [r7, #12]
 8000966:	08db      	lsrs	r3, r3, #3
 8000968:	b2db      	uxtb	r3, r3
 800096a:	747b      	strb	r3, [r7, #17]
			/* Get last 3 bits from EXTID */
			FRx_union16.Bits.EXID_15_17 = ((EXTID >> 15) & 0x7UL);
 800096c:	68bb      	ldr	r3, [r7, #8]
 800096e:	0bdb      	lsrs	r3, r3, #15
 8000970:	f003 0307 	and.w	r3, r3, #7
 8000974:	b2da      	uxtb	r2, r3
 8000976:	7c3b      	ldrb	r3, [r7, #16]
 8000978:	f362 0302 	bfi	r3, r2, #0, #3
 800097c:	743b      	strb	r3, [r7, #16]

			return FRx_union16.FRx;
 800097e:	8a3b      	ldrh	r3, [r7, #16]
 8000980:	e003      	b.n	800098a <CAN_formatIdentifierIntoFRx+0x188>
		break;
 8000982:	bf00      	nop
 8000984:	e000      	b.n	8000988 <CAN_formatIdentifierIntoFRx+0x186>
			// FRx_Low = (EXTID >> 15) | (STDID << 5) | (RTR << 5) | (1 << 4);
			// FRx_High = (STDID >> 3);
			// FRx = (FRx_High << 16) | FRx_Low;
			break;
		}
		break;
 8000986:	bf00      	nop
	}
	return 0;
 8000988:	2300      	movs	r3, #0
}
 800098a:	4618      	mov	r0, r3
 800098c:	371c      	adds	r7, #28
 800098e:	46bd      	mov	sp, r7
 8000990:	bc80      	pop	{r7}
 8000992:	4770      	bx	lr

08000994 <CAN_appendDeviceToBus>:

CAN_Status_Typedef CAN_appendDeviceToBus(u32 devID,
		CAN_Identifier_TypeDef a_idType) {
 8000994:	b580      	push	{r7, lr}
 8000996:	b08c      	sub	sp, #48	; 0x30
 8000998:	af02      	add	r7, sp, #8
 800099a:	6078      	str	r0, [r7, #4]
 800099c:	460b      	mov	r3, r1
 800099e:	70fb      	strb	r3, [r7, #3]

	if (CAN_devicesCount == CAN_MAX_DEVICES_COUNT)
 80009a0:	4b6d      	ldr	r3, [pc, #436]	; (8000b58 <CAN_appendDeviceToBus+0x1c4>)
 80009a2:	781b      	ldrb	r3, [r3, #0]
 80009a4:	b2db      	uxtb	r3, r3
 80009a6:	2b1c      	cmp	r3, #28
 80009a8:	d101      	bne.n	80009ae <CAN_appendDeviceToBus+0x1a>
		return CAN_Status_MaxDevicesReached;
 80009aa:	2308      	movs	r3, #8
 80009ac:	e0d0      	b.n	8000b50 <CAN_appendDeviceToBus+0x1bc>

	CAN_Status_Typedef localStatus = CAN_Status_OK;
 80009ae:	2300      	movs	r3, #0
 80009b0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	u32 FRx_val = 0;
 80009b4:	2300      	movs	r3, #0
 80009b6:	623b      	str	r3, [r7, #32]
	switch (a_idType) {
 80009b8:	78fb      	ldrb	r3, [r7, #3]
 80009ba:	2b00      	cmp	r3, #0
 80009bc:	d002      	beq.n	80009c4 <CAN_appendDeviceToBus+0x30>
 80009be:	2b01      	cmp	r3, #1
 80009c0:	d00a      	beq.n	80009d8 <CAN_appendDeviceToBus+0x44>
 80009c2:	e016      	b.n	80009f2 <CAN_appendDeviceToBus+0x5e>
	case CAN_STANDARD_IDENTIFIER:
		FRx_val = CAN_formatIdentifierIntoFRx(devID, 0, a_idType, SINGLE_32, 0);
 80009c4:	78fa      	ldrb	r2, [r7, #3]
 80009c6:	2300      	movs	r3, #0
 80009c8:	9300      	str	r3, [sp, #0]
 80009ca:	2301      	movs	r3, #1
 80009cc:	2100      	movs	r1, #0
 80009ce:	6878      	ldr	r0, [r7, #4]
 80009d0:	f7ff ff17 	bl	8000802 <CAN_formatIdentifierIntoFRx>
 80009d4:	6238      	str	r0, [r7, #32]
		break;
 80009d6:	e00c      	b.n	80009f2 <CAN_appendDeviceToBus+0x5e>
	case CAN_EXTENDED_IDENTIFIER:
		FRx_val = CAN_formatIdentifierIntoFRx(devID >> 18, devID & 0x3FFFF,
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	0c98      	lsrs	r0, r3, #18
 80009dc:	687b      	ldr	r3, [r7, #4]
 80009de:	f3c3 0111 	ubfx	r1, r3, #0, #18
 80009e2:	78fa      	ldrb	r2, [r7, #3]
 80009e4:	2300      	movs	r3, #0
 80009e6:	9300      	str	r3, [sp, #0]
 80009e8:	2301      	movs	r3, #1
 80009ea:	f7ff ff0a 	bl	8000802 <CAN_formatIdentifierIntoFRx>
 80009ee:	6238      	str	r0, [r7, #32]
				a_idType, SINGLE_32, 0);
		break;
 80009f0:	bf00      	nop
	}
	do {
		/* Index of the first empty filter found (de-activated filter)*/
		u8 emptyFilterIdx = 0;
 80009f2:	2300      	movs	r3, #0
 80009f4:	77fb      	strb	r3, [r7, #31]
		/* Assume FR1 is empty */
		u8 emptyRegisterIdx = 1;
 80009f6:	2301      	movs	r3, #1
 80009f8:	77bb      	strb	r3, [r7, #30]

		for (; emptyFilterIdx < CAN_MAX_DEVICES_COUNT; ++emptyFilterIdx) {
 80009fa:	e03b      	b.n	8000a74 <CAN_appendDeviceToBus+0xe0>
			/* Find de-activated filter which is unused OR find FRx registers with zero value*/
			if (!GET_BIT(CAN1->FA1R, emptyFilterIdx)) {
 80009fc:	4b57      	ldr	r3, [pc, #348]	; (8000b5c <CAN_appendDeviceToBus+0x1c8>)
 80009fe:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 8000a02:	7ffa      	ldrb	r2, [r7, #31]
 8000a04:	2101      	movs	r1, #1
 8000a06:	fa01 f202 	lsl.w	r2, r1, r2
 8000a0a:	401a      	ands	r2, r3
 8000a0c:	7ffb      	ldrb	r3, [r7, #31]
 8000a0e:	fa22 f303 	lsr.w	r3, r2, r3
 8000a12:	2b00      	cmp	r3, #0
 8000a14:	d109      	bne.n	8000a2a <CAN_appendDeviceToBus+0x96>
				/* Both empty as the filter was de-activated */
				emptyRegisterIdx = 0;
 8000a16:	2300      	movs	r3, #0
 8000a18:	77bb      	strb	r3, [r7, #30]
				++CAN_devicesCount;
 8000a1a:	4b4f      	ldr	r3, [pc, #316]	; (8000b58 <CAN_appendDeviceToBus+0x1c4>)
 8000a1c:	781b      	ldrb	r3, [r3, #0]
 8000a1e:	b2db      	uxtb	r3, r3
 8000a20:	3301      	adds	r3, #1
 8000a22:	b2da      	uxtb	r2, r3
 8000a24:	4b4c      	ldr	r3, [pc, #304]	; (8000b58 <CAN_appendDeviceToBus+0x1c4>)
 8000a26:	701a      	strb	r2, [r3, #0]
				break;
 8000a28:	e027      	b.n	8000a7a <CAN_appendDeviceToBus+0xe6>
			} else if (
			CAN1->sFilterRegister[emptyFilterIdx].FR1 == 0U ||
 8000a2a:	4a4c      	ldr	r2, [pc, #304]	; (8000b5c <CAN_appendDeviceToBus+0x1c8>)
 8000a2c:	7ffb      	ldrb	r3, [r7, #31]
 8000a2e:	3348      	adds	r3, #72	; 0x48
 8000a30:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
			} else if (
 8000a34:	2b00      	cmp	r3, #0
 8000a36:	d007      	beq.n	8000a48 <CAN_appendDeviceToBus+0xb4>
			CAN1->sFilterRegister[emptyFilterIdx].FR2 == 0U) {
 8000a38:	4a48      	ldr	r2, [pc, #288]	; (8000b5c <CAN_appendDeviceToBus+0x1c8>)
 8000a3a:	7ffb      	ldrb	r3, [r7, #31]
 8000a3c:	3348      	adds	r3, #72	; 0x48
 8000a3e:	00db      	lsls	r3, r3, #3
 8000a40:	4413      	add	r3, r2
 8000a42:	685b      	ldr	r3, [r3, #4]
			CAN1->sFilterRegister[emptyFilterIdx].FR1 == 0U ||
 8000a44:	2b00      	cmp	r3, #0
 8000a46:	d112      	bne.n	8000a6e <CAN_appendDeviceToBus+0xda>
				/* One of them is empty */
				emptyRegisterIdx =
				CAN1->sFilterRegister[emptyFilterIdx].FR1 == 0U ? 1 : 2;
 8000a48:	4a44      	ldr	r2, [pc, #272]	; (8000b5c <CAN_appendDeviceToBus+0x1c8>)
 8000a4a:	7ffb      	ldrb	r3, [r7, #31]
 8000a4c:	3348      	adds	r3, #72	; 0x48
 8000a4e:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
				emptyRegisterIdx =
 8000a52:	2b00      	cmp	r3, #0
 8000a54:	d101      	bne.n	8000a5a <CAN_appendDeviceToBus+0xc6>
 8000a56:	2301      	movs	r3, #1
 8000a58:	e000      	b.n	8000a5c <CAN_appendDeviceToBus+0xc8>
 8000a5a:	2302      	movs	r3, #2
 8000a5c:	77bb      	strb	r3, [r7, #30]
				++CAN_devicesCount;
 8000a5e:	4b3e      	ldr	r3, [pc, #248]	; (8000b58 <CAN_appendDeviceToBus+0x1c4>)
 8000a60:	781b      	ldrb	r3, [r3, #0]
 8000a62:	b2db      	uxtb	r3, r3
 8000a64:	3301      	adds	r3, #1
 8000a66:	b2da      	uxtb	r2, r3
 8000a68:	4b3b      	ldr	r3, [pc, #236]	; (8000b58 <CAN_appendDeviceToBus+0x1c4>)
 8000a6a:	701a      	strb	r2, [r3, #0]
				break;
 8000a6c:	e005      	b.n	8000a7a <CAN_appendDeviceToBus+0xe6>
		for (; emptyFilterIdx < CAN_MAX_DEVICES_COUNT; ++emptyFilterIdx) {
 8000a6e:	7ffb      	ldrb	r3, [r7, #31]
 8000a70:	3301      	adds	r3, #1
 8000a72:	77fb      	strb	r3, [r7, #31]
 8000a74:	7ffb      	ldrb	r3, [r7, #31]
 8000a76:	2b1b      	cmp	r3, #27
 8000a78:	d9c0      	bls.n	80009fc <CAN_appendDeviceToBus+0x68>
			}
		}

		/* No empty filter banks are found, exit*/
		if (emptyFilterIdx == CAN_MAX_DEVICES_COUNT) {
 8000a7a:	7ffb      	ldrb	r3, [r7, #31]
 8000a7c:	2b1c      	cmp	r3, #28
 8000a7e:	d106      	bne.n	8000a8e <CAN_appendDeviceToBus+0xfa>
			localStatus |= CAN_Status_MaxDevicesReached;
 8000a80:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000a84:	f043 0308 	orr.w	r3, r3, #8
 8000a88:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8000a8c:	e05e      	b.n	8000b4c <CAN_appendDeviceToBus+0x1b8>
		}
		/* Found an empty filter bank to use */
		CAN_FilterInitTypeDef localFilterConfig = { 0 };
 8000a8e:	f107 030c 	add.w	r3, r7, #12
 8000a92:	2200      	movs	r2, #0
 8000a94:	601a      	str	r2, [r3, #0]
 8000a96:	605a      	str	r2, [r3, #4]
 8000a98:	609a      	str	r2, [r3, #8]
 8000a9a:	60da      	str	r2, [r3, #12]
 8000a9c:	821a      	strh	r2, [r3, #16]
		 * Filter mode -> List identifier for multiple ID's
		 * Filter FIFO assignment = FIFO 1
		 * Filter Activation = Enabled
		 * Filter scale = Single 32 bit filter ID
		 */
		localFilterConfig.FilterMode = LIST;
 8000a9e:	2301      	movs	r3, #1
 8000aa0:	76fb      	strb	r3, [r7, #27]
		// TODO alternate bet. fifo 1 & 2?
		localFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO_1;
 8000aa2:	2300      	movs	r3, #0
 8000aa4:	833b      	strh	r3, [r7, #24]
		localFilterConfig.FilterActivation = ENABLE;
 8000aa6:	2301      	movs	r3, #1
 8000aa8:	777b      	strb	r3, [r7, #29]

		localFilterConfig.FilterScale = SINGLE_32;
 8000aaa:	2301      	movs	r3, #1
 8000aac:	773b      	strb	r3, [r7, #28]
		localFilterConfig.FilterNumber = emptyFilterIdx;
 8000aae:	7ffb      	ldrb	r3, [r7, #31]
 8000ab0:	76bb      	strb	r3, [r7, #26]
		/* Choose an empty register whether both FR1, FR2 or only one of them*/
		switch (emptyRegisterIdx) {
 8000ab2:	7fbb      	ldrb	r3, [r7, #30]
 8000ab4:	2b02      	cmp	r3, #2
 8000ab6:	d02b      	beq.n	8000b10 <CAN_appendDeviceToBus+0x17c>
 8000ab8:	2b02      	cmp	r3, #2
 8000aba:	dc40      	bgt.n	8000b3e <CAN_appendDeviceToBus+0x1aa>
 8000abc:	2b00      	cmp	r3, #0
 8000abe:	d002      	beq.n	8000ac6 <CAN_appendDeviceToBus+0x132>
 8000ac0:	2b01      	cmp	r3, #1
 8000ac2:	d00c      	beq.n	8000ade <CAN_appendDeviceToBus+0x14a>
			CAN1->sFilterRegister[emptyFilterIdx].FR1 & 0x0000FFFF;
			localFilterConfig.FilterIdHighR1 =
					(CAN1->sFilterRegister[emptyFilterIdx].FR1 >> 16);
			break;
		default:
			break;
 8000ac4:	e03b      	b.n	8000b3e <CAN_appendDeviceToBus+0x1aa>
			localFilterConfig.FilterIdLowR1 = FRx_val & 0xFFFF;
 8000ac6:	6a3b      	ldr	r3, [r7, #32]
 8000ac8:	b29b      	uxth	r3, r3
 8000aca:	81bb      	strh	r3, [r7, #12]
			localFilterConfig.FilterIdHighR1 = FRx_val >> 16;
 8000acc:	6a3b      	ldr	r3, [r7, #32]
 8000ace:	0c1b      	lsrs	r3, r3, #16
 8000ad0:	b29b      	uxth	r3, r3
 8000ad2:	81fb      	strh	r3, [r7, #14]
			localFilterConfig.FilterIdLowR2 = 0;
 8000ad4:	2300      	movs	r3, #0
 8000ad6:	823b      	strh	r3, [r7, #16]
			localFilterConfig.FilterIdHighR2 = 0;
 8000ad8:	2300      	movs	r3, #0
 8000ada:	827b      	strh	r3, [r7, #18]
			break;
 8000adc:	e030      	b.n	8000b40 <CAN_appendDeviceToBus+0x1ac>
			localFilterConfig.FilterIdLowR1 = FRx_val & 0xFFFF;
 8000ade:	6a3b      	ldr	r3, [r7, #32]
 8000ae0:	b29b      	uxth	r3, r3
 8000ae2:	81bb      	strh	r3, [r7, #12]
			localFilterConfig.FilterIdHighR1 = FRx_val >> 16;
 8000ae4:	6a3b      	ldr	r3, [r7, #32]
 8000ae6:	0c1b      	lsrs	r3, r3, #16
 8000ae8:	b29b      	uxth	r3, r3
 8000aea:	81fb      	strh	r3, [r7, #14]
			CAN1->sFilterRegister[emptyFilterIdx].FR2 & 0x0000FFFF;
 8000aec:	4a1b      	ldr	r2, [pc, #108]	; (8000b5c <CAN_appendDeviceToBus+0x1c8>)
 8000aee:	7ffb      	ldrb	r3, [r7, #31]
 8000af0:	3348      	adds	r3, #72	; 0x48
 8000af2:	00db      	lsls	r3, r3, #3
 8000af4:	4413      	add	r3, r2
 8000af6:	685b      	ldr	r3, [r3, #4]
			localFilterConfig.FilterIdLowR2 =
 8000af8:	b29b      	uxth	r3, r3
 8000afa:	823b      	strh	r3, [r7, #16]
					(CAN1->sFilterRegister[emptyFilterIdx].FR2 >> 16);
 8000afc:	4a17      	ldr	r2, [pc, #92]	; (8000b5c <CAN_appendDeviceToBus+0x1c8>)
 8000afe:	7ffb      	ldrb	r3, [r7, #31]
 8000b00:	3348      	adds	r3, #72	; 0x48
 8000b02:	00db      	lsls	r3, r3, #3
 8000b04:	4413      	add	r3, r2
 8000b06:	685b      	ldr	r3, [r3, #4]
 8000b08:	0c1b      	lsrs	r3, r3, #16
			localFilterConfig.FilterIdHighR2 =
 8000b0a:	b29b      	uxth	r3, r3
 8000b0c:	827b      	strh	r3, [r7, #18]
			break;
 8000b0e:	e017      	b.n	8000b40 <CAN_appendDeviceToBus+0x1ac>
			localFilterConfig.FilterIdLowR2 = FRx_val & 0xFFFF;
 8000b10:	6a3b      	ldr	r3, [r7, #32]
 8000b12:	b29b      	uxth	r3, r3
 8000b14:	823b      	strh	r3, [r7, #16]
			localFilterConfig.FilterIdHighR2 = FRx_val >> 16;
 8000b16:	6a3b      	ldr	r3, [r7, #32]
 8000b18:	0c1b      	lsrs	r3, r3, #16
 8000b1a:	b29b      	uxth	r3, r3
 8000b1c:	827b      	strh	r3, [r7, #18]
			CAN1->sFilterRegister[emptyFilterIdx].FR1 & 0x0000FFFF;
 8000b1e:	4a0f      	ldr	r2, [pc, #60]	; (8000b5c <CAN_appendDeviceToBus+0x1c8>)
 8000b20:	7ffb      	ldrb	r3, [r7, #31]
 8000b22:	3348      	adds	r3, #72	; 0x48
 8000b24:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
			localFilterConfig.FilterIdLowR1 =
 8000b28:	b29b      	uxth	r3, r3
 8000b2a:	81bb      	strh	r3, [r7, #12]
					(CAN1->sFilterRegister[emptyFilterIdx].FR1 >> 16);
 8000b2c:	4a0b      	ldr	r2, [pc, #44]	; (8000b5c <CAN_appendDeviceToBus+0x1c8>)
 8000b2e:	7ffb      	ldrb	r3, [r7, #31]
 8000b30:	3348      	adds	r3, #72	; 0x48
 8000b32:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8000b36:	0c1b      	lsrs	r3, r3, #16
			localFilterConfig.FilterIdHighR1 =
 8000b38:	b29b      	uxth	r3, r3
 8000b3a:	81fb      	strh	r3, [r7, #14]
			break;
 8000b3c:	e000      	b.n	8000b40 <CAN_appendDeviceToBus+0x1ac>
			break;
 8000b3e:	bf00      	nop
		}

		/* Initialize selected filter */
		CAN_initFilter(&localFilterConfig);
 8000b40:	f107 030c 	add.w	r3, r7, #12
 8000b44:	4618      	mov	r0, r3
 8000b46:	f7ff fc13 	bl	8000370 <CAN_initFilter>

		break;
 8000b4a:	bf00      	nop
	} while (0);

	return localStatus;
 8000b4c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8000b50:	4618      	mov	r0, r3
 8000b52:	3728      	adds	r7, #40	; 0x28
 8000b54:	46bd      	mov	sp, r7
 8000b56:	bd80      	pop	{r7, pc}
 8000b58:	20000028 	.word	0x20000028
 8000b5c:	40006400 	.word	0x40006400

08000b60 <CAN_receiveMessage>:

	/* Return status code */
	return localStatus;
}

CAN_Status_Typedef CAN_receiveMessage(u8 *a_data, u8 *a_len, u32 *a_devID) {
 8000b60:	b580      	push	{r7, lr}
 8000b62:	b08a      	sub	sp, #40	; 0x28
 8000b64:	af00      	add	r7, sp, #0
 8000b66:	60f8      	str	r0, [r7, #12]
 8000b68:	60b9      	str	r1, [r7, #8]
 8000b6a:	607a      	str	r2, [r7, #4]

	/* null check */
	if (a_data == NULLPTR || a_len == NULLPTR)
 8000b6c:	68fb      	ldr	r3, [r7, #12]
 8000b6e:	2b00      	cmp	r3, #0
 8000b70:	d002      	beq.n	8000b78 <CAN_receiveMessage+0x18>
 8000b72:	68bb      	ldr	r3, [r7, #8]
 8000b74:	2b00      	cmp	r3, #0
 8000b76:	d101      	bne.n	8000b7c <CAN_receiveMessage+0x1c>
		return CAN_Status_NullError;
 8000b78:	2304      	movs	r3, #4
 8000b7a:	e051      	b.n	8000c20 <CAN_receiveMessage+0xc0>

	/* Status code */
	CAN_Status_Typedef localStatus = CAN_Status_OK;
 8000b7c:	2300      	movs	r3, #0
 8000b7e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	do {

		CanRxMsg localRxMsg = { 0 };
 8000b82:	f107 0310 	add.w	r3, r7, #16
 8000b86:	2200      	movs	r2, #0
 8000b88:	601a      	str	r2, [r3, #0]
 8000b8a:	605a      	str	r2, [r3, #4]
 8000b8c:	609a      	str	r2, [r3, #8]
 8000b8e:	60da      	str	r2, [r3, #12]
 8000b90:	611a      	str	r2, [r3, #16]
		/* Check if there are new messages on either FIFO's, if not break */
		if ((CAN1->RF0R & 0x3) != 0) {
 8000b92:	4b25      	ldr	r3, [pc, #148]	; (8000c28 <CAN_receiveMessage+0xc8>)
 8000b94:	68db      	ldr	r3, [r3, #12]
 8000b96:	f003 0303 	and.w	r3, r3, #3
 8000b9a:	2b00      	cmp	r3, #0
 8000b9c:	d007      	beq.n	8000bae <CAN_receiveMessage+0x4e>
			CAN_receive(CAN1, CAN_RX_FIFO_1, &localRxMsg);
 8000b9e:	f107 0310 	add.w	r3, r7, #16
 8000ba2:	461a      	mov	r2, r3
 8000ba4:	2100      	movs	r1, #0
 8000ba6:	4820      	ldr	r0, [pc, #128]	; (8000c28 <CAN_receiveMessage+0xc8>)
 8000ba8:	f7ff fd4a 	bl	8000640 <CAN_receive>
 8000bac:	e014      	b.n	8000bd8 <CAN_receiveMessage+0x78>
		} else if ((CAN1->RF1R & 0x3) != 0) {
 8000bae:	4b1e      	ldr	r3, [pc, #120]	; (8000c28 <CAN_receiveMessage+0xc8>)
 8000bb0:	691b      	ldr	r3, [r3, #16]
 8000bb2:	f003 0303 	and.w	r3, r3, #3
 8000bb6:	2b00      	cmp	r3, #0
 8000bb8:	d007      	beq.n	8000bca <CAN_receiveMessage+0x6a>
			CAN_receive(CAN1, CAN_RX_FIFO_2, &localRxMsg);
 8000bba:	f107 0310 	add.w	r3, r7, #16
 8000bbe:	461a      	mov	r2, r3
 8000bc0:	2101      	movs	r1, #1
 8000bc2:	4819      	ldr	r0, [pc, #100]	; (8000c28 <CAN_receiveMessage+0xc8>)
 8000bc4:	f7ff fd3c 	bl	8000640 <CAN_receive>
 8000bc8:	e006      	b.n	8000bd8 <CAN_receiveMessage+0x78>
		} else {
			localStatus |= CAN_Status_Error;
 8000bca:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000bce:	f043 0320 	orr.w	r3, r3, #32
 8000bd2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8000bd6:	e021      	b.n	8000c1c <CAN_receiveMessage+0xbc>
			break;
		}
		/* Set the received message length*/
		*a_len = localRxMsg.DLC;
 8000bd8:	7eba      	ldrb	r2, [r7, #26]
 8000bda:	68bb      	ldr	r3, [r7, #8]
 8000bdc:	701a      	strb	r2, [r3, #0]
		/* Copy data into buffer array */
		for (u8 i = 0; i < localRxMsg.DLC; ++i) {
 8000bde:	2300      	movs	r3, #0
 8000be0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8000be4:	e00f      	b.n	8000c06 <CAN_receiveMessage+0xa6>
			a_data[i] = localRxMsg.Data[i];
 8000be6:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8000bea:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000bee:	68f9      	ldr	r1, [r7, #12]
 8000bf0:	440b      	add	r3, r1
 8000bf2:	3228      	adds	r2, #40	; 0x28
 8000bf4:	443a      	add	r2, r7
 8000bf6:	f812 2c0d 	ldrb.w	r2, [r2, #-13]
 8000bfa:	701a      	strb	r2, [r3, #0]
		for (u8 i = 0; i < localRxMsg.DLC; ++i) {
 8000bfc:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000c00:	3301      	adds	r3, #1
 8000c02:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8000c06:	7ebb      	ldrb	r3, [r7, #26]
 8000c08:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8000c0c:	429a      	cmp	r2, r3
 8000c0e:	d3ea      	bcc.n	8000be6 <CAN_receiveMessage+0x86>
		}
		*a_devID = (((u32) localRxMsg.ExtId) << 11) | localRxMsg.StdId;
 8000c10:	697b      	ldr	r3, [r7, #20]
 8000c12:	02da      	lsls	r2, r3, #11
 8000c14:	693b      	ldr	r3, [r7, #16]
 8000c16:	431a      	orrs	r2, r3
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	601a      	str	r2, [r3, #0]

	} while (0);

	/* Return status code */
	return localStatus;
 8000c1c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8000c20:	4618      	mov	r0, r3
 8000c22:	3728      	adds	r7, #40	; 0x28
 8000c24:	46bd      	mov	sp, r7
 8000c26:	bd80      	pop	{r7, pc}
 8000c28:	40006400 	.word	0x40006400

08000c2c <GPIO_setupPinMode>:

/*******************************************************************************
 *                           Public functions definitions                      *
 *******************************************************************************/

void GPIO_setupPinMode(u8 port_num, u8 pin_num, u8 mode) {
 8000c2c:	b480      	push	{r7}
 8000c2e:	b083      	sub	sp, #12
 8000c30:	af00      	add	r7, sp, #0
 8000c32:	4603      	mov	r3, r0
 8000c34:	71fb      	strb	r3, [r7, #7]
 8000c36:	460b      	mov	r3, r1
 8000c38:	71bb      	strb	r3, [r7, #6]
 8000c3a:	4613      	mov	r3, r2
 8000c3c:	717b      	strb	r3, [r7, #5]

	switch (port_num) {
 8000c3e:	79fb      	ldrb	r3, [r7, #7]
 8000c40:	2b02      	cmp	r3, #2
 8000c42:	d078      	beq.n	8000d36 <GPIO_setupPinMode+0x10a>
 8000c44:	2b02      	cmp	r3, #2
 8000c46:	f300 80ae 	bgt.w	8000da6 <GPIO_setupPinMode+0x17a>
 8000c4a:	2b00      	cmp	r3, #0
 8000c4c:	d002      	beq.n	8000c54 <GPIO_setupPinMode+0x28>
 8000c4e:	2b01      	cmp	r3, #1
 8000c50:	d039      	beq.n	8000cc6 <GPIO_setupPinMode+0x9a>
			GPIOC->CRH |= (mode << ((pin_num - 8) << 2));
		}

		break;
	default:
		break;
 8000c52:	e0a8      	b.n	8000da6 <GPIO_setupPinMode+0x17a>
		if (pin_num < 8) {
 8000c54:	79bb      	ldrb	r3, [r7, #6]
 8000c56:	2b07      	cmp	r3, #7
 8000c58:	d817      	bhi.n	8000c8a <GPIO_setupPinMode+0x5e>
			GPIOA->CRL &= ~(0b1111 << (pin_num << 2));
 8000c5a:	4b59      	ldr	r3, [pc, #356]	; (8000dc0 <GPIO_setupPinMode+0x194>)
 8000c5c:	681b      	ldr	r3, [r3, #0]
 8000c5e:	79ba      	ldrb	r2, [r7, #6]
 8000c60:	0092      	lsls	r2, r2, #2
 8000c62:	210f      	movs	r1, #15
 8000c64:	fa01 f202 	lsl.w	r2, r1, r2
 8000c68:	43d2      	mvns	r2, r2
 8000c6a:	4611      	mov	r1, r2
 8000c6c:	4a54      	ldr	r2, [pc, #336]	; (8000dc0 <GPIO_setupPinMode+0x194>)
 8000c6e:	400b      	ands	r3, r1
 8000c70:	6013      	str	r3, [r2, #0]
			GPIOA->CRL |= (mode << (pin_num << 2));
 8000c72:	4b53      	ldr	r3, [pc, #332]	; (8000dc0 <GPIO_setupPinMode+0x194>)
 8000c74:	681b      	ldr	r3, [r3, #0]
 8000c76:	7979      	ldrb	r1, [r7, #5]
 8000c78:	79ba      	ldrb	r2, [r7, #6]
 8000c7a:	0092      	lsls	r2, r2, #2
 8000c7c:	fa01 f202 	lsl.w	r2, r1, r2
 8000c80:	4611      	mov	r1, r2
 8000c82:	4a4f      	ldr	r2, [pc, #316]	; (8000dc0 <GPIO_setupPinMode+0x194>)
 8000c84:	430b      	orrs	r3, r1
 8000c86:	6013      	str	r3, [r2, #0]
		break;
 8000c88:	e08f      	b.n	8000daa <GPIO_setupPinMode+0x17e>
		} else if (pin_num < 16) {
 8000c8a:	79bb      	ldrb	r3, [r7, #6]
 8000c8c:	2b0f      	cmp	r3, #15
 8000c8e:	f200 808c 	bhi.w	8000daa <GPIO_setupPinMode+0x17e>
			GPIOA->CRH &= ~(0b1111 << ((pin_num - 8) << 2));
 8000c92:	4b4b      	ldr	r3, [pc, #300]	; (8000dc0 <GPIO_setupPinMode+0x194>)
 8000c94:	685b      	ldr	r3, [r3, #4]
 8000c96:	79ba      	ldrb	r2, [r7, #6]
 8000c98:	3a08      	subs	r2, #8
 8000c9a:	0092      	lsls	r2, r2, #2
 8000c9c:	210f      	movs	r1, #15
 8000c9e:	fa01 f202 	lsl.w	r2, r1, r2
 8000ca2:	43d2      	mvns	r2, r2
 8000ca4:	4611      	mov	r1, r2
 8000ca6:	4a46      	ldr	r2, [pc, #280]	; (8000dc0 <GPIO_setupPinMode+0x194>)
 8000ca8:	400b      	ands	r3, r1
 8000caa:	6053      	str	r3, [r2, #4]
			GPIOA->CRH |= (mode << ((pin_num - 8) << 2));
 8000cac:	4b44      	ldr	r3, [pc, #272]	; (8000dc0 <GPIO_setupPinMode+0x194>)
 8000cae:	685b      	ldr	r3, [r3, #4]
 8000cb0:	7979      	ldrb	r1, [r7, #5]
 8000cb2:	79ba      	ldrb	r2, [r7, #6]
 8000cb4:	3a08      	subs	r2, #8
 8000cb6:	0092      	lsls	r2, r2, #2
 8000cb8:	fa01 f202 	lsl.w	r2, r1, r2
 8000cbc:	4611      	mov	r1, r2
 8000cbe:	4a40      	ldr	r2, [pc, #256]	; (8000dc0 <GPIO_setupPinMode+0x194>)
 8000cc0:	430b      	orrs	r3, r1
 8000cc2:	6053      	str	r3, [r2, #4]
		break;
 8000cc4:	e071      	b.n	8000daa <GPIO_setupPinMode+0x17e>
		if (pin_num < 8) {
 8000cc6:	79bb      	ldrb	r3, [r7, #6]
 8000cc8:	2b07      	cmp	r3, #7
 8000cca:	d817      	bhi.n	8000cfc <GPIO_setupPinMode+0xd0>
			GPIOB->CRL &= ~(0b1111 << (pin_num << 2));
 8000ccc:	4b3d      	ldr	r3, [pc, #244]	; (8000dc4 <GPIO_setupPinMode+0x198>)
 8000cce:	681b      	ldr	r3, [r3, #0]
 8000cd0:	79ba      	ldrb	r2, [r7, #6]
 8000cd2:	0092      	lsls	r2, r2, #2
 8000cd4:	210f      	movs	r1, #15
 8000cd6:	fa01 f202 	lsl.w	r2, r1, r2
 8000cda:	43d2      	mvns	r2, r2
 8000cdc:	4611      	mov	r1, r2
 8000cde:	4a39      	ldr	r2, [pc, #228]	; (8000dc4 <GPIO_setupPinMode+0x198>)
 8000ce0:	400b      	ands	r3, r1
 8000ce2:	6013      	str	r3, [r2, #0]
			GPIOB->CRL |= (mode << (pin_num << 2));
 8000ce4:	4b37      	ldr	r3, [pc, #220]	; (8000dc4 <GPIO_setupPinMode+0x198>)
 8000ce6:	681b      	ldr	r3, [r3, #0]
 8000ce8:	7979      	ldrb	r1, [r7, #5]
 8000cea:	79ba      	ldrb	r2, [r7, #6]
 8000cec:	0092      	lsls	r2, r2, #2
 8000cee:	fa01 f202 	lsl.w	r2, r1, r2
 8000cf2:	4611      	mov	r1, r2
 8000cf4:	4a33      	ldr	r2, [pc, #204]	; (8000dc4 <GPIO_setupPinMode+0x198>)
 8000cf6:	430b      	orrs	r3, r1
 8000cf8:	6013      	str	r3, [r2, #0]
		break;
 8000cfa:	e058      	b.n	8000dae <GPIO_setupPinMode+0x182>
		} else if (pin_num < 16) {
 8000cfc:	79bb      	ldrb	r3, [r7, #6]
 8000cfe:	2b0f      	cmp	r3, #15
 8000d00:	d855      	bhi.n	8000dae <GPIO_setupPinMode+0x182>
			GPIOB->CRH &= ~(0b1111 << ((pin_num - 8) << 2));
 8000d02:	4b30      	ldr	r3, [pc, #192]	; (8000dc4 <GPIO_setupPinMode+0x198>)
 8000d04:	685b      	ldr	r3, [r3, #4]
 8000d06:	79ba      	ldrb	r2, [r7, #6]
 8000d08:	3a08      	subs	r2, #8
 8000d0a:	0092      	lsls	r2, r2, #2
 8000d0c:	210f      	movs	r1, #15
 8000d0e:	fa01 f202 	lsl.w	r2, r1, r2
 8000d12:	43d2      	mvns	r2, r2
 8000d14:	4611      	mov	r1, r2
 8000d16:	4a2b      	ldr	r2, [pc, #172]	; (8000dc4 <GPIO_setupPinMode+0x198>)
 8000d18:	400b      	ands	r3, r1
 8000d1a:	6053      	str	r3, [r2, #4]
			GPIOB->CRH |= (mode << ((pin_num - 8) << 2));
 8000d1c:	4b29      	ldr	r3, [pc, #164]	; (8000dc4 <GPIO_setupPinMode+0x198>)
 8000d1e:	685b      	ldr	r3, [r3, #4]
 8000d20:	7979      	ldrb	r1, [r7, #5]
 8000d22:	79ba      	ldrb	r2, [r7, #6]
 8000d24:	3a08      	subs	r2, #8
 8000d26:	0092      	lsls	r2, r2, #2
 8000d28:	fa01 f202 	lsl.w	r2, r1, r2
 8000d2c:	4611      	mov	r1, r2
 8000d2e:	4a25      	ldr	r2, [pc, #148]	; (8000dc4 <GPIO_setupPinMode+0x198>)
 8000d30:	430b      	orrs	r3, r1
 8000d32:	6053      	str	r3, [r2, #4]
		break;
 8000d34:	e03b      	b.n	8000dae <GPIO_setupPinMode+0x182>
		if (pin_num < 8) {
 8000d36:	79bb      	ldrb	r3, [r7, #6]
 8000d38:	2b07      	cmp	r3, #7
 8000d3a:	d817      	bhi.n	8000d6c <GPIO_setupPinMode+0x140>
			GPIOC->CRL &= ~(0b1111 << (pin_num << 2));
 8000d3c:	4b22      	ldr	r3, [pc, #136]	; (8000dc8 <GPIO_setupPinMode+0x19c>)
 8000d3e:	681b      	ldr	r3, [r3, #0]
 8000d40:	79ba      	ldrb	r2, [r7, #6]
 8000d42:	0092      	lsls	r2, r2, #2
 8000d44:	210f      	movs	r1, #15
 8000d46:	fa01 f202 	lsl.w	r2, r1, r2
 8000d4a:	43d2      	mvns	r2, r2
 8000d4c:	4611      	mov	r1, r2
 8000d4e:	4a1e      	ldr	r2, [pc, #120]	; (8000dc8 <GPIO_setupPinMode+0x19c>)
 8000d50:	400b      	ands	r3, r1
 8000d52:	6013      	str	r3, [r2, #0]
			GPIOC->CRL |= (mode << (pin_num << 2));
 8000d54:	4b1c      	ldr	r3, [pc, #112]	; (8000dc8 <GPIO_setupPinMode+0x19c>)
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	7979      	ldrb	r1, [r7, #5]
 8000d5a:	79ba      	ldrb	r2, [r7, #6]
 8000d5c:	0092      	lsls	r2, r2, #2
 8000d5e:	fa01 f202 	lsl.w	r2, r1, r2
 8000d62:	4611      	mov	r1, r2
 8000d64:	4a18      	ldr	r2, [pc, #96]	; (8000dc8 <GPIO_setupPinMode+0x19c>)
 8000d66:	430b      	orrs	r3, r1
 8000d68:	6013      	str	r3, [r2, #0]
		break;
 8000d6a:	e022      	b.n	8000db2 <GPIO_setupPinMode+0x186>
		} else if (pin_num < 16) {
 8000d6c:	79bb      	ldrb	r3, [r7, #6]
 8000d6e:	2b0f      	cmp	r3, #15
 8000d70:	d81f      	bhi.n	8000db2 <GPIO_setupPinMode+0x186>
			GPIOC->CRH &= ~(0b1111 << ((pin_num - 8) << 2));
 8000d72:	4b15      	ldr	r3, [pc, #84]	; (8000dc8 <GPIO_setupPinMode+0x19c>)
 8000d74:	685b      	ldr	r3, [r3, #4]
 8000d76:	79ba      	ldrb	r2, [r7, #6]
 8000d78:	3a08      	subs	r2, #8
 8000d7a:	0092      	lsls	r2, r2, #2
 8000d7c:	210f      	movs	r1, #15
 8000d7e:	fa01 f202 	lsl.w	r2, r1, r2
 8000d82:	43d2      	mvns	r2, r2
 8000d84:	4611      	mov	r1, r2
 8000d86:	4a10      	ldr	r2, [pc, #64]	; (8000dc8 <GPIO_setupPinMode+0x19c>)
 8000d88:	400b      	ands	r3, r1
 8000d8a:	6053      	str	r3, [r2, #4]
			GPIOC->CRH |= (mode << ((pin_num - 8) << 2));
 8000d8c:	4b0e      	ldr	r3, [pc, #56]	; (8000dc8 <GPIO_setupPinMode+0x19c>)
 8000d8e:	685b      	ldr	r3, [r3, #4]
 8000d90:	7979      	ldrb	r1, [r7, #5]
 8000d92:	79ba      	ldrb	r2, [r7, #6]
 8000d94:	3a08      	subs	r2, #8
 8000d96:	0092      	lsls	r2, r2, #2
 8000d98:	fa01 f202 	lsl.w	r2, r1, r2
 8000d9c:	4611      	mov	r1, r2
 8000d9e:	4a0a      	ldr	r2, [pc, #40]	; (8000dc8 <GPIO_setupPinMode+0x19c>)
 8000da0:	430b      	orrs	r3, r1
 8000da2:	6053      	str	r3, [r2, #4]
		break;
 8000da4:	e005      	b.n	8000db2 <GPIO_setupPinMode+0x186>
		break;
 8000da6:	bf00      	nop
 8000da8:	e004      	b.n	8000db4 <GPIO_setupPinMode+0x188>
		break;
 8000daa:	bf00      	nop
 8000dac:	e002      	b.n	8000db4 <GPIO_setupPinMode+0x188>
		break;
 8000dae:	bf00      	nop
 8000db0:	e000      	b.n	8000db4 <GPIO_setupPinMode+0x188>
		break;
 8000db2:	bf00      	nop
	}
}
 8000db4:	bf00      	nop
 8000db6:	370c      	adds	r7, #12
 8000db8:	46bd      	mov	sp, r7
 8000dba:	bc80      	pop	{r7}
 8000dbc:	4770      	bx	lr
 8000dbe:	bf00      	nop
 8000dc0:	40010800 	.word	0x40010800
 8000dc4:	40010c00 	.word	0x40010c00
 8000dc8:	40011000 	.word	0x40011000

08000dcc <GPIO_enablePortClock>:
	default:
		break;
	}
}

void GPIO_enablePortClock(u8 port_num) {
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	b082      	sub	sp, #8
 8000dd0:	af00      	add	r7, sp, #0
 8000dd2:	4603      	mov	r3, r0
 8000dd4:	71fb      	strb	r3, [r7, #7]
	/* Determine the port, and start its clock using GPIO bus and the port ID on the bus */
	switch (port_num) {
 8000dd6:	79fb      	ldrb	r3, [r7, #7]
 8000dd8:	2b02      	cmp	r3, #2
 8000dda:	d010      	beq.n	8000dfe <GPIO_enablePortClock+0x32>
 8000ddc:	2b02      	cmp	r3, #2
 8000dde:	dc13      	bgt.n	8000e08 <GPIO_enablePortClock+0x3c>
 8000de0:	2b00      	cmp	r3, #0
 8000de2:	d002      	beq.n	8000dea <GPIO_enablePortClock+0x1e>
 8000de4:	2b01      	cmp	r3, #1
 8000de6:	d005      	beq.n	8000df4 <GPIO_enablePortClock+0x28>
		break;
	case GPIO_PortC:
		RCC_voidEnableClock(GPIO_BUS, GPIOC_BUS_ID);
		break;
	default:
		break;
 8000de8:	e00e      	b.n	8000e08 <GPIO_enablePortClock+0x3c>
		RCC_voidEnableClock(GPIO_BUS, GPIOA_BUS_ID);
 8000dea:	2102      	movs	r1, #2
 8000dec:	2002      	movs	r0, #2
 8000dee:	f000 f811 	bl	8000e14 <RCC_voidEnableClock>
		break;
 8000df2:	e00a      	b.n	8000e0a <GPIO_enablePortClock+0x3e>
		RCC_voidEnableClock(GPIO_BUS, GPIOB_BUS_ID);
 8000df4:	2103      	movs	r1, #3
 8000df6:	2002      	movs	r0, #2
 8000df8:	f000 f80c 	bl	8000e14 <RCC_voidEnableClock>
		break;
 8000dfc:	e005      	b.n	8000e0a <GPIO_enablePortClock+0x3e>
		RCC_voidEnableClock(GPIO_BUS, GPIOC_BUS_ID);
 8000dfe:	2104      	movs	r1, #4
 8000e00:	2002      	movs	r0, #2
 8000e02:	f000 f807 	bl	8000e14 <RCC_voidEnableClock>
		break;
 8000e06:	e000      	b.n	8000e0a <GPIO_enablePortClock+0x3e>
		break;
 8000e08:	bf00      	nop
	}
}
 8000e0a:	bf00      	nop
 8000e0c:	3708      	adds	r7, #8
 8000e0e:	46bd      	mov	sp, r7
 8000e10:	bd80      	pop	{r7, pc}
	...

08000e14 <RCC_voidEnableClock>:
 *	Function Description :  Enables the clock for a specified peripheral based
 *  on the bus and peripheral ID. Function returns if the peripheral ID exceeds
 *  31.
 *******************************************************************************/

void RCC_voidEnableClock(u8 Copy_u8BusId, u8 Copy_u8PerId) {
 8000e14:	b480      	push	{r7}
 8000e16:	b083      	sub	sp, #12
 8000e18:	af00      	add	r7, sp, #0
 8000e1a:	4603      	mov	r3, r0
 8000e1c:	460a      	mov	r2, r1
 8000e1e:	71fb      	strb	r3, [r7, #7]
 8000e20:	4613      	mov	r3, r2
 8000e22:	71bb      	strb	r3, [r7, #6]
	/* Invalid peripheral ID*/
	if (Copy_u8PerId > 31)
 8000e24:	79bb      	ldrb	r3, [r7, #6]
 8000e26:	2b1f      	cmp	r3, #31
 8000e28:	d829      	bhi.n	8000e7e <RCC_voidEnableClock+0x6a>
		return;
	/* Enable clock based on the selected bus*/
	switch (Copy_u8BusId) {
 8000e2a:	79fb      	ldrb	r3, [r7, #7]
 8000e2c:	2b02      	cmp	r3, #2
 8000e2e:	d010      	beq.n	8000e52 <RCC_voidEnableClock+0x3e>
 8000e30:	2b02      	cmp	r3, #2
 8000e32:	dc26      	bgt.n	8000e82 <RCC_voidEnableClock+0x6e>
 8000e34:	2b00      	cmp	r3, #0
 8000e36:	d017      	beq.n	8000e68 <RCC_voidEnableClock+0x54>
 8000e38:	2b01      	cmp	r3, #1
 8000e3a:	d122      	bne.n	8000e82 <RCC_voidEnableClock+0x6e>
	case APB1:
		/* Start clock for peripheral*/
		SET_BIT(RCC->APB1ENR, Copy_u8PerId);
 8000e3c:	4b13      	ldr	r3, [pc, #76]	; (8000e8c <RCC_voidEnableClock+0x78>)
 8000e3e:	69db      	ldr	r3, [r3, #28]
 8000e40:	79ba      	ldrb	r2, [r7, #6]
 8000e42:	2101      	movs	r1, #1
 8000e44:	fa01 f202 	lsl.w	r2, r1, r2
 8000e48:	4611      	mov	r1, r2
 8000e4a:	4a10      	ldr	r2, [pc, #64]	; (8000e8c <RCC_voidEnableClock+0x78>)
 8000e4c:	430b      	orrs	r3, r1
 8000e4e:	61d3      	str	r3, [r2, #28]
		break;
 8000e50:	e018      	b.n	8000e84 <RCC_voidEnableClock+0x70>
	case APB2:
		/* Start clock for peripheral*/
		SET_BIT(RCC->APB2ENR, Copy_u8PerId);
 8000e52:	4b0e      	ldr	r3, [pc, #56]	; (8000e8c <RCC_voidEnableClock+0x78>)
 8000e54:	699b      	ldr	r3, [r3, #24]
 8000e56:	79ba      	ldrb	r2, [r7, #6]
 8000e58:	2101      	movs	r1, #1
 8000e5a:	fa01 f202 	lsl.w	r2, r1, r2
 8000e5e:	4611      	mov	r1, r2
 8000e60:	4a0a      	ldr	r2, [pc, #40]	; (8000e8c <RCC_voidEnableClock+0x78>)
 8000e62:	430b      	orrs	r3, r1
 8000e64:	6193      	str	r3, [r2, #24]
		break;
 8000e66:	e00d      	b.n	8000e84 <RCC_voidEnableClock+0x70>
	case AHB:
		/* Start clock for peripheral*/
		SET_BIT(RCC->AHBENR, Copy_u8PerId);
 8000e68:	4b08      	ldr	r3, [pc, #32]	; (8000e8c <RCC_voidEnableClock+0x78>)
 8000e6a:	695b      	ldr	r3, [r3, #20]
 8000e6c:	79ba      	ldrb	r2, [r7, #6]
 8000e6e:	2101      	movs	r1, #1
 8000e70:	fa01 f202 	lsl.w	r2, r1, r2
 8000e74:	4611      	mov	r1, r2
 8000e76:	4a05      	ldr	r2, [pc, #20]	; (8000e8c <RCC_voidEnableClock+0x78>)
 8000e78:	430b      	orrs	r3, r1
 8000e7a:	6153      	str	r3, [r2, #20]
		break;
 8000e7c:	e002      	b.n	8000e84 <RCC_voidEnableClock+0x70>
		return;
 8000e7e:	bf00      	nop
 8000e80:	e000      	b.n	8000e84 <RCC_voidEnableClock+0x70>
	default:
		break;
 8000e82:	bf00      	nop
	}
}
 8000e84:	370c      	adds	r7, #12
 8000e86:	46bd      	mov	sp, r7
 8000e88:	bc80      	pop	{r7}
 8000e8a:	4770      	bx	lr
 8000e8c:	40021000 	.word	0x40021000

08000e90 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000e90:	b580      	push	{r7, lr}
 8000e92:	b086      	sub	sp, #24
 8000e94:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000e96:	f000 facf 	bl	8001438 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000e9a:	f000 f839 	bl	8000f10 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000e9e:	f000 f8fb 	bl	8001098 <MX_GPIO_Init>
	MX_ADC1_Init();
 8000ea2:	f000 f891 	bl	8000fc8 <MX_ADC1_Init>
	MX_USART2_UART_Init();
 8000ea6:	f000 f8cd 	bl	8001044 <MX_USART2_UART_Init>

	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	CAN_InitPeriph();
 8000eaa:	f000 f9ad 	bl	8001208 <CAN_InitPeriph>
	uint8_t bms_data[8] = { 0 };
 8000eae:	2300      	movs	r3, #0
 8000eb0:	60fb      	str	r3, [r7, #12]
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	613b      	str	r3, [r7, #16]
	uint8_t bms_frame_len = 0; /* Should be 8 bytes */
 8000eb6:	2300      	movs	r3, #0
 8000eb8:	72fb      	strb	r3, [r7, #11]
	u32 bms_frame_id = 0; /* Should be 0x6AC */
 8000eba:	2300      	movs	r3, #0
 8000ebc:	607b      	str	r3, [r7, #4]
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 8000ebe:	2201      	movs	r2, #1
 8000ec0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000ec4:	4811      	ldr	r0, [pc, #68]	; (8000f0c <main+0x7c>)
 8000ec6:	f000 ff93 	bl	8001df0 <HAL_GPIO_WritePin>
	while (1) {
		if (CAN_receiveMessage(bms_data, &bms_frame_len, &bms_frame_id)
 8000eca:	1d3a      	adds	r2, r7, #4
 8000ecc:	f107 010b 	add.w	r1, r7, #11
 8000ed0:	f107 030c 	add.w	r3, r7, #12
 8000ed4:	4618      	mov	r0, r3
 8000ed6:	f7ff fe43 	bl	8000b60 <CAN_receiveMessage>
 8000eda:	4603      	mov	r3, r0
 8000edc:	2b00      	cmp	r3, #0
 8000ede:	d1f4      	bne.n	8000eca <main+0x3a>
				== CAN_Status_OK) {
			HAL_GPIO_TogglePin(USER_LED_GPIO_Port, USER_LED_Pin);
 8000ee0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000ee4:	4809      	ldr	r0, [pc, #36]	; (8000f0c <main+0x7c>)
 8000ee6:	f000 ff9b 	bl	8001e20 <HAL_GPIO_TogglePin>
			/* Delay */
			for (int x = 0; x < 50000; ++x) {
 8000eea:	2300      	movs	r3, #0
 8000eec:	617b      	str	r3, [r7, #20]
 8000eee:	e002      	b.n	8000ef6 <main+0x66>
 8000ef0:	697b      	ldr	r3, [r7, #20]
 8000ef2:	3301      	adds	r3, #1
 8000ef4:	617b      	str	r3, [r7, #20]
 8000ef6:	697b      	ldr	r3, [r7, #20]
 8000ef8:	f24c 324f 	movw	r2, #49999	; 0xc34f
 8000efc:	4293      	cmp	r3, r2
 8000efe:	ddf7      	ble.n	8000ef0 <main+0x60>

			}
			HAL_GPIO_TogglePin(USER_LED_GPIO_Port, USER_LED_Pin);
 8000f00:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000f04:	4801      	ldr	r0, [pc, #4]	; (8000f0c <main+0x7c>)
 8000f06:	f000 ff8b 	bl	8001e20 <HAL_GPIO_TogglePin>
		if (CAN_receiveMessage(bms_data, &bms_frame_len, &bms_frame_id)
 8000f0a:	e7de      	b.n	8000eca <main+0x3a>
 8000f0c:	40011000 	.word	0x40011000

08000f10 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8000f10:	b580      	push	{r7, lr}
 8000f12:	b094      	sub	sp, #80	; 0x50
 8000f14:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8000f16:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000f1a:	2228      	movs	r2, #40	; 0x28
 8000f1c:	2100      	movs	r1, #0
 8000f1e:	4618      	mov	r0, r3
 8000f20:	f001 fd60 	bl	80029e4 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8000f24:	f107 0314 	add.w	r3, r7, #20
 8000f28:	2200      	movs	r2, #0
 8000f2a:	601a      	str	r2, [r3, #0]
 8000f2c:	605a      	str	r2, [r3, #4]
 8000f2e:	609a      	str	r2, [r3, #8]
 8000f30:	60da      	str	r2, [r3, #12]
 8000f32:	611a      	str	r2, [r3, #16]
	RCC_PeriphCLKInitTypeDef PeriphClkInit = { 0 };
 8000f34:	1d3b      	adds	r3, r7, #4
 8000f36:	2200      	movs	r2, #0
 8000f38:	601a      	str	r2, [r3, #0]
 8000f3a:	605a      	str	r2, [r3, #4]
 8000f3c:	609a      	str	r2, [r3, #8]
 8000f3e:	60da      	str	r2, [r3, #12]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000f40:	2301      	movs	r3, #1
 8000f42:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000f44:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000f48:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000f4e:	2301      	movs	r3, #1
 8000f50:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f52:	2302      	movs	r3, #2
 8000f54:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000f56:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000f5a:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000f5c:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000f60:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8000f62:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000f66:	4618      	mov	r0, r3
 8000f68:	f000 ff74 	bl	8001e54 <HAL_RCC_OscConfig>
 8000f6c:	4603      	mov	r3, r0
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d001      	beq.n	8000f76 <SystemClock_Config+0x66>
		Error_Handler();
 8000f72:	f000 f95f 	bl	8001234 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8000f76:	230f      	movs	r3, #15
 8000f78:	617b      	str	r3, [r7, #20]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f7a:	2302      	movs	r3, #2
 8000f7c:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f7e:	2300      	movs	r3, #0
 8000f80:	61fb      	str	r3, [r7, #28]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000f82:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000f86:	623b      	str	r3, [r7, #32]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV8;
 8000f88:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000f8c:	627b      	str	r3, [r7, #36]	; 0x24

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 8000f8e:	f107 0314 	add.w	r3, r7, #20
 8000f92:	2102      	movs	r1, #2
 8000f94:	4618      	mov	r0, r3
 8000f96:	f001 f9df 	bl	8002358 <HAL_RCC_ClockConfig>
 8000f9a:	4603      	mov	r3, r0
 8000f9c:	2b00      	cmp	r3, #0
 8000f9e:	d001      	beq.n	8000fa4 <SystemClock_Config+0x94>
		Error_Handler();
 8000fa0:	f000 f948 	bl	8001234 <Error_Handler>
	}
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000fa4:	2302      	movs	r3, #2
 8000fa6:	607b      	str	r3, [r7, #4]
	PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV8;
 8000fa8:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8000fac:	60fb      	str	r3, [r7, #12]
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK) {
 8000fae:	1d3b      	adds	r3, r7, #4
 8000fb0:	4618      	mov	r0, r3
 8000fb2:	f001 fb5f 	bl	8002674 <HAL_RCCEx_PeriphCLKConfig>
 8000fb6:	4603      	mov	r3, r0
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	d001      	beq.n	8000fc0 <SystemClock_Config+0xb0>
		Error_Handler();
 8000fbc:	f000 f93a 	bl	8001234 <Error_Handler>
	}
}
 8000fc0:	bf00      	nop
 8000fc2:	3750      	adds	r7, #80	; 0x50
 8000fc4:	46bd      	mov	sp, r7
 8000fc6:	bd80      	pop	{r7, pc}

08000fc8 <MX_ADC1_Init>:
/**
 * @brief ADC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC1_Init(void) {
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	b084      	sub	sp, #16
 8000fcc:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC1_Init 0 */

	/* USER CODE END ADC1_Init 0 */

	ADC_ChannelConfTypeDef sConfig = { 0 };
 8000fce:	1d3b      	adds	r3, r7, #4
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	601a      	str	r2, [r3, #0]
 8000fd4:	605a      	str	r2, [r3, #4]
 8000fd6:	609a      	str	r2, [r3, #8]

	/* USER CODE END ADC1_Init 1 */

	/** Common config
	 */
	hadc1.Instance = ADC1;
 8000fd8:	4b18      	ldr	r3, [pc, #96]	; (800103c <MX_ADC1_Init+0x74>)
 8000fda:	4a19      	ldr	r2, [pc, #100]	; (8001040 <MX_ADC1_Init+0x78>)
 8000fdc:	601a      	str	r2, [r3, #0]
	hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000fde:	4b17      	ldr	r3, [pc, #92]	; (800103c <MX_ADC1_Init+0x74>)
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	609a      	str	r2, [r3, #8]
	hadc1.Init.ContinuousConvMode = DISABLE;
 8000fe4:	4b15      	ldr	r3, [pc, #84]	; (800103c <MX_ADC1_Init+0x74>)
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	731a      	strb	r2, [r3, #12]
	hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000fea:	4b14      	ldr	r3, [pc, #80]	; (800103c <MX_ADC1_Init+0x74>)
 8000fec:	2200      	movs	r2, #0
 8000fee:	751a      	strb	r2, [r3, #20]
	hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000ff0:	4b12      	ldr	r3, [pc, #72]	; (800103c <MX_ADC1_Init+0x74>)
 8000ff2:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8000ff6:	61da      	str	r2, [r3, #28]
	hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000ff8:	4b10      	ldr	r3, [pc, #64]	; (800103c <MX_ADC1_Init+0x74>)
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	605a      	str	r2, [r3, #4]
	hadc1.Init.NbrOfConversion = 1;
 8000ffe:	4b0f      	ldr	r3, [pc, #60]	; (800103c <MX_ADC1_Init+0x74>)
 8001000:	2201      	movs	r2, #1
 8001002:	611a      	str	r2, [r3, #16]
	if (HAL_ADC_Init(&hadc1) != HAL_OK) {
 8001004:	480d      	ldr	r0, [pc, #52]	; (800103c <MX_ADC1_Init+0x74>)
 8001006:	f000 fa79 	bl	80014fc <HAL_ADC_Init>
 800100a:	4603      	mov	r3, r0
 800100c:	2b00      	cmp	r3, #0
 800100e:	d001      	beq.n	8001014 <MX_ADC1_Init+0x4c>
		Error_Handler();
 8001010:	f000 f910 	bl	8001234 <Error_Handler>
	}

	/** Configure Regular Channel
	 */
	sConfig.Channel = ADC_CHANNEL_0;
 8001014:	2300      	movs	r3, #0
 8001016:	607b      	str	r3, [r7, #4]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 8001018:	2301      	movs	r3, #1
 800101a:	60bb      	str	r3, [r7, #8]
	sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800101c:	2300      	movs	r3, #0
 800101e:	60fb      	str	r3, [r7, #12]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8001020:	1d3b      	adds	r3, r7, #4
 8001022:	4619      	mov	r1, r3
 8001024:	4805      	ldr	r0, [pc, #20]	; (800103c <MX_ADC1_Init+0x74>)
 8001026:	f000 fb41 	bl	80016ac <HAL_ADC_ConfigChannel>
 800102a:	4603      	mov	r3, r0
 800102c:	2b00      	cmp	r3, #0
 800102e:	d001      	beq.n	8001034 <MX_ADC1_Init+0x6c>
		Error_Handler();
 8001030:	f000 f900 	bl	8001234 <Error_Handler>
	}
	/* USER CODE BEGIN ADC1_Init 2 */

	/* USER CODE END ADC1_Init 2 */

}
 8001034:	bf00      	nop
 8001036:	3710      	adds	r7, #16
 8001038:	46bd      	mov	sp, r7
 800103a:	bd80      	pop	{r7, pc}
 800103c:	2000002c 	.word	0x2000002c
 8001040:	40012400 	.word	0x40012400

08001044 <MX_USART2_UART_Init>:
/**
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void) {
 8001044:	b580      	push	{r7, lr}
 8001046:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 8001048:	4b11      	ldr	r3, [pc, #68]	; (8001090 <MX_USART2_UART_Init+0x4c>)
 800104a:	4a12      	ldr	r2, [pc, #72]	; (8001094 <MX_USART2_UART_Init+0x50>)
 800104c:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 9600;
 800104e:	4b10      	ldr	r3, [pc, #64]	; (8001090 <MX_USART2_UART_Init+0x4c>)
 8001050:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001054:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001056:	4b0e      	ldr	r3, [pc, #56]	; (8001090 <MX_USART2_UART_Init+0x4c>)
 8001058:	2200      	movs	r2, #0
 800105a:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 800105c:	4b0c      	ldr	r3, [pc, #48]	; (8001090 <MX_USART2_UART_Init+0x4c>)
 800105e:	2200      	movs	r2, #0
 8001060:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 8001062:	4b0b      	ldr	r3, [pc, #44]	; (8001090 <MX_USART2_UART_Init+0x4c>)
 8001064:	2200      	movs	r2, #0
 8001066:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 8001068:	4b09      	ldr	r3, [pc, #36]	; (8001090 <MX_USART2_UART_Init+0x4c>)
 800106a:	220c      	movs	r2, #12
 800106c:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800106e:	4b08      	ldr	r3, [pc, #32]	; (8001090 <MX_USART2_UART_Init+0x4c>)
 8001070:	2200      	movs	r2, #0
 8001072:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001074:	4b06      	ldr	r3, [pc, #24]	; (8001090 <MX_USART2_UART_Init+0x4c>)
 8001076:	2200      	movs	r2, #0
 8001078:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart2) != HAL_OK) {
 800107a:	4805      	ldr	r0, [pc, #20]	; (8001090 <MX_USART2_UART_Init+0x4c>)
 800107c:	f001 fbb0 	bl	80027e0 <HAL_UART_Init>
 8001080:	4603      	mov	r3, r0
 8001082:	2b00      	cmp	r3, #0
 8001084:	d001      	beq.n	800108a <MX_USART2_UART_Init+0x46>
		Error_Handler();
 8001086:	f000 f8d5 	bl	8001234 <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 800108a:	bf00      	nop
 800108c:	bd80      	pop	{r7, pc}
 800108e:	bf00      	nop
 8001090:	2000005c 	.word	0x2000005c
 8001094:	40004400 	.word	0x40004400

08001098 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8001098:	b580      	push	{r7, lr}
 800109a:	b08a      	sub	sp, #40	; 0x28
 800109c:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 800109e:	f107 0314 	add.w	r3, r7, #20
 80010a2:	2200      	movs	r2, #0
 80010a4:	601a      	str	r2, [r3, #0]
 80010a6:	605a      	str	r2, [r3, #4]
 80010a8:	609a      	str	r2, [r3, #8]
 80010aa:	60da      	str	r2, [r3, #12]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 80010ac:	4b51      	ldr	r3, [pc, #324]	; (80011f4 <MX_GPIO_Init+0x15c>)
 80010ae:	699b      	ldr	r3, [r3, #24]
 80010b0:	4a50      	ldr	r2, [pc, #320]	; (80011f4 <MX_GPIO_Init+0x15c>)
 80010b2:	f043 0310 	orr.w	r3, r3, #16
 80010b6:	6193      	str	r3, [r2, #24]
 80010b8:	4b4e      	ldr	r3, [pc, #312]	; (80011f4 <MX_GPIO_Init+0x15c>)
 80010ba:	699b      	ldr	r3, [r3, #24]
 80010bc:	f003 0310 	and.w	r3, r3, #16
 80010c0:	613b      	str	r3, [r7, #16]
 80010c2:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 80010c4:	4b4b      	ldr	r3, [pc, #300]	; (80011f4 <MX_GPIO_Init+0x15c>)
 80010c6:	699b      	ldr	r3, [r3, #24]
 80010c8:	4a4a      	ldr	r2, [pc, #296]	; (80011f4 <MX_GPIO_Init+0x15c>)
 80010ca:	f043 0320 	orr.w	r3, r3, #32
 80010ce:	6193      	str	r3, [r2, #24]
 80010d0:	4b48      	ldr	r3, [pc, #288]	; (80011f4 <MX_GPIO_Init+0x15c>)
 80010d2:	699b      	ldr	r3, [r3, #24]
 80010d4:	f003 0320 	and.w	r3, r3, #32
 80010d8:	60fb      	str	r3, [r7, #12]
 80010da:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80010dc:	4b45      	ldr	r3, [pc, #276]	; (80011f4 <MX_GPIO_Init+0x15c>)
 80010de:	699b      	ldr	r3, [r3, #24]
 80010e0:	4a44      	ldr	r2, [pc, #272]	; (80011f4 <MX_GPIO_Init+0x15c>)
 80010e2:	f043 0304 	orr.w	r3, r3, #4
 80010e6:	6193      	str	r3, [r2, #24]
 80010e8:	4b42      	ldr	r3, [pc, #264]	; (80011f4 <MX_GPIO_Init+0x15c>)
 80010ea:	699b      	ldr	r3, [r3, #24]
 80010ec:	f003 0304 	and.w	r3, r3, #4
 80010f0:	60bb      	str	r3, [r7, #8]
 80010f2:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80010f4:	4b3f      	ldr	r3, [pc, #252]	; (80011f4 <MX_GPIO_Init+0x15c>)
 80010f6:	699b      	ldr	r3, [r3, #24]
 80010f8:	4a3e      	ldr	r2, [pc, #248]	; (80011f4 <MX_GPIO_Init+0x15c>)
 80010fa:	f043 0308 	orr.w	r3, r3, #8
 80010fe:	6193      	str	r3, [r2, #24]
 8001100:	4b3c      	ldr	r3, [pc, #240]	; (80011f4 <MX_GPIO_Init+0x15c>)
 8001102:	699b      	ldr	r3, [r3, #24]
 8001104:	f003 0308 	and.w	r3, r3, #8
 8001108:	607b      	str	r3, [r7, #4]
 800110a:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(USER_LED_GPIO_Port, USER_LED_Pin, GPIO_PIN_RESET);
 800110c:	2200      	movs	r2, #0
 800110e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001112:	4839      	ldr	r0, [pc, #228]	; (80011f8 <MX_GPIO_Init+0x160>)
 8001114:	f000 fe6c 	bl	8001df0 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA,
 8001118:	2200      	movs	r2, #0
 800111a:	f44f 51f0 	mov.w	r1, #7680	; 0x1e00
 800111e:	4837      	ldr	r0, [pc, #220]	; (80011fc <MX_GPIO_Init+0x164>)
 8001120:	f000 fe66 	bl	8001df0 <HAL_GPIO_WritePin>
	BRAKE_LIGHT_RELAY_Pin | FAN_RELAY_Pin | PUMP_RELAY_Pin | EVMS_RELAY_Pin,
			GPIO_PIN_RESET);

	/*Configure GPIO pin : USER_LED_Pin */
	GPIO_InitStruct.Pin = USER_LED_Pin;
 8001124:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001128:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800112a:	2301      	movs	r3, #1
 800112c:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800112e:	2300      	movs	r3, #0
 8001130:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001132:	2302      	movs	r3, #2
 8001134:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(USER_LED_GPIO_Port, &GPIO_InitStruct);
 8001136:	f107 0314 	add.w	r3, r7, #20
 800113a:	4619      	mov	r1, r3
 800113c:	482e      	ldr	r0, [pc, #184]	; (80011f8 <MX_GPIO_Init+0x160>)
 800113e:	f000 fcd3 	bl	8001ae8 <HAL_GPIO_Init>

	/*Configure GPIO pins : BSPD_FB_Pin BSPD_RELAY_FB_Pin IMD_FB_Pin IMD_RELAY_FB_Pin */
	GPIO_InitStruct.Pin = BSPD_FB_Pin | BSPD_RELAY_FB_Pin | IMD_FB_Pin
 8001142:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8001146:	617b      	str	r3, [r7, #20]
			| IMD_RELAY_FB_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001148:	2300      	movs	r3, #0
 800114a:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800114c:	2300      	movs	r3, #0
 800114e:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001150:	f107 0314 	add.w	r3, r7, #20
 8001154:	4619      	mov	r1, r3
 8001156:	482a      	ldr	r0, [pc, #168]	; (8001200 <MX_GPIO_Init+0x168>)
 8001158:	f000 fcc6 	bl	8001ae8 <HAL_GPIO_Init>

	/*Configure GPIO pin : BMS_FB_Pin */
	GPIO_InitStruct.Pin = BMS_FB_Pin;
 800115c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001160:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001162:	2300      	movs	r3, #0
 8001164:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001166:	2300      	movs	r3, #0
 8001168:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(BMS_FB_GPIO_Port, &GPIO_InitStruct);
 800116a:	f107 0314 	add.w	r3, r7, #20
 800116e:	4619      	mov	r1, r3
 8001170:	4822      	ldr	r0, [pc, #136]	; (80011fc <MX_GPIO_Init+0x164>)
 8001172:	f000 fcb9 	bl	8001ae8 <HAL_GPIO_Init>

	/*Configure GPIO pins : BRAKE_LIGHT_RELAY_Pin FAN_RELAY_Pin PUMP_RELAY_Pin EVMS_RELAY_Pin */
	GPIO_InitStruct.Pin = BRAKE_LIGHT_RELAY_Pin | FAN_RELAY_Pin | PUMP_RELAY_Pin
 8001176:	f44f 53f0 	mov.w	r3, #7680	; 0x1e00
 800117a:	617b      	str	r3, [r7, #20]
			| EVMS_RELAY_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800117c:	2301      	movs	r3, #1
 800117e:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001180:	2300      	movs	r3, #0
 8001182:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001184:	2302      	movs	r3, #2
 8001186:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001188:	f107 0314 	add.w	r3, r7, #20
 800118c:	4619      	mov	r1, r3
 800118e:	481b      	ldr	r0, [pc, #108]	; (80011fc <MX_GPIO_Init+0x164>)
 8001190:	f000 fcaa 	bl	8001ae8 <HAL_GPIO_Init>

	/*Configure GPIO pin : PB8 */
	GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001194:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001198:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800119a:	2300      	movs	r3, #0
 800119c:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800119e:	2300      	movs	r3, #0
 80011a0:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011a2:	f107 0314 	add.w	r3, r7, #20
 80011a6:	4619      	mov	r1, r3
 80011a8:	4815      	ldr	r0, [pc, #84]	; (8001200 <MX_GPIO_Init+0x168>)
 80011aa:	f000 fc9d 	bl	8001ae8 <HAL_GPIO_Init>

	/*Configure GPIO pin : PB9 */
	GPIO_InitStruct.Pin = GPIO_PIN_9;
 80011ae:	f44f 7300 	mov.w	r3, #512	; 0x200
 80011b2:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011b4:	2302      	movs	r3, #2
 80011b6:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80011b8:	2303      	movs	r3, #3
 80011ba:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011bc:	f107 0314 	add.w	r3, r7, #20
 80011c0:	4619      	mov	r1, r3
 80011c2:	480f      	ldr	r0, [pc, #60]	; (8001200 <MX_GPIO_Init+0x168>)
 80011c4:	f000 fc90 	bl	8001ae8 <HAL_GPIO_Init>

	/*Configure peripheral I/O remapping */
	__HAL_AFIO_REMAP_CAN1_2();
 80011c8:	4b0e      	ldr	r3, [pc, #56]	; (8001204 <MX_GPIO_Init+0x16c>)
 80011ca:	685b      	ldr	r3, [r3, #4]
 80011cc:	627b      	str	r3, [r7, #36]	; 0x24
 80011ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011d0:	f423 43c0 	bic.w	r3, r3, #24576	; 0x6000
 80011d4:	627b      	str	r3, [r7, #36]	; 0x24
 80011d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011d8:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 80011dc:	627b      	str	r3, [r7, #36]	; 0x24
 80011de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011e0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80011e4:	627b      	str	r3, [r7, #36]	; 0x24
 80011e6:	4a07      	ldr	r2, [pc, #28]	; (8001204 <MX_GPIO_Init+0x16c>)
 80011e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011ea:	6053      	str	r3, [r2, #4]

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 80011ec:	bf00      	nop
 80011ee:	3728      	adds	r7, #40	; 0x28
 80011f0:	46bd      	mov	sp, r7
 80011f2:	bd80      	pop	{r7, pc}
 80011f4:	40021000 	.word	0x40021000
 80011f8:	40011000 	.word	0x40011000
 80011fc:	40010800 	.word	0x40010800
 8001200:	40010c00 	.word	0x40010c00
 8001204:	40010000 	.word	0x40010000

08001208 <CAN_InitPeriph>:

/* USER CODE BEGIN 4 */
void CAN_InitPeriph(void) {
 8001208:	b580      	push	{r7, lr}
 800120a:	af00      	add	r7, sp, #0
	CAN_init(CAN1, CAN_CONFIG_1);
 800120c:	2100      	movs	r1, #0
 800120e:	4808      	ldr	r0, [pc, #32]	; (8001230 <CAN_InitPeriph+0x28>)
 8001210:	f7fe ff9c 	bl	800014c <CAN_init>
	/* Filter on BMS frame only with ID = 0x6AC*/
	CAN_appendDeviceToBus(0x6AC, CAN_STANDARD_IDENTIFIER);
 8001214:	2100      	movs	r1, #0
 8001216:	f240 60ac 	movw	r0, #1708	; 0x6ac
 800121a:	f7ff fbbb 	bl	8000994 <CAN_appendDeviceToBus>
	CAN_setSlaveStartBank(14);
 800121e:	200e      	movs	r0, #14
 8001220:	f7ff f9e8 	bl	80005f4 <CAN_setSlaveStartBank>
	CAN_setMode(CAN1, CAN_Mode_Normal);
 8001224:	2100      	movs	r1, #0
 8001226:	4802      	ldr	r0, [pc, #8]	; (8001230 <CAN_InitPeriph+0x28>)
 8001228:	f7ff f84c 	bl	80002c4 <CAN_setMode>
}
 800122c:	bf00      	nop
 800122e:	bd80      	pop	{r7, pc}
 8001230:	40006400 	.word	0x40006400

08001234 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8001234:	b480      	push	{r7}
 8001236:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001238:	b672      	cpsid	i
}
 800123a:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 800123c:	e7fe      	b.n	800123c <Error_Handler+0x8>
	...

08001240 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001240:	b480      	push	{r7}
 8001242:	b083      	sub	sp, #12
 8001244:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001246:	4b0e      	ldr	r3, [pc, #56]	; (8001280 <HAL_MspInit+0x40>)
 8001248:	699b      	ldr	r3, [r3, #24]
 800124a:	4a0d      	ldr	r2, [pc, #52]	; (8001280 <HAL_MspInit+0x40>)
 800124c:	f043 0301 	orr.w	r3, r3, #1
 8001250:	6193      	str	r3, [r2, #24]
 8001252:	4b0b      	ldr	r3, [pc, #44]	; (8001280 <HAL_MspInit+0x40>)
 8001254:	699b      	ldr	r3, [r3, #24]
 8001256:	f003 0301 	and.w	r3, r3, #1
 800125a:	607b      	str	r3, [r7, #4]
 800125c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800125e:	4b08      	ldr	r3, [pc, #32]	; (8001280 <HAL_MspInit+0x40>)
 8001260:	69db      	ldr	r3, [r3, #28]
 8001262:	4a07      	ldr	r2, [pc, #28]	; (8001280 <HAL_MspInit+0x40>)
 8001264:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001268:	61d3      	str	r3, [r2, #28]
 800126a:	4b05      	ldr	r3, [pc, #20]	; (8001280 <HAL_MspInit+0x40>)
 800126c:	69db      	ldr	r3, [r3, #28]
 800126e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001272:	603b      	str	r3, [r7, #0]
 8001274:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001276:	bf00      	nop
 8001278:	370c      	adds	r7, #12
 800127a:	46bd      	mov	sp, r7
 800127c:	bc80      	pop	{r7}
 800127e:	4770      	bx	lr
 8001280:	40021000 	.word	0x40021000

08001284 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001284:	b580      	push	{r7, lr}
 8001286:	b088      	sub	sp, #32
 8001288:	af00      	add	r7, sp, #0
 800128a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800128c:	f107 0310 	add.w	r3, r7, #16
 8001290:	2200      	movs	r2, #0
 8001292:	601a      	str	r2, [r3, #0]
 8001294:	605a      	str	r2, [r3, #4]
 8001296:	609a      	str	r2, [r3, #8]
 8001298:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	4a14      	ldr	r2, [pc, #80]	; (80012f0 <HAL_ADC_MspInit+0x6c>)
 80012a0:	4293      	cmp	r3, r2
 80012a2:	d121      	bne.n	80012e8 <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80012a4:	4b13      	ldr	r3, [pc, #76]	; (80012f4 <HAL_ADC_MspInit+0x70>)
 80012a6:	699b      	ldr	r3, [r3, #24]
 80012a8:	4a12      	ldr	r2, [pc, #72]	; (80012f4 <HAL_ADC_MspInit+0x70>)
 80012aa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80012ae:	6193      	str	r3, [r2, #24]
 80012b0:	4b10      	ldr	r3, [pc, #64]	; (80012f4 <HAL_ADC_MspInit+0x70>)
 80012b2:	699b      	ldr	r3, [r3, #24]
 80012b4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80012b8:	60fb      	str	r3, [r7, #12]
 80012ba:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012bc:	4b0d      	ldr	r3, [pc, #52]	; (80012f4 <HAL_ADC_MspInit+0x70>)
 80012be:	699b      	ldr	r3, [r3, #24]
 80012c0:	4a0c      	ldr	r2, [pc, #48]	; (80012f4 <HAL_ADC_MspInit+0x70>)
 80012c2:	f043 0304 	orr.w	r3, r3, #4
 80012c6:	6193      	str	r3, [r2, #24]
 80012c8:	4b0a      	ldr	r3, [pc, #40]	; (80012f4 <HAL_ADC_MspInit+0x70>)
 80012ca:	699b      	ldr	r3, [r3, #24]
 80012cc:	f003 0304 	and.w	r3, r3, #4
 80012d0:	60bb      	str	r3, [r7, #8]
 80012d2:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = BRAKE_ANGLE_Pin|BRAKE_PRESSURE_SENSE_Pin;
 80012d4:	2303      	movs	r3, #3
 80012d6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80012d8:	2303      	movs	r3, #3
 80012da:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012dc:	f107 0310 	add.w	r3, r7, #16
 80012e0:	4619      	mov	r1, r3
 80012e2:	4805      	ldr	r0, [pc, #20]	; (80012f8 <HAL_ADC_MspInit+0x74>)
 80012e4:	f000 fc00 	bl	8001ae8 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80012e8:	bf00      	nop
 80012ea:	3720      	adds	r7, #32
 80012ec:	46bd      	mov	sp, r7
 80012ee:	bd80      	pop	{r7, pc}
 80012f0:	40012400 	.word	0x40012400
 80012f4:	40021000 	.word	0x40021000
 80012f8:	40010800 	.word	0x40010800

080012fc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80012fc:	b580      	push	{r7, lr}
 80012fe:	b088      	sub	sp, #32
 8001300:	af00      	add	r7, sp, #0
 8001302:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001304:	f107 0310 	add.w	r3, r7, #16
 8001308:	2200      	movs	r2, #0
 800130a:	601a      	str	r2, [r3, #0]
 800130c:	605a      	str	r2, [r3, #4]
 800130e:	609a      	str	r2, [r3, #8]
 8001310:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	4a1b      	ldr	r2, [pc, #108]	; (8001384 <HAL_UART_MspInit+0x88>)
 8001318:	4293      	cmp	r3, r2
 800131a:	d12f      	bne.n	800137c <HAL_UART_MspInit+0x80>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800131c:	4b1a      	ldr	r3, [pc, #104]	; (8001388 <HAL_UART_MspInit+0x8c>)
 800131e:	69db      	ldr	r3, [r3, #28]
 8001320:	4a19      	ldr	r2, [pc, #100]	; (8001388 <HAL_UART_MspInit+0x8c>)
 8001322:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001326:	61d3      	str	r3, [r2, #28]
 8001328:	4b17      	ldr	r3, [pc, #92]	; (8001388 <HAL_UART_MspInit+0x8c>)
 800132a:	69db      	ldr	r3, [r3, #28]
 800132c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001330:	60fb      	str	r3, [r7, #12]
 8001332:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001334:	4b14      	ldr	r3, [pc, #80]	; (8001388 <HAL_UART_MspInit+0x8c>)
 8001336:	699b      	ldr	r3, [r3, #24]
 8001338:	4a13      	ldr	r2, [pc, #76]	; (8001388 <HAL_UART_MspInit+0x8c>)
 800133a:	f043 0304 	orr.w	r3, r3, #4
 800133e:	6193      	str	r3, [r2, #24]
 8001340:	4b11      	ldr	r3, [pc, #68]	; (8001388 <HAL_UART_MspInit+0x8c>)
 8001342:	699b      	ldr	r3, [r3, #24]
 8001344:	f003 0304 	and.w	r3, r3, #4
 8001348:	60bb      	str	r3, [r7, #8]
 800134a:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800134c:	2304      	movs	r3, #4
 800134e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001350:	2302      	movs	r3, #2
 8001352:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001354:	2303      	movs	r3, #3
 8001356:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001358:	f107 0310 	add.w	r3, r7, #16
 800135c:	4619      	mov	r1, r3
 800135e:	480b      	ldr	r0, [pc, #44]	; (800138c <HAL_UART_MspInit+0x90>)
 8001360:	f000 fbc2 	bl	8001ae8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001364:	2308      	movs	r3, #8
 8001366:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001368:	2300      	movs	r3, #0
 800136a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800136c:	2300      	movs	r3, #0
 800136e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001370:	f107 0310 	add.w	r3, r7, #16
 8001374:	4619      	mov	r1, r3
 8001376:	4805      	ldr	r0, [pc, #20]	; (800138c <HAL_UART_MspInit+0x90>)
 8001378:	f000 fbb6 	bl	8001ae8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800137c:	bf00      	nop
 800137e:	3720      	adds	r7, #32
 8001380:	46bd      	mov	sp, r7
 8001382:	bd80      	pop	{r7, pc}
 8001384:	40004400 	.word	0x40004400
 8001388:	40021000 	.word	0x40021000
 800138c:	40010800 	.word	0x40010800

08001390 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001390:	b480      	push	{r7}
 8001392:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001394:	e7fe      	b.n	8001394 <NMI_Handler+0x4>

08001396 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001396:	b480      	push	{r7}
 8001398:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800139a:	e7fe      	b.n	800139a <HardFault_Handler+0x4>

0800139c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800139c:	b480      	push	{r7}
 800139e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80013a0:	e7fe      	b.n	80013a0 <MemManage_Handler+0x4>

080013a2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80013a2:	b480      	push	{r7}
 80013a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80013a6:	e7fe      	b.n	80013a6 <BusFault_Handler+0x4>

080013a8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80013a8:	b480      	push	{r7}
 80013aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80013ac:	e7fe      	b.n	80013ac <UsageFault_Handler+0x4>

080013ae <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80013ae:	b480      	push	{r7}
 80013b0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80013b2:	bf00      	nop
 80013b4:	46bd      	mov	sp, r7
 80013b6:	bc80      	pop	{r7}
 80013b8:	4770      	bx	lr

080013ba <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80013ba:	b480      	push	{r7}
 80013bc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80013be:	bf00      	nop
 80013c0:	46bd      	mov	sp, r7
 80013c2:	bc80      	pop	{r7}
 80013c4:	4770      	bx	lr

080013c6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80013c6:	b480      	push	{r7}
 80013c8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80013ca:	bf00      	nop
 80013cc:	46bd      	mov	sp, r7
 80013ce:	bc80      	pop	{r7}
 80013d0:	4770      	bx	lr

080013d2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80013d2:	b580      	push	{r7, lr}
 80013d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80013d6:	f000 f875 	bl	80014c4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80013da:	bf00      	nop
 80013dc:	bd80      	pop	{r7, pc}

080013de <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80013de:	b480      	push	{r7}
 80013e0:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80013e2:	bf00      	nop
 80013e4:	46bd      	mov	sp, r7
 80013e6:	bc80      	pop	{r7}
 80013e8:	4770      	bx	lr
	...

080013ec <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80013ec:	f7ff fff7 	bl	80013de <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80013f0:	480b      	ldr	r0, [pc, #44]	; (8001420 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80013f2:	490c      	ldr	r1, [pc, #48]	; (8001424 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80013f4:	4a0c      	ldr	r2, [pc, #48]	; (8001428 <LoopFillZerobss+0x16>)
  movs r3, #0
 80013f6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80013f8:	e002      	b.n	8001400 <LoopCopyDataInit>

080013fa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80013fa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80013fc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80013fe:	3304      	adds	r3, #4

08001400 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001400:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001402:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001404:	d3f9      	bcc.n	80013fa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001406:	4a09      	ldr	r2, [pc, #36]	; (800142c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001408:	4c09      	ldr	r4, [pc, #36]	; (8001430 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800140a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800140c:	e001      	b.n	8001412 <LoopFillZerobss>

0800140e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800140e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001410:	3204      	adds	r2, #4

08001412 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001412:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001414:	d3fb      	bcc.n	800140e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001416:	f001 fac1 	bl	800299c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800141a:	f7ff fd39 	bl	8000e90 <main>
  bx lr
 800141e:	4770      	bx	lr
  ldr r0, =_sdata
 8001420:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001424:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001428:	08002a40 	.word	0x08002a40
  ldr r2, =_sbss
 800142c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001430:	200000a8 	.word	0x200000a8

08001434 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001434:	e7fe      	b.n	8001434 <ADC1_2_IRQHandler>
	...

08001438 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001438:	b580      	push	{r7, lr}
 800143a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800143c:	4b08      	ldr	r3, [pc, #32]	; (8001460 <HAL_Init+0x28>)
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	4a07      	ldr	r2, [pc, #28]	; (8001460 <HAL_Init+0x28>)
 8001442:	f043 0310 	orr.w	r3, r3, #16
 8001446:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001448:	2003      	movs	r0, #3
 800144a:	f000 fb19 	bl	8001a80 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800144e:	200f      	movs	r0, #15
 8001450:	f000 f808 	bl	8001464 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001454:	f7ff fef4 	bl	8001240 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001458:	2300      	movs	r3, #0
}
 800145a:	4618      	mov	r0, r3
 800145c:	bd80      	pop	{r7, pc}
 800145e:	bf00      	nop
 8001460:	40022000 	.word	0x40022000

08001464 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001464:	b580      	push	{r7, lr}
 8001466:	b082      	sub	sp, #8
 8001468:	af00      	add	r7, sp, #0
 800146a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800146c:	4b12      	ldr	r3, [pc, #72]	; (80014b8 <HAL_InitTick+0x54>)
 800146e:	681a      	ldr	r2, [r3, #0]
 8001470:	4b12      	ldr	r3, [pc, #72]	; (80014bc <HAL_InitTick+0x58>)
 8001472:	781b      	ldrb	r3, [r3, #0]
 8001474:	4619      	mov	r1, r3
 8001476:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800147a:	fbb3 f3f1 	udiv	r3, r3, r1
 800147e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001482:	4618      	mov	r0, r3
 8001484:	f000 fb23 	bl	8001ace <HAL_SYSTICK_Config>
 8001488:	4603      	mov	r3, r0
 800148a:	2b00      	cmp	r3, #0
 800148c:	d001      	beq.n	8001492 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800148e:	2301      	movs	r3, #1
 8001490:	e00e      	b.n	80014b0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	2b0f      	cmp	r3, #15
 8001496:	d80a      	bhi.n	80014ae <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001498:	2200      	movs	r2, #0
 800149a:	6879      	ldr	r1, [r7, #4]
 800149c:	f04f 30ff 	mov.w	r0, #4294967295
 80014a0:	f000 faf9 	bl	8001a96 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80014a4:	4a06      	ldr	r2, [pc, #24]	; (80014c0 <HAL_InitTick+0x5c>)
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80014aa:	2300      	movs	r3, #0
 80014ac:	e000      	b.n	80014b0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80014ae:	2301      	movs	r3, #1
}
 80014b0:	4618      	mov	r0, r3
 80014b2:	3708      	adds	r7, #8
 80014b4:	46bd      	mov	sp, r7
 80014b6:	bd80      	pop	{r7, pc}
 80014b8:	20000000 	.word	0x20000000
 80014bc:	20000008 	.word	0x20000008
 80014c0:	20000004 	.word	0x20000004

080014c4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80014c4:	b480      	push	{r7}
 80014c6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80014c8:	4b05      	ldr	r3, [pc, #20]	; (80014e0 <HAL_IncTick+0x1c>)
 80014ca:	781b      	ldrb	r3, [r3, #0]
 80014cc:	461a      	mov	r2, r3
 80014ce:	4b05      	ldr	r3, [pc, #20]	; (80014e4 <HAL_IncTick+0x20>)
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	4413      	add	r3, r2
 80014d4:	4a03      	ldr	r2, [pc, #12]	; (80014e4 <HAL_IncTick+0x20>)
 80014d6:	6013      	str	r3, [r2, #0]
}
 80014d8:	bf00      	nop
 80014da:	46bd      	mov	sp, r7
 80014dc:	bc80      	pop	{r7}
 80014de:	4770      	bx	lr
 80014e0:	20000008 	.word	0x20000008
 80014e4:	200000a4 	.word	0x200000a4

080014e8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80014e8:	b480      	push	{r7}
 80014ea:	af00      	add	r7, sp, #0
  return uwTick;
 80014ec:	4b02      	ldr	r3, [pc, #8]	; (80014f8 <HAL_GetTick+0x10>)
 80014ee:	681b      	ldr	r3, [r3, #0]
}
 80014f0:	4618      	mov	r0, r3
 80014f2:	46bd      	mov	sp, r7
 80014f4:	bc80      	pop	{r7}
 80014f6:	4770      	bx	lr
 80014f8:	200000a4 	.word	0x200000a4

080014fc <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80014fc:	b580      	push	{r7, lr}
 80014fe:	b086      	sub	sp, #24
 8001500:	af00      	add	r7, sp, #0
 8001502:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001504:	2300      	movs	r3, #0
 8001506:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8001508:	2300      	movs	r3, #0
 800150a:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 800150c:	2300      	movs	r3, #0
 800150e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8001510:	2300      	movs	r3, #0
 8001512:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	2b00      	cmp	r3, #0
 8001518:	d101      	bne.n	800151e <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 800151a:	2301      	movs	r3, #1
 800151c:	e0be      	b.n	800169c <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	689b      	ldr	r3, [r3, #8]
 8001522:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001528:	2b00      	cmp	r3, #0
 800152a:	d109      	bne.n	8001540 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	2200      	movs	r2, #0
 8001530:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	2200      	movs	r2, #0
 8001536:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800153a:	6878      	ldr	r0, [r7, #4]
 800153c:	f7ff fea2 	bl	8001284 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001540:	6878      	ldr	r0, [r7, #4]
 8001542:	f000 f9ab 	bl	800189c <ADC_ConversionStop_Disable>
 8001546:	4603      	mov	r3, r0
 8001548:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800154e:	f003 0310 	and.w	r3, r3, #16
 8001552:	2b00      	cmp	r3, #0
 8001554:	f040 8099 	bne.w	800168a <HAL_ADC_Init+0x18e>
 8001558:	7dfb      	ldrb	r3, [r7, #23]
 800155a:	2b00      	cmp	r3, #0
 800155c:	f040 8095 	bne.w	800168a <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001564:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001568:	f023 0302 	bic.w	r3, r3, #2
 800156c:	f043 0202 	orr.w	r2, r3, #2
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800157c:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	7b1b      	ldrb	r3, [r3, #12]
 8001582:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001584:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001586:	68ba      	ldr	r2, [r7, #8]
 8001588:	4313      	orrs	r3, r2
 800158a:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	689b      	ldr	r3, [r3, #8]
 8001590:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001594:	d003      	beq.n	800159e <HAL_ADC_Init+0xa2>
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	689b      	ldr	r3, [r3, #8]
 800159a:	2b01      	cmp	r3, #1
 800159c:	d102      	bne.n	80015a4 <HAL_ADC_Init+0xa8>
 800159e:	f44f 7380 	mov.w	r3, #256	; 0x100
 80015a2:	e000      	b.n	80015a6 <HAL_ADC_Init+0xaa>
 80015a4:	2300      	movs	r3, #0
 80015a6:	693a      	ldr	r2, [r7, #16]
 80015a8:	4313      	orrs	r3, r2
 80015aa:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	7d1b      	ldrb	r3, [r3, #20]
 80015b0:	2b01      	cmp	r3, #1
 80015b2:	d119      	bne.n	80015e8 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	7b1b      	ldrb	r3, [r3, #12]
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d109      	bne.n	80015d0 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	699b      	ldr	r3, [r3, #24]
 80015c0:	3b01      	subs	r3, #1
 80015c2:	035a      	lsls	r2, r3, #13
 80015c4:	693b      	ldr	r3, [r7, #16]
 80015c6:	4313      	orrs	r3, r2
 80015c8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80015cc:	613b      	str	r3, [r7, #16]
 80015ce:	e00b      	b.n	80015e8 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015d4:	f043 0220 	orr.w	r2, r3, #32
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015e0:	f043 0201 	orr.w	r2, r3, #1
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	685b      	ldr	r3, [r3, #4]
 80015ee:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	693a      	ldr	r2, [r7, #16]
 80015f8:	430a      	orrs	r2, r1
 80015fa:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	689a      	ldr	r2, [r3, #8]
 8001602:	4b28      	ldr	r3, [pc, #160]	; (80016a4 <HAL_ADC_Init+0x1a8>)
 8001604:	4013      	ands	r3, r2
 8001606:	687a      	ldr	r2, [r7, #4]
 8001608:	6812      	ldr	r2, [r2, #0]
 800160a:	68b9      	ldr	r1, [r7, #8]
 800160c:	430b      	orrs	r3, r1
 800160e:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	689b      	ldr	r3, [r3, #8]
 8001614:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001618:	d003      	beq.n	8001622 <HAL_ADC_Init+0x126>
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	689b      	ldr	r3, [r3, #8]
 800161e:	2b01      	cmp	r3, #1
 8001620:	d104      	bne.n	800162c <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	691b      	ldr	r3, [r3, #16]
 8001626:	3b01      	subs	r3, #1
 8001628:	051b      	lsls	r3, r3, #20
 800162a:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001632:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	68fa      	ldr	r2, [r7, #12]
 800163c:	430a      	orrs	r2, r1
 800163e:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	689a      	ldr	r2, [r3, #8]
 8001646:	4b18      	ldr	r3, [pc, #96]	; (80016a8 <HAL_ADC_Init+0x1ac>)
 8001648:	4013      	ands	r3, r2
 800164a:	68ba      	ldr	r2, [r7, #8]
 800164c:	429a      	cmp	r2, r3
 800164e:	d10b      	bne.n	8001668 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	2200      	movs	r2, #0
 8001654:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800165a:	f023 0303 	bic.w	r3, r3, #3
 800165e:	f043 0201 	orr.w	r2, r3, #1
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001666:	e018      	b.n	800169a <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800166c:	f023 0312 	bic.w	r3, r3, #18
 8001670:	f043 0210 	orr.w	r2, r3, #16
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800167c:	f043 0201 	orr.w	r2, r3, #1
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8001684:	2301      	movs	r3, #1
 8001686:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001688:	e007      	b.n	800169a <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800168e:	f043 0210 	orr.w	r2, r3, #16
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8001696:	2301      	movs	r3, #1
 8001698:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800169a:	7dfb      	ldrb	r3, [r7, #23]
}
 800169c:	4618      	mov	r0, r3
 800169e:	3718      	adds	r7, #24
 80016a0:	46bd      	mov	sp, r7
 80016a2:	bd80      	pop	{r7, pc}
 80016a4:	ffe1f7fd 	.word	0xffe1f7fd
 80016a8:	ff1f0efe 	.word	0xff1f0efe

080016ac <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 80016ac:	b480      	push	{r7}
 80016ae:	b085      	sub	sp, #20
 80016b0:	af00      	add	r7, sp, #0
 80016b2:	6078      	str	r0, [r7, #4]
 80016b4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80016b6:	2300      	movs	r3, #0
 80016b8:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 80016ba:	2300      	movs	r3, #0
 80016bc:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80016c4:	2b01      	cmp	r3, #1
 80016c6:	d101      	bne.n	80016cc <HAL_ADC_ConfigChannel+0x20>
 80016c8:	2302      	movs	r3, #2
 80016ca:	e0dc      	b.n	8001886 <HAL_ADC_ConfigChannel+0x1da>
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	2201      	movs	r2, #1
 80016d0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80016d4:	683b      	ldr	r3, [r7, #0]
 80016d6:	685b      	ldr	r3, [r3, #4]
 80016d8:	2b06      	cmp	r3, #6
 80016da:	d81c      	bhi.n	8001716 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80016e2:	683b      	ldr	r3, [r7, #0]
 80016e4:	685a      	ldr	r2, [r3, #4]
 80016e6:	4613      	mov	r3, r2
 80016e8:	009b      	lsls	r3, r3, #2
 80016ea:	4413      	add	r3, r2
 80016ec:	3b05      	subs	r3, #5
 80016ee:	221f      	movs	r2, #31
 80016f0:	fa02 f303 	lsl.w	r3, r2, r3
 80016f4:	43db      	mvns	r3, r3
 80016f6:	4019      	ands	r1, r3
 80016f8:	683b      	ldr	r3, [r7, #0]
 80016fa:	6818      	ldr	r0, [r3, #0]
 80016fc:	683b      	ldr	r3, [r7, #0]
 80016fe:	685a      	ldr	r2, [r3, #4]
 8001700:	4613      	mov	r3, r2
 8001702:	009b      	lsls	r3, r3, #2
 8001704:	4413      	add	r3, r2
 8001706:	3b05      	subs	r3, #5
 8001708:	fa00 f203 	lsl.w	r2, r0, r3
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	430a      	orrs	r2, r1
 8001712:	635a      	str	r2, [r3, #52]	; 0x34
 8001714:	e03c      	b.n	8001790 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001716:	683b      	ldr	r3, [r7, #0]
 8001718:	685b      	ldr	r3, [r3, #4]
 800171a:	2b0c      	cmp	r3, #12
 800171c:	d81c      	bhi.n	8001758 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001724:	683b      	ldr	r3, [r7, #0]
 8001726:	685a      	ldr	r2, [r3, #4]
 8001728:	4613      	mov	r3, r2
 800172a:	009b      	lsls	r3, r3, #2
 800172c:	4413      	add	r3, r2
 800172e:	3b23      	subs	r3, #35	; 0x23
 8001730:	221f      	movs	r2, #31
 8001732:	fa02 f303 	lsl.w	r3, r2, r3
 8001736:	43db      	mvns	r3, r3
 8001738:	4019      	ands	r1, r3
 800173a:	683b      	ldr	r3, [r7, #0]
 800173c:	6818      	ldr	r0, [r3, #0]
 800173e:	683b      	ldr	r3, [r7, #0]
 8001740:	685a      	ldr	r2, [r3, #4]
 8001742:	4613      	mov	r3, r2
 8001744:	009b      	lsls	r3, r3, #2
 8001746:	4413      	add	r3, r2
 8001748:	3b23      	subs	r3, #35	; 0x23
 800174a:	fa00 f203 	lsl.w	r2, r0, r3
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	430a      	orrs	r2, r1
 8001754:	631a      	str	r2, [r3, #48]	; 0x30
 8001756:	e01b      	b.n	8001790 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800175e:	683b      	ldr	r3, [r7, #0]
 8001760:	685a      	ldr	r2, [r3, #4]
 8001762:	4613      	mov	r3, r2
 8001764:	009b      	lsls	r3, r3, #2
 8001766:	4413      	add	r3, r2
 8001768:	3b41      	subs	r3, #65	; 0x41
 800176a:	221f      	movs	r2, #31
 800176c:	fa02 f303 	lsl.w	r3, r2, r3
 8001770:	43db      	mvns	r3, r3
 8001772:	4019      	ands	r1, r3
 8001774:	683b      	ldr	r3, [r7, #0]
 8001776:	6818      	ldr	r0, [r3, #0]
 8001778:	683b      	ldr	r3, [r7, #0]
 800177a:	685a      	ldr	r2, [r3, #4]
 800177c:	4613      	mov	r3, r2
 800177e:	009b      	lsls	r3, r3, #2
 8001780:	4413      	add	r3, r2
 8001782:	3b41      	subs	r3, #65	; 0x41
 8001784:	fa00 f203 	lsl.w	r2, r0, r3
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	430a      	orrs	r2, r1
 800178e:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8001790:	683b      	ldr	r3, [r7, #0]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	2b09      	cmp	r3, #9
 8001796:	d91c      	bls.n	80017d2 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	68d9      	ldr	r1, [r3, #12]
 800179e:	683b      	ldr	r3, [r7, #0]
 80017a0:	681a      	ldr	r2, [r3, #0]
 80017a2:	4613      	mov	r3, r2
 80017a4:	005b      	lsls	r3, r3, #1
 80017a6:	4413      	add	r3, r2
 80017a8:	3b1e      	subs	r3, #30
 80017aa:	2207      	movs	r2, #7
 80017ac:	fa02 f303 	lsl.w	r3, r2, r3
 80017b0:	43db      	mvns	r3, r3
 80017b2:	4019      	ands	r1, r3
 80017b4:	683b      	ldr	r3, [r7, #0]
 80017b6:	6898      	ldr	r0, [r3, #8]
 80017b8:	683b      	ldr	r3, [r7, #0]
 80017ba:	681a      	ldr	r2, [r3, #0]
 80017bc:	4613      	mov	r3, r2
 80017be:	005b      	lsls	r3, r3, #1
 80017c0:	4413      	add	r3, r2
 80017c2:	3b1e      	subs	r3, #30
 80017c4:	fa00 f203 	lsl.w	r2, r0, r3
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	430a      	orrs	r2, r1
 80017ce:	60da      	str	r2, [r3, #12]
 80017d0:	e019      	b.n	8001806 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	6919      	ldr	r1, [r3, #16]
 80017d8:	683b      	ldr	r3, [r7, #0]
 80017da:	681a      	ldr	r2, [r3, #0]
 80017dc:	4613      	mov	r3, r2
 80017de:	005b      	lsls	r3, r3, #1
 80017e0:	4413      	add	r3, r2
 80017e2:	2207      	movs	r2, #7
 80017e4:	fa02 f303 	lsl.w	r3, r2, r3
 80017e8:	43db      	mvns	r3, r3
 80017ea:	4019      	ands	r1, r3
 80017ec:	683b      	ldr	r3, [r7, #0]
 80017ee:	6898      	ldr	r0, [r3, #8]
 80017f0:	683b      	ldr	r3, [r7, #0]
 80017f2:	681a      	ldr	r2, [r3, #0]
 80017f4:	4613      	mov	r3, r2
 80017f6:	005b      	lsls	r3, r3, #1
 80017f8:	4413      	add	r3, r2
 80017fa:	fa00 f203 	lsl.w	r2, r0, r3
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	430a      	orrs	r2, r1
 8001804:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001806:	683b      	ldr	r3, [r7, #0]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	2b10      	cmp	r3, #16
 800180c:	d003      	beq.n	8001816 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 800180e:	683b      	ldr	r3, [r7, #0]
 8001810:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001812:	2b11      	cmp	r3, #17
 8001814:	d132      	bne.n	800187c <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	4a1d      	ldr	r2, [pc, #116]	; (8001890 <HAL_ADC_ConfigChannel+0x1e4>)
 800181c:	4293      	cmp	r3, r2
 800181e:	d125      	bne.n	800186c <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	689b      	ldr	r3, [r3, #8]
 8001826:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800182a:	2b00      	cmp	r3, #0
 800182c:	d126      	bne.n	800187c <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	689a      	ldr	r2, [r3, #8]
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 800183c:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800183e:	683b      	ldr	r3, [r7, #0]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	2b10      	cmp	r3, #16
 8001844:	d11a      	bne.n	800187c <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001846:	4b13      	ldr	r3, [pc, #76]	; (8001894 <HAL_ADC_ConfigChannel+0x1e8>)
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	4a13      	ldr	r2, [pc, #76]	; (8001898 <HAL_ADC_ConfigChannel+0x1ec>)
 800184c:	fba2 2303 	umull	r2, r3, r2, r3
 8001850:	0c9a      	lsrs	r2, r3, #18
 8001852:	4613      	mov	r3, r2
 8001854:	009b      	lsls	r3, r3, #2
 8001856:	4413      	add	r3, r2
 8001858:	005b      	lsls	r3, r3, #1
 800185a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800185c:	e002      	b.n	8001864 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 800185e:	68bb      	ldr	r3, [r7, #8]
 8001860:	3b01      	subs	r3, #1
 8001862:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001864:	68bb      	ldr	r3, [r7, #8]
 8001866:	2b00      	cmp	r3, #0
 8001868:	d1f9      	bne.n	800185e <HAL_ADC_ConfigChannel+0x1b2>
 800186a:	e007      	b.n	800187c <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001870:	f043 0220 	orr.w	r2, r3, #32
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8001878:	2301      	movs	r3, #1
 800187a:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	2200      	movs	r2, #0
 8001880:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001884:	7bfb      	ldrb	r3, [r7, #15]
}
 8001886:	4618      	mov	r0, r3
 8001888:	3714      	adds	r7, #20
 800188a:	46bd      	mov	sp, r7
 800188c:	bc80      	pop	{r7}
 800188e:	4770      	bx	lr
 8001890:	40012400 	.word	0x40012400
 8001894:	20000000 	.word	0x20000000
 8001898:	431bde83 	.word	0x431bde83

0800189c <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 800189c:	b580      	push	{r7, lr}
 800189e:	b084      	sub	sp, #16
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80018a4:	2300      	movs	r3, #0
 80018a6:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	689b      	ldr	r3, [r3, #8]
 80018ae:	f003 0301 	and.w	r3, r3, #1
 80018b2:	2b01      	cmp	r3, #1
 80018b4:	d12e      	bne.n	8001914 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	689a      	ldr	r2, [r3, #8]
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	f022 0201 	bic.w	r2, r2, #1
 80018c4:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 80018c6:	f7ff fe0f 	bl	80014e8 <HAL_GetTick>
 80018ca:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 80018cc:	e01b      	b.n	8001906 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80018ce:	f7ff fe0b 	bl	80014e8 <HAL_GetTick>
 80018d2:	4602      	mov	r2, r0
 80018d4:	68fb      	ldr	r3, [r7, #12]
 80018d6:	1ad3      	subs	r3, r2, r3
 80018d8:	2b02      	cmp	r3, #2
 80018da:	d914      	bls.n	8001906 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	689b      	ldr	r3, [r3, #8]
 80018e2:	f003 0301 	and.w	r3, r3, #1
 80018e6:	2b01      	cmp	r3, #1
 80018e8:	d10d      	bne.n	8001906 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018ee:	f043 0210 	orr.w	r2, r3, #16
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018fa:	f043 0201 	orr.w	r2, r3, #1
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8001902:	2301      	movs	r3, #1
 8001904:	e007      	b.n	8001916 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	689b      	ldr	r3, [r3, #8]
 800190c:	f003 0301 	and.w	r3, r3, #1
 8001910:	2b01      	cmp	r3, #1
 8001912:	d0dc      	beq.n	80018ce <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001914:	2300      	movs	r3, #0
}
 8001916:	4618      	mov	r0, r3
 8001918:	3710      	adds	r7, #16
 800191a:	46bd      	mov	sp, r7
 800191c:	bd80      	pop	{r7, pc}
	...

08001920 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001920:	b480      	push	{r7}
 8001922:	b085      	sub	sp, #20
 8001924:	af00      	add	r7, sp, #0
 8001926:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	f003 0307 	and.w	r3, r3, #7
 800192e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001930:	4b0c      	ldr	r3, [pc, #48]	; (8001964 <__NVIC_SetPriorityGrouping+0x44>)
 8001932:	68db      	ldr	r3, [r3, #12]
 8001934:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001936:	68ba      	ldr	r2, [r7, #8]
 8001938:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800193c:	4013      	ands	r3, r2
 800193e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001940:	68fb      	ldr	r3, [r7, #12]
 8001942:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001944:	68bb      	ldr	r3, [r7, #8]
 8001946:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001948:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800194c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001950:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001952:	4a04      	ldr	r2, [pc, #16]	; (8001964 <__NVIC_SetPriorityGrouping+0x44>)
 8001954:	68bb      	ldr	r3, [r7, #8]
 8001956:	60d3      	str	r3, [r2, #12]
}
 8001958:	bf00      	nop
 800195a:	3714      	adds	r7, #20
 800195c:	46bd      	mov	sp, r7
 800195e:	bc80      	pop	{r7}
 8001960:	4770      	bx	lr
 8001962:	bf00      	nop
 8001964:	e000ed00 	.word	0xe000ed00

08001968 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001968:	b480      	push	{r7}
 800196a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800196c:	4b04      	ldr	r3, [pc, #16]	; (8001980 <__NVIC_GetPriorityGrouping+0x18>)
 800196e:	68db      	ldr	r3, [r3, #12]
 8001970:	0a1b      	lsrs	r3, r3, #8
 8001972:	f003 0307 	and.w	r3, r3, #7
}
 8001976:	4618      	mov	r0, r3
 8001978:	46bd      	mov	sp, r7
 800197a:	bc80      	pop	{r7}
 800197c:	4770      	bx	lr
 800197e:	bf00      	nop
 8001980:	e000ed00 	.word	0xe000ed00

08001984 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001984:	b480      	push	{r7}
 8001986:	b083      	sub	sp, #12
 8001988:	af00      	add	r7, sp, #0
 800198a:	4603      	mov	r3, r0
 800198c:	6039      	str	r1, [r7, #0]
 800198e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001990:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001994:	2b00      	cmp	r3, #0
 8001996:	db0a      	blt.n	80019ae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001998:	683b      	ldr	r3, [r7, #0]
 800199a:	b2da      	uxtb	r2, r3
 800199c:	490c      	ldr	r1, [pc, #48]	; (80019d0 <__NVIC_SetPriority+0x4c>)
 800199e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019a2:	0112      	lsls	r2, r2, #4
 80019a4:	b2d2      	uxtb	r2, r2
 80019a6:	440b      	add	r3, r1
 80019a8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80019ac:	e00a      	b.n	80019c4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019ae:	683b      	ldr	r3, [r7, #0]
 80019b0:	b2da      	uxtb	r2, r3
 80019b2:	4908      	ldr	r1, [pc, #32]	; (80019d4 <__NVIC_SetPriority+0x50>)
 80019b4:	79fb      	ldrb	r3, [r7, #7]
 80019b6:	f003 030f 	and.w	r3, r3, #15
 80019ba:	3b04      	subs	r3, #4
 80019bc:	0112      	lsls	r2, r2, #4
 80019be:	b2d2      	uxtb	r2, r2
 80019c0:	440b      	add	r3, r1
 80019c2:	761a      	strb	r2, [r3, #24]
}
 80019c4:	bf00      	nop
 80019c6:	370c      	adds	r7, #12
 80019c8:	46bd      	mov	sp, r7
 80019ca:	bc80      	pop	{r7}
 80019cc:	4770      	bx	lr
 80019ce:	bf00      	nop
 80019d0:	e000e100 	.word	0xe000e100
 80019d4:	e000ed00 	.word	0xe000ed00

080019d8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80019d8:	b480      	push	{r7}
 80019da:	b089      	sub	sp, #36	; 0x24
 80019dc:	af00      	add	r7, sp, #0
 80019de:	60f8      	str	r0, [r7, #12]
 80019e0:	60b9      	str	r1, [r7, #8]
 80019e2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80019e4:	68fb      	ldr	r3, [r7, #12]
 80019e6:	f003 0307 	and.w	r3, r3, #7
 80019ea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80019ec:	69fb      	ldr	r3, [r7, #28]
 80019ee:	f1c3 0307 	rsb	r3, r3, #7
 80019f2:	2b04      	cmp	r3, #4
 80019f4:	bf28      	it	cs
 80019f6:	2304      	movcs	r3, #4
 80019f8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80019fa:	69fb      	ldr	r3, [r7, #28]
 80019fc:	3304      	adds	r3, #4
 80019fe:	2b06      	cmp	r3, #6
 8001a00:	d902      	bls.n	8001a08 <NVIC_EncodePriority+0x30>
 8001a02:	69fb      	ldr	r3, [r7, #28]
 8001a04:	3b03      	subs	r3, #3
 8001a06:	e000      	b.n	8001a0a <NVIC_EncodePriority+0x32>
 8001a08:	2300      	movs	r3, #0
 8001a0a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a0c:	f04f 32ff 	mov.w	r2, #4294967295
 8001a10:	69bb      	ldr	r3, [r7, #24]
 8001a12:	fa02 f303 	lsl.w	r3, r2, r3
 8001a16:	43da      	mvns	r2, r3
 8001a18:	68bb      	ldr	r3, [r7, #8]
 8001a1a:	401a      	ands	r2, r3
 8001a1c:	697b      	ldr	r3, [r7, #20]
 8001a1e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a20:	f04f 31ff 	mov.w	r1, #4294967295
 8001a24:	697b      	ldr	r3, [r7, #20]
 8001a26:	fa01 f303 	lsl.w	r3, r1, r3
 8001a2a:	43d9      	mvns	r1, r3
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a30:	4313      	orrs	r3, r2
         );
}
 8001a32:	4618      	mov	r0, r3
 8001a34:	3724      	adds	r7, #36	; 0x24
 8001a36:	46bd      	mov	sp, r7
 8001a38:	bc80      	pop	{r7}
 8001a3a:	4770      	bx	lr

08001a3c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001a3c:	b580      	push	{r7, lr}
 8001a3e:	b082      	sub	sp, #8
 8001a40:	af00      	add	r7, sp, #0
 8001a42:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	3b01      	subs	r3, #1
 8001a48:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001a4c:	d301      	bcc.n	8001a52 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001a4e:	2301      	movs	r3, #1
 8001a50:	e00f      	b.n	8001a72 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001a52:	4a0a      	ldr	r2, [pc, #40]	; (8001a7c <SysTick_Config+0x40>)
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	3b01      	subs	r3, #1
 8001a58:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001a5a:	210f      	movs	r1, #15
 8001a5c:	f04f 30ff 	mov.w	r0, #4294967295
 8001a60:	f7ff ff90 	bl	8001984 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001a64:	4b05      	ldr	r3, [pc, #20]	; (8001a7c <SysTick_Config+0x40>)
 8001a66:	2200      	movs	r2, #0
 8001a68:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001a6a:	4b04      	ldr	r3, [pc, #16]	; (8001a7c <SysTick_Config+0x40>)
 8001a6c:	2207      	movs	r2, #7
 8001a6e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001a70:	2300      	movs	r3, #0
}
 8001a72:	4618      	mov	r0, r3
 8001a74:	3708      	adds	r7, #8
 8001a76:	46bd      	mov	sp, r7
 8001a78:	bd80      	pop	{r7, pc}
 8001a7a:	bf00      	nop
 8001a7c:	e000e010 	.word	0xe000e010

08001a80 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a80:	b580      	push	{r7, lr}
 8001a82:	b082      	sub	sp, #8
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001a88:	6878      	ldr	r0, [r7, #4]
 8001a8a:	f7ff ff49 	bl	8001920 <__NVIC_SetPriorityGrouping>
}
 8001a8e:	bf00      	nop
 8001a90:	3708      	adds	r7, #8
 8001a92:	46bd      	mov	sp, r7
 8001a94:	bd80      	pop	{r7, pc}

08001a96 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001a96:	b580      	push	{r7, lr}
 8001a98:	b086      	sub	sp, #24
 8001a9a:	af00      	add	r7, sp, #0
 8001a9c:	4603      	mov	r3, r0
 8001a9e:	60b9      	str	r1, [r7, #8]
 8001aa0:	607a      	str	r2, [r7, #4]
 8001aa2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001aa4:	2300      	movs	r3, #0
 8001aa6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001aa8:	f7ff ff5e 	bl	8001968 <__NVIC_GetPriorityGrouping>
 8001aac:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001aae:	687a      	ldr	r2, [r7, #4]
 8001ab0:	68b9      	ldr	r1, [r7, #8]
 8001ab2:	6978      	ldr	r0, [r7, #20]
 8001ab4:	f7ff ff90 	bl	80019d8 <NVIC_EncodePriority>
 8001ab8:	4602      	mov	r2, r0
 8001aba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001abe:	4611      	mov	r1, r2
 8001ac0:	4618      	mov	r0, r3
 8001ac2:	f7ff ff5f 	bl	8001984 <__NVIC_SetPriority>
}
 8001ac6:	bf00      	nop
 8001ac8:	3718      	adds	r7, #24
 8001aca:	46bd      	mov	sp, r7
 8001acc:	bd80      	pop	{r7, pc}

08001ace <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001ace:	b580      	push	{r7, lr}
 8001ad0:	b082      	sub	sp, #8
 8001ad2:	af00      	add	r7, sp, #0
 8001ad4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001ad6:	6878      	ldr	r0, [r7, #4]
 8001ad8:	f7ff ffb0 	bl	8001a3c <SysTick_Config>
 8001adc:	4603      	mov	r3, r0
}
 8001ade:	4618      	mov	r0, r3
 8001ae0:	3708      	adds	r7, #8
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	bd80      	pop	{r7, pc}
	...

08001ae8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001ae8:	b480      	push	{r7}
 8001aea:	b08b      	sub	sp, #44	; 0x2c
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	6078      	str	r0, [r7, #4]
 8001af0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001af2:	2300      	movs	r3, #0
 8001af4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001af6:	2300      	movs	r3, #0
 8001af8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001afa:	e169      	b.n	8001dd0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001afc:	2201      	movs	r2, #1
 8001afe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b00:	fa02 f303 	lsl.w	r3, r2, r3
 8001b04:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001b06:	683b      	ldr	r3, [r7, #0]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	69fa      	ldr	r2, [r7, #28]
 8001b0c:	4013      	ands	r3, r2
 8001b0e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001b10:	69ba      	ldr	r2, [r7, #24]
 8001b12:	69fb      	ldr	r3, [r7, #28]
 8001b14:	429a      	cmp	r2, r3
 8001b16:	f040 8158 	bne.w	8001dca <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001b1a:	683b      	ldr	r3, [r7, #0]
 8001b1c:	685b      	ldr	r3, [r3, #4]
 8001b1e:	4a9a      	ldr	r2, [pc, #616]	; (8001d88 <HAL_GPIO_Init+0x2a0>)
 8001b20:	4293      	cmp	r3, r2
 8001b22:	d05e      	beq.n	8001be2 <HAL_GPIO_Init+0xfa>
 8001b24:	4a98      	ldr	r2, [pc, #608]	; (8001d88 <HAL_GPIO_Init+0x2a0>)
 8001b26:	4293      	cmp	r3, r2
 8001b28:	d875      	bhi.n	8001c16 <HAL_GPIO_Init+0x12e>
 8001b2a:	4a98      	ldr	r2, [pc, #608]	; (8001d8c <HAL_GPIO_Init+0x2a4>)
 8001b2c:	4293      	cmp	r3, r2
 8001b2e:	d058      	beq.n	8001be2 <HAL_GPIO_Init+0xfa>
 8001b30:	4a96      	ldr	r2, [pc, #600]	; (8001d8c <HAL_GPIO_Init+0x2a4>)
 8001b32:	4293      	cmp	r3, r2
 8001b34:	d86f      	bhi.n	8001c16 <HAL_GPIO_Init+0x12e>
 8001b36:	4a96      	ldr	r2, [pc, #600]	; (8001d90 <HAL_GPIO_Init+0x2a8>)
 8001b38:	4293      	cmp	r3, r2
 8001b3a:	d052      	beq.n	8001be2 <HAL_GPIO_Init+0xfa>
 8001b3c:	4a94      	ldr	r2, [pc, #592]	; (8001d90 <HAL_GPIO_Init+0x2a8>)
 8001b3e:	4293      	cmp	r3, r2
 8001b40:	d869      	bhi.n	8001c16 <HAL_GPIO_Init+0x12e>
 8001b42:	4a94      	ldr	r2, [pc, #592]	; (8001d94 <HAL_GPIO_Init+0x2ac>)
 8001b44:	4293      	cmp	r3, r2
 8001b46:	d04c      	beq.n	8001be2 <HAL_GPIO_Init+0xfa>
 8001b48:	4a92      	ldr	r2, [pc, #584]	; (8001d94 <HAL_GPIO_Init+0x2ac>)
 8001b4a:	4293      	cmp	r3, r2
 8001b4c:	d863      	bhi.n	8001c16 <HAL_GPIO_Init+0x12e>
 8001b4e:	4a92      	ldr	r2, [pc, #584]	; (8001d98 <HAL_GPIO_Init+0x2b0>)
 8001b50:	4293      	cmp	r3, r2
 8001b52:	d046      	beq.n	8001be2 <HAL_GPIO_Init+0xfa>
 8001b54:	4a90      	ldr	r2, [pc, #576]	; (8001d98 <HAL_GPIO_Init+0x2b0>)
 8001b56:	4293      	cmp	r3, r2
 8001b58:	d85d      	bhi.n	8001c16 <HAL_GPIO_Init+0x12e>
 8001b5a:	2b12      	cmp	r3, #18
 8001b5c:	d82a      	bhi.n	8001bb4 <HAL_GPIO_Init+0xcc>
 8001b5e:	2b12      	cmp	r3, #18
 8001b60:	d859      	bhi.n	8001c16 <HAL_GPIO_Init+0x12e>
 8001b62:	a201      	add	r2, pc, #4	; (adr r2, 8001b68 <HAL_GPIO_Init+0x80>)
 8001b64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b68:	08001be3 	.word	0x08001be3
 8001b6c:	08001bbd 	.word	0x08001bbd
 8001b70:	08001bcf 	.word	0x08001bcf
 8001b74:	08001c11 	.word	0x08001c11
 8001b78:	08001c17 	.word	0x08001c17
 8001b7c:	08001c17 	.word	0x08001c17
 8001b80:	08001c17 	.word	0x08001c17
 8001b84:	08001c17 	.word	0x08001c17
 8001b88:	08001c17 	.word	0x08001c17
 8001b8c:	08001c17 	.word	0x08001c17
 8001b90:	08001c17 	.word	0x08001c17
 8001b94:	08001c17 	.word	0x08001c17
 8001b98:	08001c17 	.word	0x08001c17
 8001b9c:	08001c17 	.word	0x08001c17
 8001ba0:	08001c17 	.word	0x08001c17
 8001ba4:	08001c17 	.word	0x08001c17
 8001ba8:	08001c17 	.word	0x08001c17
 8001bac:	08001bc5 	.word	0x08001bc5
 8001bb0:	08001bd9 	.word	0x08001bd9
 8001bb4:	4a79      	ldr	r2, [pc, #484]	; (8001d9c <HAL_GPIO_Init+0x2b4>)
 8001bb6:	4293      	cmp	r3, r2
 8001bb8:	d013      	beq.n	8001be2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001bba:	e02c      	b.n	8001c16 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001bbc:	683b      	ldr	r3, [r7, #0]
 8001bbe:	68db      	ldr	r3, [r3, #12]
 8001bc0:	623b      	str	r3, [r7, #32]
          break;
 8001bc2:	e029      	b.n	8001c18 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001bc4:	683b      	ldr	r3, [r7, #0]
 8001bc6:	68db      	ldr	r3, [r3, #12]
 8001bc8:	3304      	adds	r3, #4
 8001bca:	623b      	str	r3, [r7, #32]
          break;
 8001bcc:	e024      	b.n	8001c18 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001bce:	683b      	ldr	r3, [r7, #0]
 8001bd0:	68db      	ldr	r3, [r3, #12]
 8001bd2:	3308      	adds	r3, #8
 8001bd4:	623b      	str	r3, [r7, #32]
          break;
 8001bd6:	e01f      	b.n	8001c18 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001bd8:	683b      	ldr	r3, [r7, #0]
 8001bda:	68db      	ldr	r3, [r3, #12]
 8001bdc:	330c      	adds	r3, #12
 8001bde:	623b      	str	r3, [r7, #32]
          break;
 8001be0:	e01a      	b.n	8001c18 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001be2:	683b      	ldr	r3, [r7, #0]
 8001be4:	689b      	ldr	r3, [r3, #8]
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d102      	bne.n	8001bf0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001bea:	2304      	movs	r3, #4
 8001bec:	623b      	str	r3, [r7, #32]
          break;
 8001bee:	e013      	b.n	8001c18 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001bf0:	683b      	ldr	r3, [r7, #0]
 8001bf2:	689b      	ldr	r3, [r3, #8]
 8001bf4:	2b01      	cmp	r3, #1
 8001bf6:	d105      	bne.n	8001c04 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001bf8:	2308      	movs	r3, #8
 8001bfa:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	69fa      	ldr	r2, [r7, #28]
 8001c00:	611a      	str	r2, [r3, #16]
          break;
 8001c02:	e009      	b.n	8001c18 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001c04:	2308      	movs	r3, #8
 8001c06:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	69fa      	ldr	r2, [r7, #28]
 8001c0c:	615a      	str	r2, [r3, #20]
          break;
 8001c0e:	e003      	b.n	8001c18 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001c10:	2300      	movs	r3, #0
 8001c12:	623b      	str	r3, [r7, #32]
          break;
 8001c14:	e000      	b.n	8001c18 <HAL_GPIO_Init+0x130>
          break;
 8001c16:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001c18:	69bb      	ldr	r3, [r7, #24]
 8001c1a:	2bff      	cmp	r3, #255	; 0xff
 8001c1c:	d801      	bhi.n	8001c22 <HAL_GPIO_Init+0x13a>
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	e001      	b.n	8001c26 <HAL_GPIO_Init+0x13e>
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	3304      	adds	r3, #4
 8001c26:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001c28:	69bb      	ldr	r3, [r7, #24]
 8001c2a:	2bff      	cmp	r3, #255	; 0xff
 8001c2c:	d802      	bhi.n	8001c34 <HAL_GPIO_Init+0x14c>
 8001c2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c30:	009b      	lsls	r3, r3, #2
 8001c32:	e002      	b.n	8001c3a <HAL_GPIO_Init+0x152>
 8001c34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c36:	3b08      	subs	r3, #8
 8001c38:	009b      	lsls	r3, r3, #2
 8001c3a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001c3c:	697b      	ldr	r3, [r7, #20]
 8001c3e:	681a      	ldr	r2, [r3, #0]
 8001c40:	210f      	movs	r1, #15
 8001c42:	693b      	ldr	r3, [r7, #16]
 8001c44:	fa01 f303 	lsl.w	r3, r1, r3
 8001c48:	43db      	mvns	r3, r3
 8001c4a:	401a      	ands	r2, r3
 8001c4c:	6a39      	ldr	r1, [r7, #32]
 8001c4e:	693b      	ldr	r3, [r7, #16]
 8001c50:	fa01 f303 	lsl.w	r3, r1, r3
 8001c54:	431a      	orrs	r2, r3
 8001c56:	697b      	ldr	r3, [r7, #20]
 8001c58:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001c5a:	683b      	ldr	r3, [r7, #0]
 8001c5c:	685b      	ldr	r3, [r3, #4]
 8001c5e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	f000 80b1 	beq.w	8001dca <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001c68:	4b4d      	ldr	r3, [pc, #308]	; (8001da0 <HAL_GPIO_Init+0x2b8>)
 8001c6a:	699b      	ldr	r3, [r3, #24]
 8001c6c:	4a4c      	ldr	r2, [pc, #304]	; (8001da0 <HAL_GPIO_Init+0x2b8>)
 8001c6e:	f043 0301 	orr.w	r3, r3, #1
 8001c72:	6193      	str	r3, [r2, #24]
 8001c74:	4b4a      	ldr	r3, [pc, #296]	; (8001da0 <HAL_GPIO_Init+0x2b8>)
 8001c76:	699b      	ldr	r3, [r3, #24]
 8001c78:	f003 0301 	and.w	r3, r3, #1
 8001c7c:	60bb      	str	r3, [r7, #8]
 8001c7e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001c80:	4a48      	ldr	r2, [pc, #288]	; (8001da4 <HAL_GPIO_Init+0x2bc>)
 8001c82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c84:	089b      	lsrs	r3, r3, #2
 8001c86:	3302      	adds	r3, #2
 8001c88:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c8c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001c8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c90:	f003 0303 	and.w	r3, r3, #3
 8001c94:	009b      	lsls	r3, r3, #2
 8001c96:	220f      	movs	r2, #15
 8001c98:	fa02 f303 	lsl.w	r3, r2, r3
 8001c9c:	43db      	mvns	r3, r3
 8001c9e:	68fa      	ldr	r2, [r7, #12]
 8001ca0:	4013      	ands	r3, r2
 8001ca2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	4a40      	ldr	r2, [pc, #256]	; (8001da8 <HAL_GPIO_Init+0x2c0>)
 8001ca8:	4293      	cmp	r3, r2
 8001caa:	d013      	beq.n	8001cd4 <HAL_GPIO_Init+0x1ec>
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	4a3f      	ldr	r2, [pc, #252]	; (8001dac <HAL_GPIO_Init+0x2c4>)
 8001cb0:	4293      	cmp	r3, r2
 8001cb2:	d00d      	beq.n	8001cd0 <HAL_GPIO_Init+0x1e8>
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	4a3e      	ldr	r2, [pc, #248]	; (8001db0 <HAL_GPIO_Init+0x2c8>)
 8001cb8:	4293      	cmp	r3, r2
 8001cba:	d007      	beq.n	8001ccc <HAL_GPIO_Init+0x1e4>
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	4a3d      	ldr	r2, [pc, #244]	; (8001db4 <HAL_GPIO_Init+0x2cc>)
 8001cc0:	4293      	cmp	r3, r2
 8001cc2:	d101      	bne.n	8001cc8 <HAL_GPIO_Init+0x1e0>
 8001cc4:	2303      	movs	r3, #3
 8001cc6:	e006      	b.n	8001cd6 <HAL_GPIO_Init+0x1ee>
 8001cc8:	2304      	movs	r3, #4
 8001cca:	e004      	b.n	8001cd6 <HAL_GPIO_Init+0x1ee>
 8001ccc:	2302      	movs	r3, #2
 8001cce:	e002      	b.n	8001cd6 <HAL_GPIO_Init+0x1ee>
 8001cd0:	2301      	movs	r3, #1
 8001cd2:	e000      	b.n	8001cd6 <HAL_GPIO_Init+0x1ee>
 8001cd4:	2300      	movs	r3, #0
 8001cd6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001cd8:	f002 0203 	and.w	r2, r2, #3
 8001cdc:	0092      	lsls	r2, r2, #2
 8001cde:	4093      	lsls	r3, r2
 8001ce0:	68fa      	ldr	r2, [r7, #12]
 8001ce2:	4313      	orrs	r3, r2
 8001ce4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001ce6:	492f      	ldr	r1, [pc, #188]	; (8001da4 <HAL_GPIO_Init+0x2bc>)
 8001ce8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cea:	089b      	lsrs	r3, r3, #2
 8001cec:	3302      	adds	r3, #2
 8001cee:	68fa      	ldr	r2, [r7, #12]
 8001cf0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001cf4:	683b      	ldr	r3, [r7, #0]
 8001cf6:	685b      	ldr	r3, [r3, #4]
 8001cf8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d006      	beq.n	8001d0e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001d00:	4b2d      	ldr	r3, [pc, #180]	; (8001db8 <HAL_GPIO_Init+0x2d0>)
 8001d02:	689a      	ldr	r2, [r3, #8]
 8001d04:	492c      	ldr	r1, [pc, #176]	; (8001db8 <HAL_GPIO_Init+0x2d0>)
 8001d06:	69bb      	ldr	r3, [r7, #24]
 8001d08:	4313      	orrs	r3, r2
 8001d0a:	608b      	str	r3, [r1, #8]
 8001d0c:	e006      	b.n	8001d1c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001d0e:	4b2a      	ldr	r3, [pc, #168]	; (8001db8 <HAL_GPIO_Init+0x2d0>)
 8001d10:	689a      	ldr	r2, [r3, #8]
 8001d12:	69bb      	ldr	r3, [r7, #24]
 8001d14:	43db      	mvns	r3, r3
 8001d16:	4928      	ldr	r1, [pc, #160]	; (8001db8 <HAL_GPIO_Init+0x2d0>)
 8001d18:	4013      	ands	r3, r2
 8001d1a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001d1c:	683b      	ldr	r3, [r7, #0]
 8001d1e:	685b      	ldr	r3, [r3, #4]
 8001d20:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d006      	beq.n	8001d36 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001d28:	4b23      	ldr	r3, [pc, #140]	; (8001db8 <HAL_GPIO_Init+0x2d0>)
 8001d2a:	68da      	ldr	r2, [r3, #12]
 8001d2c:	4922      	ldr	r1, [pc, #136]	; (8001db8 <HAL_GPIO_Init+0x2d0>)
 8001d2e:	69bb      	ldr	r3, [r7, #24]
 8001d30:	4313      	orrs	r3, r2
 8001d32:	60cb      	str	r3, [r1, #12]
 8001d34:	e006      	b.n	8001d44 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001d36:	4b20      	ldr	r3, [pc, #128]	; (8001db8 <HAL_GPIO_Init+0x2d0>)
 8001d38:	68da      	ldr	r2, [r3, #12]
 8001d3a:	69bb      	ldr	r3, [r7, #24]
 8001d3c:	43db      	mvns	r3, r3
 8001d3e:	491e      	ldr	r1, [pc, #120]	; (8001db8 <HAL_GPIO_Init+0x2d0>)
 8001d40:	4013      	ands	r3, r2
 8001d42:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001d44:	683b      	ldr	r3, [r7, #0]
 8001d46:	685b      	ldr	r3, [r3, #4]
 8001d48:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d006      	beq.n	8001d5e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001d50:	4b19      	ldr	r3, [pc, #100]	; (8001db8 <HAL_GPIO_Init+0x2d0>)
 8001d52:	685a      	ldr	r2, [r3, #4]
 8001d54:	4918      	ldr	r1, [pc, #96]	; (8001db8 <HAL_GPIO_Init+0x2d0>)
 8001d56:	69bb      	ldr	r3, [r7, #24]
 8001d58:	4313      	orrs	r3, r2
 8001d5a:	604b      	str	r3, [r1, #4]
 8001d5c:	e006      	b.n	8001d6c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001d5e:	4b16      	ldr	r3, [pc, #88]	; (8001db8 <HAL_GPIO_Init+0x2d0>)
 8001d60:	685a      	ldr	r2, [r3, #4]
 8001d62:	69bb      	ldr	r3, [r7, #24]
 8001d64:	43db      	mvns	r3, r3
 8001d66:	4914      	ldr	r1, [pc, #80]	; (8001db8 <HAL_GPIO_Init+0x2d0>)
 8001d68:	4013      	ands	r3, r2
 8001d6a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001d6c:	683b      	ldr	r3, [r7, #0]
 8001d6e:	685b      	ldr	r3, [r3, #4]
 8001d70:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d021      	beq.n	8001dbc <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001d78:	4b0f      	ldr	r3, [pc, #60]	; (8001db8 <HAL_GPIO_Init+0x2d0>)
 8001d7a:	681a      	ldr	r2, [r3, #0]
 8001d7c:	490e      	ldr	r1, [pc, #56]	; (8001db8 <HAL_GPIO_Init+0x2d0>)
 8001d7e:	69bb      	ldr	r3, [r7, #24]
 8001d80:	4313      	orrs	r3, r2
 8001d82:	600b      	str	r3, [r1, #0]
 8001d84:	e021      	b.n	8001dca <HAL_GPIO_Init+0x2e2>
 8001d86:	bf00      	nop
 8001d88:	10320000 	.word	0x10320000
 8001d8c:	10310000 	.word	0x10310000
 8001d90:	10220000 	.word	0x10220000
 8001d94:	10210000 	.word	0x10210000
 8001d98:	10120000 	.word	0x10120000
 8001d9c:	10110000 	.word	0x10110000
 8001da0:	40021000 	.word	0x40021000
 8001da4:	40010000 	.word	0x40010000
 8001da8:	40010800 	.word	0x40010800
 8001dac:	40010c00 	.word	0x40010c00
 8001db0:	40011000 	.word	0x40011000
 8001db4:	40011400 	.word	0x40011400
 8001db8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001dbc:	4b0b      	ldr	r3, [pc, #44]	; (8001dec <HAL_GPIO_Init+0x304>)
 8001dbe:	681a      	ldr	r2, [r3, #0]
 8001dc0:	69bb      	ldr	r3, [r7, #24]
 8001dc2:	43db      	mvns	r3, r3
 8001dc4:	4909      	ldr	r1, [pc, #36]	; (8001dec <HAL_GPIO_Init+0x304>)
 8001dc6:	4013      	ands	r3, r2
 8001dc8:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001dca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dcc:	3301      	adds	r3, #1
 8001dce:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001dd0:	683b      	ldr	r3, [r7, #0]
 8001dd2:	681a      	ldr	r2, [r3, #0]
 8001dd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dd6:	fa22 f303 	lsr.w	r3, r2, r3
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	f47f ae8e 	bne.w	8001afc <HAL_GPIO_Init+0x14>
  }
}
 8001de0:	bf00      	nop
 8001de2:	bf00      	nop
 8001de4:	372c      	adds	r7, #44	; 0x2c
 8001de6:	46bd      	mov	sp, r7
 8001de8:	bc80      	pop	{r7}
 8001dea:	4770      	bx	lr
 8001dec:	40010400 	.word	0x40010400

08001df0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001df0:	b480      	push	{r7}
 8001df2:	b083      	sub	sp, #12
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	6078      	str	r0, [r7, #4]
 8001df8:	460b      	mov	r3, r1
 8001dfa:	807b      	strh	r3, [r7, #2]
 8001dfc:	4613      	mov	r3, r2
 8001dfe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001e00:	787b      	ldrb	r3, [r7, #1]
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d003      	beq.n	8001e0e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001e06:	887a      	ldrh	r2, [r7, #2]
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001e0c:	e003      	b.n	8001e16 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001e0e:	887b      	ldrh	r3, [r7, #2]
 8001e10:	041a      	lsls	r2, r3, #16
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	611a      	str	r2, [r3, #16]
}
 8001e16:	bf00      	nop
 8001e18:	370c      	adds	r7, #12
 8001e1a:	46bd      	mov	sp, r7
 8001e1c:	bc80      	pop	{r7}
 8001e1e:	4770      	bx	lr

08001e20 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001e20:	b480      	push	{r7}
 8001e22:	b085      	sub	sp, #20
 8001e24:	af00      	add	r7, sp, #0
 8001e26:	6078      	str	r0, [r7, #4]
 8001e28:	460b      	mov	r3, r1
 8001e2a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	68db      	ldr	r3, [r3, #12]
 8001e30:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001e32:	887a      	ldrh	r2, [r7, #2]
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	4013      	ands	r3, r2
 8001e38:	041a      	lsls	r2, r3, #16
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	43d9      	mvns	r1, r3
 8001e3e:	887b      	ldrh	r3, [r7, #2]
 8001e40:	400b      	ands	r3, r1
 8001e42:	431a      	orrs	r2, r3
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	611a      	str	r2, [r3, #16]
}
 8001e48:	bf00      	nop
 8001e4a:	3714      	adds	r7, #20
 8001e4c:	46bd      	mov	sp, r7
 8001e4e:	bc80      	pop	{r7}
 8001e50:	4770      	bx	lr
	...

08001e54 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001e54:	b580      	push	{r7, lr}
 8001e56:	b086      	sub	sp, #24
 8001e58:	af00      	add	r7, sp, #0
 8001e5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d101      	bne.n	8001e66 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001e62:	2301      	movs	r3, #1
 8001e64:	e272      	b.n	800234c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	f003 0301 	and.w	r3, r3, #1
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	f000 8087 	beq.w	8001f82 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001e74:	4b92      	ldr	r3, [pc, #584]	; (80020c0 <HAL_RCC_OscConfig+0x26c>)
 8001e76:	685b      	ldr	r3, [r3, #4]
 8001e78:	f003 030c 	and.w	r3, r3, #12
 8001e7c:	2b04      	cmp	r3, #4
 8001e7e:	d00c      	beq.n	8001e9a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001e80:	4b8f      	ldr	r3, [pc, #572]	; (80020c0 <HAL_RCC_OscConfig+0x26c>)
 8001e82:	685b      	ldr	r3, [r3, #4]
 8001e84:	f003 030c 	and.w	r3, r3, #12
 8001e88:	2b08      	cmp	r3, #8
 8001e8a:	d112      	bne.n	8001eb2 <HAL_RCC_OscConfig+0x5e>
 8001e8c:	4b8c      	ldr	r3, [pc, #560]	; (80020c0 <HAL_RCC_OscConfig+0x26c>)
 8001e8e:	685b      	ldr	r3, [r3, #4]
 8001e90:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e94:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e98:	d10b      	bne.n	8001eb2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e9a:	4b89      	ldr	r3, [pc, #548]	; (80020c0 <HAL_RCC_OscConfig+0x26c>)
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d06c      	beq.n	8001f80 <HAL_RCC_OscConfig+0x12c>
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	685b      	ldr	r3, [r3, #4]
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d168      	bne.n	8001f80 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001eae:	2301      	movs	r3, #1
 8001eb0:	e24c      	b.n	800234c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	685b      	ldr	r3, [r3, #4]
 8001eb6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001eba:	d106      	bne.n	8001eca <HAL_RCC_OscConfig+0x76>
 8001ebc:	4b80      	ldr	r3, [pc, #512]	; (80020c0 <HAL_RCC_OscConfig+0x26c>)
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	4a7f      	ldr	r2, [pc, #508]	; (80020c0 <HAL_RCC_OscConfig+0x26c>)
 8001ec2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ec6:	6013      	str	r3, [r2, #0]
 8001ec8:	e02e      	b.n	8001f28 <HAL_RCC_OscConfig+0xd4>
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	685b      	ldr	r3, [r3, #4]
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d10c      	bne.n	8001eec <HAL_RCC_OscConfig+0x98>
 8001ed2:	4b7b      	ldr	r3, [pc, #492]	; (80020c0 <HAL_RCC_OscConfig+0x26c>)
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	4a7a      	ldr	r2, [pc, #488]	; (80020c0 <HAL_RCC_OscConfig+0x26c>)
 8001ed8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001edc:	6013      	str	r3, [r2, #0]
 8001ede:	4b78      	ldr	r3, [pc, #480]	; (80020c0 <HAL_RCC_OscConfig+0x26c>)
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	4a77      	ldr	r2, [pc, #476]	; (80020c0 <HAL_RCC_OscConfig+0x26c>)
 8001ee4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001ee8:	6013      	str	r3, [r2, #0]
 8001eea:	e01d      	b.n	8001f28 <HAL_RCC_OscConfig+0xd4>
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	685b      	ldr	r3, [r3, #4]
 8001ef0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001ef4:	d10c      	bne.n	8001f10 <HAL_RCC_OscConfig+0xbc>
 8001ef6:	4b72      	ldr	r3, [pc, #456]	; (80020c0 <HAL_RCC_OscConfig+0x26c>)
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	4a71      	ldr	r2, [pc, #452]	; (80020c0 <HAL_RCC_OscConfig+0x26c>)
 8001efc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001f00:	6013      	str	r3, [r2, #0]
 8001f02:	4b6f      	ldr	r3, [pc, #444]	; (80020c0 <HAL_RCC_OscConfig+0x26c>)
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	4a6e      	ldr	r2, [pc, #440]	; (80020c0 <HAL_RCC_OscConfig+0x26c>)
 8001f08:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f0c:	6013      	str	r3, [r2, #0]
 8001f0e:	e00b      	b.n	8001f28 <HAL_RCC_OscConfig+0xd4>
 8001f10:	4b6b      	ldr	r3, [pc, #428]	; (80020c0 <HAL_RCC_OscConfig+0x26c>)
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	4a6a      	ldr	r2, [pc, #424]	; (80020c0 <HAL_RCC_OscConfig+0x26c>)
 8001f16:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001f1a:	6013      	str	r3, [r2, #0]
 8001f1c:	4b68      	ldr	r3, [pc, #416]	; (80020c0 <HAL_RCC_OscConfig+0x26c>)
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	4a67      	ldr	r2, [pc, #412]	; (80020c0 <HAL_RCC_OscConfig+0x26c>)
 8001f22:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001f26:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	685b      	ldr	r3, [r3, #4]
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d013      	beq.n	8001f58 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f30:	f7ff fada 	bl	80014e8 <HAL_GetTick>
 8001f34:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f36:	e008      	b.n	8001f4a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001f38:	f7ff fad6 	bl	80014e8 <HAL_GetTick>
 8001f3c:	4602      	mov	r2, r0
 8001f3e:	693b      	ldr	r3, [r7, #16]
 8001f40:	1ad3      	subs	r3, r2, r3
 8001f42:	2b64      	cmp	r3, #100	; 0x64
 8001f44:	d901      	bls.n	8001f4a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001f46:	2303      	movs	r3, #3
 8001f48:	e200      	b.n	800234c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f4a:	4b5d      	ldr	r3, [pc, #372]	; (80020c0 <HAL_RCC_OscConfig+0x26c>)
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d0f0      	beq.n	8001f38 <HAL_RCC_OscConfig+0xe4>
 8001f56:	e014      	b.n	8001f82 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f58:	f7ff fac6 	bl	80014e8 <HAL_GetTick>
 8001f5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f5e:	e008      	b.n	8001f72 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001f60:	f7ff fac2 	bl	80014e8 <HAL_GetTick>
 8001f64:	4602      	mov	r2, r0
 8001f66:	693b      	ldr	r3, [r7, #16]
 8001f68:	1ad3      	subs	r3, r2, r3
 8001f6a:	2b64      	cmp	r3, #100	; 0x64
 8001f6c:	d901      	bls.n	8001f72 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001f6e:	2303      	movs	r3, #3
 8001f70:	e1ec      	b.n	800234c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f72:	4b53      	ldr	r3, [pc, #332]	; (80020c0 <HAL_RCC_OscConfig+0x26c>)
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d1f0      	bne.n	8001f60 <HAL_RCC_OscConfig+0x10c>
 8001f7e:	e000      	b.n	8001f82 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f80:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	f003 0302 	and.w	r3, r3, #2
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d063      	beq.n	8002056 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001f8e:	4b4c      	ldr	r3, [pc, #304]	; (80020c0 <HAL_RCC_OscConfig+0x26c>)
 8001f90:	685b      	ldr	r3, [r3, #4]
 8001f92:	f003 030c 	and.w	r3, r3, #12
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d00b      	beq.n	8001fb2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001f9a:	4b49      	ldr	r3, [pc, #292]	; (80020c0 <HAL_RCC_OscConfig+0x26c>)
 8001f9c:	685b      	ldr	r3, [r3, #4]
 8001f9e:	f003 030c 	and.w	r3, r3, #12
 8001fa2:	2b08      	cmp	r3, #8
 8001fa4:	d11c      	bne.n	8001fe0 <HAL_RCC_OscConfig+0x18c>
 8001fa6:	4b46      	ldr	r3, [pc, #280]	; (80020c0 <HAL_RCC_OscConfig+0x26c>)
 8001fa8:	685b      	ldr	r3, [r3, #4]
 8001faa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d116      	bne.n	8001fe0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001fb2:	4b43      	ldr	r3, [pc, #268]	; (80020c0 <HAL_RCC_OscConfig+0x26c>)
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	f003 0302 	and.w	r3, r3, #2
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d005      	beq.n	8001fca <HAL_RCC_OscConfig+0x176>
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	691b      	ldr	r3, [r3, #16]
 8001fc2:	2b01      	cmp	r3, #1
 8001fc4:	d001      	beq.n	8001fca <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001fc6:	2301      	movs	r3, #1
 8001fc8:	e1c0      	b.n	800234c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001fca:	4b3d      	ldr	r3, [pc, #244]	; (80020c0 <HAL_RCC_OscConfig+0x26c>)
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	695b      	ldr	r3, [r3, #20]
 8001fd6:	00db      	lsls	r3, r3, #3
 8001fd8:	4939      	ldr	r1, [pc, #228]	; (80020c0 <HAL_RCC_OscConfig+0x26c>)
 8001fda:	4313      	orrs	r3, r2
 8001fdc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001fde:	e03a      	b.n	8002056 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	691b      	ldr	r3, [r3, #16]
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d020      	beq.n	800202a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001fe8:	4b36      	ldr	r3, [pc, #216]	; (80020c4 <HAL_RCC_OscConfig+0x270>)
 8001fea:	2201      	movs	r2, #1
 8001fec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fee:	f7ff fa7b 	bl	80014e8 <HAL_GetTick>
 8001ff2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ff4:	e008      	b.n	8002008 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001ff6:	f7ff fa77 	bl	80014e8 <HAL_GetTick>
 8001ffa:	4602      	mov	r2, r0
 8001ffc:	693b      	ldr	r3, [r7, #16]
 8001ffe:	1ad3      	subs	r3, r2, r3
 8002000:	2b02      	cmp	r3, #2
 8002002:	d901      	bls.n	8002008 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002004:	2303      	movs	r3, #3
 8002006:	e1a1      	b.n	800234c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002008:	4b2d      	ldr	r3, [pc, #180]	; (80020c0 <HAL_RCC_OscConfig+0x26c>)
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	f003 0302 	and.w	r3, r3, #2
 8002010:	2b00      	cmp	r3, #0
 8002012:	d0f0      	beq.n	8001ff6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002014:	4b2a      	ldr	r3, [pc, #168]	; (80020c0 <HAL_RCC_OscConfig+0x26c>)
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	695b      	ldr	r3, [r3, #20]
 8002020:	00db      	lsls	r3, r3, #3
 8002022:	4927      	ldr	r1, [pc, #156]	; (80020c0 <HAL_RCC_OscConfig+0x26c>)
 8002024:	4313      	orrs	r3, r2
 8002026:	600b      	str	r3, [r1, #0]
 8002028:	e015      	b.n	8002056 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800202a:	4b26      	ldr	r3, [pc, #152]	; (80020c4 <HAL_RCC_OscConfig+0x270>)
 800202c:	2200      	movs	r2, #0
 800202e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002030:	f7ff fa5a 	bl	80014e8 <HAL_GetTick>
 8002034:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002036:	e008      	b.n	800204a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002038:	f7ff fa56 	bl	80014e8 <HAL_GetTick>
 800203c:	4602      	mov	r2, r0
 800203e:	693b      	ldr	r3, [r7, #16]
 8002040:	1ad3      	subs	r3, r2, r3
 8002042:	2b02      	cmp	r3, #2
 8002044:	d901      	bls.n	800204a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002046:	2303      	movs	r3, #3
 8002048:	e180      	b.n	800234c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800204a:	4b1d      	ldr	r3, [pc, #116]	; (80020c0 <HAL_RCC_OscConfig+0x26c>)
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	f003 0302 	and.w	r3, r3, #2
 8002052:	2b00      	cmp	r3, #0
 8002054:	d1f0      	bne.n	8002038 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	f003 0308 	and.w	r3, r3, #8
 800205e:	2b00      	cmp	r3, #0
 8002060:	d03a      	beq.n	80020d8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	699b      	ldr	r3, [r3, #24]
 8002066:	2b00      	cmp	r3, #0
 8002068:	d019      	beq.n	800209e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800206a:	4b17      	ldr	r3, [pc, #92]	; (80020c8 <HAL_RCC_OscConfig+0x274>)
 800206c:	2201      	movs	r2, #1
 800206e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002070:	f7ff fa3a 	bl	80014e8 <HAL_GetTick>
 8002074:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002076:	e008      	b.n	800208a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002078:	f7ff fa36 	bl	80014e8 <HAL_GetTick>
 800207c:	4602      	mov	r2, r0
 800207e:	693b      	ldr	r3, [r7, #16]
 8002080:	1ad3      	subs	r3, r2, r3
 8002082:	2b02      	cmp	r3, #2
 8002084:	d901      	bls.n	800208a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002086:	2303      	movs	r3, #3
 8002088:	e160      	b.n	800234c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800208a:	4b0d      	ldr	r3, [pc, #52]	; (80020c0 <HAL_RCC_OscConfig+0x26c>)
 800208c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800208e:	f003 0302 	and.w	r3, r3, #2
 8002092:	2b00      	cmp	r3, #0
 8002094:	d0f0      	beq.n	8002078 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002096:	2001      	movs	r0, #1
 8002098:	f000 face 	bl	8002638 <RCC_Delay>
 800209c:	e01c      	b.n	80020d8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800209e:	4b0a      	ldr	r3, [pc, #40]	; (80020c8 <HAL_RCC_OscConfig+0x274>)
 80020a0:	2200      	movs	r2, #0
 80020a2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80020a4:	f7ff fa20 	bl	80014e8 <HAL_GetTick>
 80020a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80020aa:	e00f      	b.n	80020cc <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80020ac:	f7ff fa1c 	bl	80014e8 <HAL_GetTick>
 80020b0:	4602      	mov	r2, r0
 80020b2:	693b      	ldr	r3, [r7, #16]
 80020b4:	1ad3      	subs	r3, r2, r3
 80020b6:	2b02      	cmp	r3, #2
 80020b8:	d908      	bls.n	80020cc <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80020ba:	2303      	movs	r3, #3
 80020bc:	e146      	b.n	800234c <HAL_RCC_OscConfig+0x4f8>
 80020be:	bf00      	nop
 80020c0:	40021000 	.word	0x40021000
 80020c4:	42420000 	.word	0x42420000
 80020c8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80020cc:	4b92      	ldr	r3, [pc, #584]	; (8002318 <HAL_RCC_OscConfig+0x4c4>)
 80020ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020d0:	f003 0302 	and.w	r3, r3, #2
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d1e9      	bne.n	80020ac <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	f003 0304 	and.w	r3, r3, #4
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	f000 80a6 	beq.w	8002232 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80020e6:	2300      	movs	r3, #0
 80020e8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80020ea:	4b8b      	ldr	r3, [pc, #556]	; (8002318 <HAL_RCC_OscConfig+0x4c4>)
 80020ec:	69db      	ldr	r3, [r3, #28]
 80020ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d10d      	bne.n	8002112 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80020f6:	4b88      	ldr	r3, [pc, #544]	; (8002318 <HAL_RCC_OscConfig+0x4c4>)
 80020f8:	69db      	ldr	r3, [r3, #28]
 80020fa:	4a87      	ldr	r2, [pc, #540]	; (8002318 <HAL_RCC_OscConfig+0x4c4>)
 80020fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002100:	61d3      	str	r3, [r2, #28]
 8002102:	4b85      	ldr	r3, [pc, #532]	; (8002318 <HAL_RCC_OscConfig+0x4c4>)
 8002104:	69db      	ldr	r3, [r3, #28]
 8002106:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800210a:	60bb      	str	r3, [r7, #8]
 800210c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800210e:	2301      	movs	r3, #1
 8002110:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002112:	4b82      	ldr	r3, [pc, #520]	; (800231c <HAL_RCC_OscConfig+0x4c8>)
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800211a:	2b00      	cmp	r3, #0
 800211c:	d118      	bne.n	8002150 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800211e:	4b7f      	ldr	r3, [pc, #508]	; (800231c <HAL_RCC_OscConfig+0x4c8>)
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	4a7e      	ldr	r2, [pc, #504]	; (800231c <HAL_RCC_OscConfig+0x4c8>)
 8002124:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002128:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800212a:	f7ff f9dd 	bl	80014e8 <HAL_GetTick>
 800212e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002130:	e008      	b.n	8002144 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002132:	f7ff f9d9 	bl	80014e8 <HAL_GetTick>
 8002136:	4602      	mov	r2, r0
 8002138:	693b      	ldr	r3, [r7, #16]
 800213a:	1ad3      	subs	r3, r2, r3
 800213c:	2b64      	cmp	r3, #100	; 0x64
 800213e:	d901      	bls.n	8002144 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002140:	2303      	movs	r3, #3
 8002142:	e103      	b.n	800234c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002144:	4b75      	ldr	r3, [pc, #468]	; (800231c <HAL_RCC_OscConfig+0x4c8>)
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800214c:	2b00      	cmp	r3, #0
 800214e:	d0f0      	beq.n	8002132 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	68db      	ldr	r3, [r3, #12]
 8002154:	2b01      	cmp	r3, #1
 8002156:	d106      	bne.n	8002166 <HAL_RCC_OscConfig+0x312>
 8002158:	4b6f      	ldr	r3, [pc, #444]	; (8002318 <HAL_RCC_OscConfig+0x4c4>)
 800215a:	6a1b      	ldr	r3, [r3, #32]
 800215c:	4a6e      	ldr	r2, [pc, #440]	; (8002318 <HAL_RCC_OscConfig+0x4c4>)
 800215e:	f043 0301 	orr.w	r3, r3, #1
 8002162:	6213      	str	r3, [r2, #32]
 8002164:	e02d      	b.n	80021c2 <HAL_RCC_OscConfig+0x36e>
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	68db      	ldr	r3, [r3, #12]
 800216a:	2b00      	cmp	r3, #0
 800216c:	d10c      	bne.n	8002188 <HAL_RCC_OscConfig+0x334>
 800216e:	4b6a      	ldr	r3, [pc, #424]	; (8002318 <HAL_RCC_OscConfig+0x4c4>)
 8002170:	6a1b      	ldr	r3, [r3, #32]
 8002172:	4a69      	ldr	r2, [pc, #420]	; (8002318 <HAL_RCC_OscConfig+0x4c4>)
 8002174:	f023 0301 	bic.w	r3, r3, #1
 8002178:	6213      	str	r3, [r2, #32]
 800217a:	4b67      	ldr	r3, [pc, #412]	; (8002318 <HAL_RCC_OscConfig+0x4c4>)
 800217c:	6a1b      	ldr	r3, [r3, #32]
 800217e:	4a66      	ldr	r2, [pc, #408]	; (8002318 <HAL_RCC_OscConfig+0x4c4>)
 8002180:	f023 0304 	bic.w	r3, r3, #4
 8002184:	6213      	str	r3, [r2, #32]
 8002186:	e01c      	b.n	80021c2 <HAL_RCC_OscConfig+0x36e>
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	68db      	ldr	r3, [r3, #12]
 800218c:	2b05      	cmp	r3, #5
 800218e:	d10c      	bne.n	80021aa <HAL_RCC_OscConfig+0x356>
 8002190:	4b61      	ldr	r3, [pc, #388]	; (8002318 <HAL_RCC_OscConfig+0x4c4>)
 8002192:	6a1b      	ldr	r3, [r3, #32]
 8002194:	4a60      	ldr	r2, [pc, #384]	; (8002318 <HAL_RCC_OscConfig+0x4c4>)
 8002196:	f043 0304 	orr.w	r3, r3, #4
 800219a:	6213      	str	r3, [r2, #32]
 800219c:	4b5e      	ldr	r3, [pc, #376]	; (8002318 <HAL_RCC_OscConfig+0x4c4>)
 800219e:	6a1b      	ldr	r3, [r3, #32]
 80021a0:	4a5d      	ldr	r2, [pc, #372]	; (8002318 <HAL_RCC_OscConfig+0x4c4>)
 80021a2:	f043 0301 	orr.w	r3, r3, #1
 80021a6:	6213      	str	r3, [r2, #32]
 80021a8:	e00b      	b.n	80021c2 <HAL_RCC_OscConfig+0x36e>
 80021aa:	4b5b      	ldr	r3, [pc, #364]	; (8002318 <HAL_RCC_OscConfig+0x4c4>)
 80021ac:	6a1b      	ldr	r3, [r3, #32]
 80021ae:	4a5a      	ldr	r2, [pc, #360]	; (8002318 <HAL_RCC_OscConfig+0x4c4>)
 80021b0:	f023 0301 	bic.w	r3, r3, #1
 80021b4:	6213      	str	r3, [r2, #32]
 80021b6:	4b58      	ldr	r3, [pc, #352]	; (8002318 <HAL_RCC_OscConfig+0x4c4>)
 80021b8:	6a1b      	ldr	r3, [r3, #32]
 80021ba:	4a57      	ldr	r2, [pc, #348]	; (8002318 <HAL_RCC_OscConfig+0x4c4>)
 80021bc:	f023 0304 	bic.w	r3, r3, #4
 80021c0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	68db      	ldr	r3, [r3, #12]
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d015      	beq.n	80021f6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80021ca:	f7ff f98d 	bl	80014e8 <HAL_GetTick>
 80021ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80021d0:	e00a      	b.n	80021e8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80021d2:	f7ff f989 	bl	80014e8 <HAL_GetTick>
 80021d6:	4602      	mov	r2, r0
 80021d8:	693b      	ldr	r3, [r7, #16]
 80021da:	1ad3      	subs	r3, r2, r3
 80021dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80021e0:	4293      	cmp	r3, r2
 80021e2:	d901      	bls.n	80021e8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80021e4:	2303      	movs	r3, #3
 80021e6:	e0b1      	b.n	800234c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80021e8:	4b4b      	ldr	r3, [pc, #300]	; (8002318 <HAL_RCC_OscConfig+0x4c4>)
 80021ea:	6a1b      	ldr	r3, [r3, #32]
 80021ec:	f003 0302 	and.w	r3, r3, #2
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d0ee      	beq.n	80021d2 <HAL_RCC_OscConfig+0x37e>
 80021f4:	e014      	b.n	8002220 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80021f6:	f7ff f977 	bl	80014e8 <HAL_GetTick>
 80021fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80021fc:	e00a      	b.n	8002214 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80021fe:	f7ff f973 	bl	80014e8 <HAL_GetTick>
 8002202:	4602      	mov	r2, r0
 8002204:	693b      	ldr	r3, [r7, #16]
 8002206:	1ad3      	subs	r3, r2, r3
 8002208:	f241 3288 	movw	r2, #5000	; 0x1388
 800220c:	4293      	cmp	r3, r2
 800220e:	d901      	bls.n	8002214 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002210:	2303      	movs	r3, #3
 8002212:	e09b      	b.n	800234c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002214:	4b40      	ldr	r3, [pc, #256]	; (8002318 <HAL_RCC_OscConfig+0x4c4>)
 8002216:	6a1b      	ldr	r3, [r3, #32]
 8002218:	f003 0302 	and.w	r3, r3, #2
 800221c:	2b00      	cmp	r3, #0
 800221e:	d1ee      	bne.n	80021fe <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002220:	7dfb      	ldrb	r3, [r7, #23]
 8002222:	2b01      	cmp	r3, #1
 8002224:	d105      	bne.n	8002232 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002226:	4b3c      	ldr	r3, [pc, #240]	; (8002318 <HAL_RCC_OscConfig+0x4c4>)
 8002228:	69db      	ldr	r3, [r3, #28]
 800222a:	4a3b      	ldr	r2, [pc, #236]	; (8002318 <HAL_RCC_OscConfig+0x4c4>)
 800222c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002230:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	69db      	ldr	r3, [r3, #28]
 8002236:	2b00      	cmp	r3, #0
 8002238:	f000 8087 	beq.w	800234a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800223c:	4b36      	ldr	r3, [pc, #216]	; (8002318 <HAL_RCC_OscConfig+0x4c4>)
 800223e:	685b      	ldr	r3, [r3, #4]
 8002240:	f003 030c 	and.w	r3, r3, #12
 8002244:	2b08      	cmp	r3, #8
 8002246:	d061      	beq.n	800230c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	69db      	ldr	r3, [r3, #28]
 800224c:	2b02      	cmp	r3, #2
 800224e:	d146      	bne.n	80022de <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002250:	4b33      	ldr	r3, [pc, #204]	; (8002320 <HAL_RCC_OscConfig+0x4cc>)
 8002252:	2200      	movs	r2, #0
 8002254:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002256:	f7ff f947 	bl	80014e8 <HAL_GetTick>
 800225a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800225c:	e008      	b.n	8002270 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800225e:	f7ff f943 	bl	80014e8 <HAL_GetTick>
 8002262:	4602      	mov	r2, r0
 8002264:	693b      	ldr	r3, [r7, #16]
 8002266:	1ad3      	subs	r3, r2, r3
 8002268:	2b02      	cmp	r3, #2
 800226a:	d901      	bls.n	8002270 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800226c:	2303      	movs	r3, #3
 800226e:	e06d      	b.n	800234c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002270:	4b29      	ldr	r3, [pc, #164]	; (8002318 <HAL_RCC_OscConfig+0x4c4>)
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002278:	2b00      	cmp	r3, #0
 800227a:	d1f0      	bne.n	800225e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	6a1b      	ldr	r3, [r3, #32]
 8002280:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002284:	d108      	bne.n	8002298 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002286:	4b24      	ldr	r3, [pc, #144]	; (8002318 <HAL_RCC_OscConfig+0x4c4>)
 8002288:	685b      	ldr	r3, [r3, #4]
 800228a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	689b      	ldr	r3, [r3, #8]
 8002292:	4921      	ldr	r1, [pc, #132]	; (8002318 <HAL_RCC_OscConfig+0x4c4>)
 8002294:	4313      	orrs	r3, r2
 8002296:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002298:	4b1f      	ldr	r3, [pc, #124]	; (8002318 <HAL_RCC_OscConfig+0x4c4>)
 800229a:	685b      	ldr	r3, [r3, #4]
 800229c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	6a19      	ldr	r1, [r3, #32]
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022a8:	430b      	orrs	r3, r1
 80022aa:	491b      	ldr	r1, [pc, #108]	; (8002318 <HAL_RCC_OscConfig+0x4c4>)
 80022ac:	4313      	orrs	r3, r2
 80022ae:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80022b0:	4b1b      	ldr	r3, [pc, #108]	; (8002320 <HAL_RCC_OscConfig+0x4cc>)
 80022b2:	2201      	movs	r2, #1
 80022b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022b6:	f7ff f917 	bl	80014e8 <HAL_GetTick>
 80022ba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80022bc:	e008      	b.n	80022d0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80022be:	f7ff f913 	bl	80014e8 <HAL_GetTick>
 80022c2:	4602      	mov	r2, r0
 80022c4:	693b      	ldr	r3, [r7, #16]
 80022c6:	1ad3      	subs	r3, r2, r3
 80022c8:	2b02      	cmp	r3, #2
 80022ca:	d901      	bls.n	80022d0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80022cc:	2303      	movs	r3, #3
 80022ce:	e03d      	b.n	800234c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80022d0:	4b11      	ldr	r3, [pc, #68]	; (8002318 <HAL_RCC_OscConfig+0x4c4>)
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d0f0      	beq.n	80022be <HAL_RCC_OscConfig+0x46a>
 80022dc:	e035      	b.n	800234a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80022de:	4b10      	ldr	r3, [pc, #64]	; (8002320 <HAL_RCC_OscConfig+0x4cc>)
 80022e0:	2200      	movs	r2, #0
 80022e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022e4:	f7ff f900 	bl	80014e8 <HAL_GetTick>
 80022e8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80022ea:	e008      	b.n	80022fe <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80022ec:	f7ff f8fc 	bl	80014e8 <HAL_GetTick>
 80022f0:	4602      	mov	r2, r0
 80022f2:	693b      	ldr	r3, [r7, #16]
 80022f4:	1ad3      	subs	r3, r2, r3
 80022f6:	2b02      	cmp	r3, #2
 80022f8:	d901      	bls.n	80022fe <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80022fa:	2303      	movs	r3, #3
 80022fc:	e026      	b.n	800234c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80022fe:	4b06      	ldr	r3, [pc, #24]	; (8002318 <HAL_RCC_OscConfig+0x4c4>)
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002306:	2b00      	cmp	r3, #0
 8002308:	d1f0      	bne.n	80022ec <HAL_RCC_OscConfig+0x498>
 800230a:	e01e      	b.n	800234a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	69db      	ldr	r3, [r3, #28]
 8002310:	2b01      	cmp	r3, #1
 8002312:	d107      	bne.n	8002324 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002314:	2301      	movs	r3, #1
 8002316:	e019      	b.n	800234c <HAL_RCC_OscConfig+0x4f8>
 8002318:	40021000 	.word	0x40021000
 800231c:	40007000 	.word	0x40007000
 8002320:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002324:	4b0b      	ldr	r3, [pc, #44]	; (8002354 <HAL_RCC_OscConfig+0x500>)
 8002326:	685b      	ldr	r3, [r3, #4]
 8002328:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	6a1b      	ldr	r3, [r3, #32]
 8002334:	429a      	cmp	r2, r3
 8002336:	d106      	bne.n	8002346 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002342:	429a      	cmp	r2, r3
 8002344:	d001      	beq.n	800234a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002346:	2301      	movs	r3, #1
 8002348:	e000      	b.n	800234c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800234a:	2300      	movs	r3, #0
}
 800234c:	4618      	mov	r0, r3
 800234e:	3718      	adds	r7, #24
 8002350:	46bd      	mov	sp, r7
 8002352:	bd80      	pop	{r7, pc}
 8002354:	40021000 	.word	0x40021000

08002358 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002358:	b580      	push	{r7, lr}
 800235a:	b084      	sub	sp, #16
 800235c:	af00      	add	r7, sp, #0
 800235e:	6078      	str	r0, [r7, #4]
 8002360:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	2b00      	cmp	r3, #0
 8002366:	d101      	bne.n	800236c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002368:	2301      	movs	r3, #1
 800236a:	e0d0      	b.n	800250e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800236c:	4b6a      	ldr	r3, [pc, #424]	; (8002518 <HAL_RCC_ClockConfig+0x1c0>)
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	f003 0307 	and.w	r3, r3, #7
 8002374:	683a      	ldr	r2, [r7, #0]
 8002376:	429a      	cmp	r2, r3
 8002378:	d910      	bls.n	800239c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800237a:	4b67      	ldr	r3, [pc, #412]	; (8002518 <HAL_RCC_ClockConfig+0x1c0>)
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	f023 0207 	bic.w	r2, r3, #7
 8002382:	4965      	ldr	r1, [pc, #404]	; (8002518 <HAL_RCC_ClockConfig+0x1c0>)
 8002384:	683b      	ldr	r3, [r7, #0]
 8002386:	4313      	orrs	r3, r2
 8002388:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800238a:	4b63      	ldr	r3, [pc, #396]	; (8002518 <HAL_RCC_ClockConfig+0x1c0>)
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	f003 0307 	and.w	r3, r3, #7
 8002392:	683a      	ldr	r2, [r7, #0]
 8002394:	429a      	cmp	r2, r3
 8002396:	d001      	beq.n	800239c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002398:	2301      	movs	r3, #1
 800239a:	e0b8      	b.n	800250e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	f003 0302 	and.w	r3, r3, #2
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d020      	beq.n	80023ea <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	f003 0304 	and.w	r3, r3, #4
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d005      	beq.n	80023c0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80023b4:	4b59      	ldr	r3, [pc, #356]	; (800251c <HAL_RCC_ClockConfig+0x1c4>)
 80023b6:	685b      	ldr	r3, [r3, #4]
 80023b8:	4a58      	ldr	r2, [pc, #352]	; (800251c <HAL_RCC_ClockConfig+0x1c4>)
 80023ba:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80023be:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	f003 0308 	and.w	r3, r3, #8
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d005      	beq.n	80023d8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80023cc:	4b53      	ldr	r3, [pc, #332]	; (800251c <HAL_RCC_ClockConfig+0x1c4>)
 80023ce:	685b      	ldr	r3, [r3, #4]
 80023d0:	4a52      	ldr	r2, [pc, #328]	; (800251c <HAL_RCC_ClockConfig+0x1c4>)
 80023d2:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80023d6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80023d8:	4b50      	ldr	r3, [pc, #320]	; (800251c <HAL_RCC_ClockConfig+0x1c4>)
 80023da:	685b      	ldr	r3, [r3, #4]
 80023dc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	689b      	ldr	r3, [r3, #8]
 80023e4:	494d      	ldr	r1, [pc, #308]	; (800251c <HAL_RCC_ClockConfig+0x1c4>)
 80023e6:	4313      	orrs	r3, r2
 80023e8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	f003 0301 	and.w	r3, r3, #1
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d040      	beq.n	8002478 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	685b      	ldr	r3, [r3, #4]
 80023fa:	2b01      	cmp	r3, #1
 80023fc:	d107      	bne.n	800240e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023fe:	4b47      	ldr	r3, [pc, #284]	; (800251c <HAL_RCC_ClockConfig+0x1c4>)
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002406:	2b00      	cmp	r3, #0
 8002408:	d115      	bne.n	8002436 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800240a:	2301      	movs	r3, #1
 800240c:	e07f      	b.n	800250e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	685b      	ldr	r3, [r3, #4]
 8002412:	2b02      	cmp	r3, #2
 8002414:	d107      	bne.n	8002426 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002416:	4b41      	ldr	r3, [pc, #260]	; (800251c <HAL_RCC_ClockConfig+0x1c4>)
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800241e:	2b00      	cmp	r3, #0
 8002420:	d109      	bne.n	8002436 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002422:	2301      	movs	r3, #1
 8002424:	e073      	b.n	800250e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002426:	4b3d      	ldr	r3, [pc, #244]	; (800251c <HAL_RCC_ClockConfig+0x1c4>)
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	f003 0302 	and.w	r3, r3, #2
 800242e:	2b00      	cmp	r3, #0
 8002430:	d101      	bne.n	8002436 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002432:	2301      	movs	r3, #1
 8002434:	e06b      	b.n	800250e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002436:	4b39      	ldr	r3, [pc, #228]	; (800251c <HAL_RCC_ClockConfig+0x1c4>)
 8002438:	685b      	ldr	r3, [r3, #4]
 800243a:	f023 0203 	bic.w	r2, r3, #3
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	685b      	ldr	r3, [r3, #4]
 8002442:	4936      	ldr	r1, [pc, #216]	; (800251c <HAL_RCC_ClockConfig+0x1c4>)
 8002444:	4313      	orrs	r3, r2
 8002446:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002448:	f7ff f84e 	bl	80014e8 <HAL_GetTick>
 800244c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800244e:	e00a      	b.n	8002466 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002450:	f7ff f84a 	bl	80014e8 <HAL_GetTick>
 8002454:	4602      	mov	r2, r0
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	1ad3      	subs	r3, r2, r3
 800245a:	f241 3288 	movw	r2, #5000	; 0x1388
 800245e:	4293      	cmp	r3, r2
 8002460:	d901      	bls.n	8002466 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002462:	2303      	movs	r3, #3
 8002464:	e053      	b.n	800250e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002466:	4b2d      	ldr	r3, [pc, #180]	; (800251c <HAL_RCC_ClockConfig+0x1c4>)
 8002468:	685b      	ldr	r3, [r3, #4]
 800246a:	f003 020c 	and.w	r2, r3, #12
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	685b      	ldr	r3, [r3, #4]
 8002472:	009b      	lsls	r3, r3, #2
 8002474:	429a      	cmp	r2, r3
 8002476:	d1eb      	bne.n	8002450 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002478:	4b27      	ldr	r3, [pc, #156]	; (8002518 <HAL_RCC_ClockConfig+0x1c0>)
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	f003 0307 	and.w	r3, r3, #7
 8002480:	683a      	ldr	r2, [r7, #0]
 8002482:	429a      	cmp	r2, r3
 8002484:	d210      	bcs.n	80024a8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002486:	4b24      	ldr	r3, [pc, #144]	; (8002518 <HAL_RCC_ClockConfig+0x1c0>)
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	f023 0207 	bic.w	r2, r3, #7
 800248e:	4922      	ldr	r1, [pc, #136]	; (8002518 <HAL_RCC_ClockConfig+0x1c0>)
 8002490:	683b      	ldr	r3, [r7, #0]
 8002492:	4313      	orrs	r3, r2
 8002494:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002496:	4b20      	ldr	r3, [pc, #128]	; (8002518 <HAL_RCC_ClockConfig+0x1c0>)
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	f003 0307 	and.w	r3, r3, #7
 800249e:	683a      	ldr	r2, [r7, #0]
 80024a0:	429a      	cmp	r2, r3
 80024a2:	d001      	beq.n	80024a8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80024a4:	2301      	movs	r3, #1
 80024a6:	e032      	b.n	800250e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	f003 0304 	and.w	r3, r3, #4
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d008      	beq.n	80024c6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80024b4:	4b19      	ldr	r3, [pc, #100]	; (800251c <HAL_RCC_ClockConfig+0x1c4>)
 80024b6:	685b      	ldr	r3, [r3, #4]
 80024b8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	68db      	ldr	r3, [r3, #12]
 80024c0:	4916      	ldr	r1, [pc, #88]	; (800251c <HAL_RCC_ClockConfig+0x1c4>)
 80024c2:	4313      	orrs	r3, r2
 80024c4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	f003 0308 	and.w	r3, r3, #8
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d009      	beq.n	80024e6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80024d2:	4b12      	ldr	r3, [pc, #72]	; (800251c <HAL_RCC_ClockConfig+0x1c4>)
 80024d4:	685b      	ldr	r3, [r3, #4]
 80024d6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	691b      	ldr	r3, [r3, #16]
 80024de:	00db      	lsls	r3, r3, #3
 80024e0:	490e      	ldr	r1, [pc, #56]	; (800251c <HAL_RCC_ClockConfig+0x1c4>)
 80024e2:	4313      	orrs	r3, r2
 80024e4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80024e6:	f000 f821 	bl	800252c <HAL_RCC_GetSysClockFreq>
 80024ea:	4602      	mov	r2, r0
 80024ec:	4b0b      	ldr	r3, [pc, #44]	; (800251c <HAL_RCC_ClockConfig+0x1c4>)
 80024ee:	685b      	ldr	r3, [r3, #4]
 80024f0:	091b      	lsrs	r3, r3, #4
 80024f2:	f003 030f 	and.w	r3, r3, #15
 80024f6:	490a      	ldr	r1, [pc, #40]	; (8002520 <HAL_RCC_ClockConfig+0x1c8>)
 80024f8:	5ccb      	ldrb	r3, [r1, r3]
 80024fa:	fa22 f303 	lsr.w	r3, r2, r3
 80024fe:	4a09      	ldr	r2, [pc, #36]	; (8002524 <HAL_RCC_ClockConfig+0x1cc>)
 8002500:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002502:	4b09      	ldr	r3, [pc, #36]	; (8002528 <HAL_RCC_ClockConfig+0x1d0>)
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	4618      	mov	r0, r3
 8002508:	f7fe ffac 	bl	8001464 <HAL_InitTick>

  return HAL_OK;
 800250c:	2300      	movs	r3, #0
}
 800250e:	4618      	mov	r0, r3
 8002510:	3710      	adds	r7, #16
 8002512:	46bd      	mov	sp, r7
 8002514:	bd80      	pop	{r7, pc}
 8002516:	bf00      	nop
 8002518:	40022000 	.word	0x40022000
 800251c:	40021000 	.word	0x40021000
 8002520:	08002a0c 	.word	0x08002a0c
 8002524:	20000000 	.word	0x20000000
 8002528:	20000004 	.word	0x20000004

0800252c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800252c:	b480      	push	{r7}
 800252e:	b087      	sub	sp, #28
 8002530:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002532:	2300      	movs	r3, #0
 8002534:	60fb      	str	r3, [r7, #12]
 8002536:	2300      	movs	r3, #0
 8002538:	60bb      	str	r3, [r7, #8]
 800253a:	2300      	movs	r3, #0
 800253c:	617b      	str	r3, [r7, #20]
 800253e:	2300      	movs	r3, #0
 8002540:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002542:	2300      	movs	r3, #0
 8002544:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002546:	4b1e      	ldr	r3, [pc, #120]	; (80025c0 <HAL_RCC_GetSysClockFreq+0x94>)
 8002548:	685b      	ldr	r3, [r3, #4]
 800254a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	f003 030c 	and.w	r3, r3, #12
 8002552:	2b04      	cmp	r3, #4
 8002554:	d002      	beq.n	800255c <HAL_RCC_GetSysClockFreq+0x30>
 8002556:	2b08      	cmp	r3, #8
 8002558:	d003      	beq.n	8002562 <HAL_RCC_GetSysClockFreq+0x36>
 800255a:	e027      	b.n	80025ac <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800255c:	4b19      	ldr	r3, [pc, #100]	; (80025c4 <HAL_RCC_GetSysClockFreq+0x98>)
 800255e:	613b      	str	r3, [r7, #16]
      break;
 8002560:	e027      	b.n	80025b2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	0c9b      	lsrs	r3, r3, #18
 8002566:	f003 030f 	and.w	r3, r3, #15
 800256a:	4a17      	ldr	r2, [pc, #92]	; (80025c8 <HAL_RCC_GetSysClockFreq+0x9c>)
 800256c:	5cd3      	ldrb	r3, [r2, r3]
 800256e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002576:	2b00      	cmp	r3, #0
 8002578:	d010      	beq.n	800259c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800257a:	4b11      	ldr	r3, [pc, #68]	; (80025c0 <HAL_RCC_GetSysClockFreq+0x94>)
 800257c:	685b      	ldr	r3, [r3, #4]
 800257e:	0c5b      	lsrs	r3, r3, #17
 8002580:	f003 0301 	and.w	r3, r3, #1
 8002584:	4a11      	ldr	r2, [pc, #68]	; (80025cc <HAL_RCC_GetSysClockFreq+0xa0>)
 8002586:	5cd3      	ldrb	r3, [r2, r3]
 8002588:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	4a0d      	ldr	r2, [pc, #52]	; (80025c4 <HAL_RCC_GetSysClockFreq+0x98>)
 800258e:	fb03 f202 	mul.w	r2, r3, r2
 8002592:	68bb      	ldr	r3, [r7, #8]
 8002594:	fbb2 f3f3 	udiv	r3, r2, r3
 8002598:	617b      	str	r3, [r7, #20]
 800259a:	e004      	b.n	80025a6 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	4a0c      	ldr	r2, [pc, #48]	; (80025d0 <HAL_RCC_GetSysClockFreq+0xa4>)
 80025a0:	fb02 f303 	mul.w	r3, r2, r3
 80025a4:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80025a6:	697b      	ldr	r3, [r7, #20]
 80025a8:	613b      	str	r3, [r7, #16]
      break;
 80025aa:	e002      	b.n	80025b2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80025ac:	4b05      	ldr	r3, [pc, #20]	; (80025c4 <HAL_RCC_GetSysClockFreq+0x98>)
 80025ae:	613b      	str	r3, [r7, #16]
      break;
 80025b0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80025b2:	693b      	ldr	r3, [r7, #16]
}
 80025b4:	4618      	mov	r0, r3
 80025b6:	371c      	adds	r7, #28
 80025b8:	46bd      	mov	sp, r7
 80025ba:	bc80      	pop	{r7}
 80025bc:	4770      	bx	lr
 80025be:	bf00      	nop
 80025c0:	40021000 	.word	0x40021000
 80025c4:	007a1200 	.word	0x007a1200
 80025c8:	08002a24 	.word	0x08002a24
 80025cc:	08002a34 	.word	0x08002a34
 80025d0:	003d0900 	.word	0x003d0900

080025d4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80025d4:	b480      	push	{r7}
 80025d6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80025d8:	4b02      	ldr	r3, [pc, #8]	; (80025e4 <HAL_RCC_GetHCLKFreq+0x10>)
 80025da:	681b      	ldr	r3, [r3, #0]
}
 80025dc:	4618      	mov	r0, r3
 80025de:	46bd      	mov	sp, r7
 80025e0:	bc80      	pop	{r7}
 80025e2:	4770      	bx	lr
 80025e4:	20000000 	.word	0x20000000

080025e8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80025e8:	b580      	push	{r7, lr}
 80025ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80025ec:	f7ff fff2 	bl	80025d4 <HAL_RCC_GetHCLKFreq>
 80025f0:	4602      	mov	r2, r0
 80025f2:	4b05      	ldr	r3, [pc, #20]	; (8002608 <HAL_RCC_GetPCLK1Freq+0x20>)
 80025f4:	685b      	ldr	r3, [r3, #4]
 80025f6:	0a1b      	lsrs	r3, r3, #8
 80025f8:	f003 0307 	and.w	r3, r3, #7
 80025fc:	4903      	ldr	r1, [pc, #12]	; (800260c <HAL_RCC_GetPCLK1Freq+0x24>)
 80025fe:	5ccb      	ldrb	r3, [r1, r3]
 8002600:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002604:	4618      	mov	r0, r3
 8002606:	bd80      	pop	{r7, pc}
 8002608:	40021000 	.word	0x40021000
 800260c:	08002a1c 	.word	0x08002a1c

08002610 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002610:	b580      	push	{r7, lr}
 8002612:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002614:	f7ff ffde 	bl	80025d4 <HAL_RCC_GetHCLKFreq>
 8002618:	4602      	mov	r2, r0
 800261a:	4b05      	ldr	r3, [pc, #20]	; (8002630 <HAL_RCC_GetPCLK2Freq+0x20>)
 800261c:	685b      	ldr	r3, [r3, #4]
 800261e:	0adb      	lsrs	r3, r3, #11
 8002620:	f003 0307 	and.w	r3, r3, #7
 8002624:	4903      	ldr	r1, [pc, #12]	; (8002634 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002626:	5ccb      	ldrb	r3, [r1, r3]
 8002628:	fa22 f303 	lsr.w	r3, r2, r3
}
 800262c:	4618      	mov	r0, r3
 800262e:	bd80      	pop	{r7, pc}
 8002630:	40021000 	.word	0x40021000
 8002634:	08002a1c 	.word	0x08002a1c

08002638 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002638:	b480      	push	{r7}
 800263a:	b085      	sub	sp, #20
 800263c:	af00      	add	r7, sp, #0
 800263e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002640:	4b0a      	ldr	r3, [pc, #40]	; (800266c <RCC_Delay+0x34>)
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	4a0a      	ldr	r2, [pc, #40]	; (8002670 <RCC_Delay+0x38>)
 8002646:	fba2 2303 	umull	r2, r3, r2, r3
 800264a:	0a5b      	lsrs	r3, r3, #9
 800264c:	687a      	ldr	r2, [r7, #4]
 800264e:	fb02 f303 	mul.w	r3, r2, r3
 8002652:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002654:	bf00      	nop
  }
  while (Delay --);
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	1e5a      	subs	r2, r3, #1
 800265a:	60fa      	str	r2, [r7, #12]
 800265c:	2b00      	cmp	r3, #0
 800265e:	d1f9      	bne.n	8002654 <RCC_Delay+0x1c>
}
 8002660:	bf00      	nop
 8002662:	bf00      	nop
 8002664:	3714      	adds	r7, #20
 8002666:	46bd      	mov	sp, r7
 8002668:	bc80      	pop	{r7}
 800266a:	4770      	bx	lr
 800266c:	20000000 	.word	0x20000000
 8002670:	10624dd3 	.word	0x10624dd3

08002674 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002674:	b580      	push	{r7, lr}
 8002676:	b086      	sub	sp, #24
 8002678:	af00      	add	r7, sp, #0
 800267a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 800267c:	2300      	movs	r3, #0
 800267e:	613b      	str	r3, [r7, #16]
 8002680:	2300      	movs	r3, #0
 8002682:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	f003 0301 	and.w	r3, r3, #1
 800268c:	2b00      	cmp	r3, #0
 800268e:	d07d      	beq.n	800278c <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8002690:	2300      	movs	r3, #0
 8002692:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002694:	4b4f      	ldr	r3, [pc, #316]	; (80027d4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002696:	69db      	ldr	r3, [r3, #28]
 8002698:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800269c:	2b00      	cmp	r3, #0
 800269e:	d10d      	bne.n	80026bc <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80026a0:	4b4c      	ldr	r3, [pc, #304]	; (80027d4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80026a2:	69db      	ldr	r3, [r3, #28]
 80026a4:	4a4b      	ldr	r2, [pc, #300]	; (80027d4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80026a6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80026aa:	61d3      	str	r3, [r2, #28]
 80026ac:	4b49      	ldr	r3, [pc, #292]	; (80027d4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80026ae:	69db      	ldr	r3, [r3, #28]
 80026b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026b4:	60bb      	str	r3, [r7, #8]
 80026b6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80026b8:	2301      	movs	r3, #1
 80026ba:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026bc:	4b46      	ldr	r3, [pc, #280]	; (80027d8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d118      	bne.n	80026fa <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80026c8:	4b43      	ldr	r3, [pc, #268]	; (80027d8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	4a42      	ldr	r2, [pc, #264]	; (80027d8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80026ce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80026d2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80026d4:	f7fe ff08 	bl	80014e8 <HAL_GetTick>
 80026d8:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026da:	e008      	b.n	80026ee <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80026dc:	f7fe ff04 	bl	80014e8 <HAL_GetTick>
 80026e0:	4602      	mov	r2, r0
 80026e2:	693b      	ldr	r3, [r7, #16]
 80026e4:	1ad3      	subs	r3, r2, r3
 80026e6:	2b64      	cmp	r3, #100	; 0x64
 80026e8:	d901      	bls.n	80026ee <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 80026ea:	2303      	movs	r3, #3
 80026ec:	e06d      	b.n	80027ca <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026ee:	4b3a      	ldr	r3, [pc, #232]	; (80027d8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d0f0      	beq.n	80026dc <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80026fa:	4b36      	ldr	r3, [pc, #216]	; (80027d4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80026fc:	6a1b      	ldr	r3, [r3, #32]
 80026fe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002702:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	2b00      	cmp	r3, #0
 8002708:	d02e      	beq.n	8002768 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	685b      	ldr	r3, [r3, #4]
 800270e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002712:	68fa      	ldr	r2, [r7, #12]
 8002714:	429a      	cmp	r2, r3
 8002716:	d027      	beq.n	8002768 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002718:	4b2e      	ldr	r3, [pc, #184]	; (80027d4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800271a:	6a1b      	ldr	r3, [r3, #32]
 800271c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002720:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002722:	4b2e      	ldr	r3, [pc, #184]	; (80027dc <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002724:	2201      	movs	r2, #1
 8002726:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002728:	4b2c      	ldr	r3, [pc, #176]	; (80027dc <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800272a:	2200      	movs	r2, #0
 800272c:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800272e:	4a29      	ldr	r2, [pc, #164]	; (80027d4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	f003 0301 	and.w	r3, r3, #1
 800273a:	2b00      	cmp	r3, #0
 800273c:	d014      	beq.n	8002768 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800273e:	f7fe fed3 	bl	80014e8 <HAL_GetTick>
 8002742:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002744:	e00a      	b.n	800275c <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002746:	f7fe fecf 	bl	80014e8 <HAL_GetTick>
 800274a:	4602      	mov	r2, r0
 800274c:	693b      	ldr	r3, [r7, #16]
 800274e:	1ad3      	subs	r3, r2, r3
 8002750:	f241 3288 	movw	r2, #5000	; 0x1388
 8002754:	4293      	cmp	r3, r2
 8002756:	d901      	bls.n	800275c <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8002758:	2303      	movs	r3, #3
 800275a:	e036      	b.n	80027ca <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800275c:	4b1d      	ldr	r3, [pc, #116]	; (80027d4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800275e:	6a1b      	ldr	r3, [r3, #32]
 8002760:	f003 0302 	and.w	r3, r3, #2
 8002764:	2b00      	cmp	r3, #0
 8002766:	d0ee      	beq.n	8002746 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002768:	4b1a      	ldr	r3, [pc, #104]	; (80027d4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800276a:	6a1b      	ldr	r3, [r3, #32]
 800276c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	685b      	ldr	r3, [r3, #4]
 8002774:	4917      	ldr	r1, [pc, #92]	; (80027d4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002776:	4313      	orrs	r3, r2
 8002778:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800277a:	7dfb      	ldrb	r3, [r7, #23]
 800277c:	2b01      	cmp	r3, #1
 800277e:	d105      	bne.n	800278c <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002780:	4b14      	ldr	r3, [pc, #80]	; (80027d4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002782:	69db      	ldr	r3, [r3, #28]
 8002784:	4a13      	ldr	r2, [pc, #76]	; (80027d4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002786:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800278a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	f003 0302 	and.w	r3, r3, #2
 8002794:	2b00      	cmp	r3, #0
 8002796:	d008      	beq.n	80027aa <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002798:	4b0e      	ldr	r3, [pc, #56]	; (80027d4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800279a:	685b      	ldr	r3, [r3, #4]
 800279c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	689b      	ldr	r3, [r3, #8]
 80027a4:	490b      	ldr	r1, [pc, #44]	; (80027d4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80027a6:	4313      	orrs	r3, r2
 80027a8:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	f003 0310 	and.w	r3, r3, #16
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d008      	beq.n	80027c8 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80027b6:	4b07      	ldr	r3, [pc, #28]	; (80027d4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80027b8:	685b      	ldr	r3, [r3, #4]
 80027ba:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	68db      	ldr	r3, [r3, #12]
 80027c2:	4904      	ldr	r1, [pc, #16]	; (80027d4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80027c4:	4313      	orrs	r3, r2
 80027c6:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80027c8:	2300      	movs	r3, #0
}
 80027ca:	4618      	mov	r0, r3
 80027cc:	3718      	adds	r7, #24
 80027ce:	46bd      	mov	sp, r7
 80027d0:	bd80      	pop	{r7, pc}
 80027d2:	bf00      	nop
 80027d4:	40021000 	.word	0x40021000
 80027d8:	40007000 	.word	0x40007000
 80027dc:	42420440 	.word	0x42420440

080027e0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80027e0:	b580      	push	{r7, lr}
 80027e2:	b082      	sub	sp, #8
 80027e4:	af00      	add	r7, sp, #0
 80027e6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d101      	bne.n	80027f2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80027ee:	2301      	movs	r3, #1
 80027f0:	e042      	b.n	8002878 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80027f8:	b2db      	uxtb	r3, r3
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d106      	bne.n	800280c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	2200      	movs	r2, #0
 8002802:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002806:	6878      	ldr	r0, [r7, #4]
 8002808:	f7fe fd78 	bl	80012fc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	2224      	movs	r2, #36	; 0x24
 8002810:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	68da      	ldr	r2, [r3, #12]
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002822:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002824:	6878      	ldr	r0, [r7, #4]
 8002826:	f000 f82b 	bl	8002880 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	691a      	ldr	r2, [r3, #16]
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002838:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	695a      	ldr	r2, [r3, #20]
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002848:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	68da      	ldr	r2, [r3, #12]
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002858:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	2200      	movs	r2, #0
 800285e:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	2220      	movs	r2, #32
 8002864:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	2220      	movs	r2, #32
 800286c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	2200      	movs	r2, #0
 8002874:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8002876:	2300      	movs	r3, #0
}
 8002878:	4618      	mov	r0, r3
 800287a:	3708      	adds	r7, #8
 800287c:	46bd      	mov	sp, r7
 800287e:	bd80      	pop	{r7, pc}

08002880 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002880:	b580      	push	{r7, lr}
 8002882:	b084      	sub	sp, #16
 8002884:	af00      	add	r7, sp, #0
 8002886:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	691b      	ldr	r3, [r3, #16]
 800288e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	68da      	ldr	r2, [r3, #12]
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	430a      	orrs	r2, r1
 800289c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	689a      	ldr	r2, [r3, #8]
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	691b      	ldr	r3, [r3, #16]
 80028a6:	431a      	orrs	r2, r3
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	695b      	ldr	r3, [r3, #20]
 80028ac:	4313      	orrs	r3, r2
 80028ae:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	68db      	ldr	r3, [r3, #12]
 80028b6:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80028ba:	f023 030c 	bic.w	r3, r3, #12
 80028be:	687a      	ldr	r2, [r7, #4]
 80028c0:	6812      	ldr	r2, [r2, #0]
 80028c2:	68b9      	ldr	r1, [r7, #8]
 80028c4:	430b      	orrs	r3, r1
 80028c6:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	695b      	ldr	r3, [r3, #20]
 80028ce:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	699a      	ldr	r2, [r3, #24]
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	430a      	orrs	r2, r1
 80028dc:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	4a2c      	ldr	r2, [pc, #176]	; (8002994 <UART_SetConfig+0x114>)
 80028e4:	4293      	cmp	r3, r2
 80028e6:	d103      	bne.n	80028f0 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80028e8:	f7ff fe92 	bl	8002610 <HAL_RCC_GetPCLK2Freq>
 80028ec:	60f8      	str	r0, [r7, #12]
 80028ee:	e002      	b.n	80028f6 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80028f0:	f7ff fe7a 	bl	80025e8 <HAL_RCC_GetPCLK1Freq>
 80028f4:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80028f6:	68fa      	ldr	r2, [r7, #12]
 80028f8:	4613      	mov	r3, r2
 80028fa:	009b      	lsls	r3, r3, #2
 80028fc:	4413      	add	r3, r2
 80028fe:	009a      	lsls	r2, r3, #2
 8002900:	441a      	add	r2, r3
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	685b      	ldr	r3, [r3, #4]
 8002906:	009b      	lsls	r3, r3, #2
 8002908:	fbb2 f3f3 	udiv	r3, r2, r3
 800290c:	4a22      	ldr	r2, [pc, #136]	; (8002998 <UART_SetConfig+0x118>)
 800290e:	fba2 2303 	umull	r2, r3, r2, r3
 8002912:	095b      	lsrs	r3, r3, #5
 8002914:	0119      	lsls	r1, r3, #4
 8002916:	68fa      	ldr	r2, [r7, #12]
 8002918:	4613      	mov	r3, r2
 800291a:	009b      	lsls	r3, r3, #2
 800291c:	4413      	add	r3, r2
 800291e:	009a      	lsls	r2, r3, #2
 8002920:	441a      	add	r2, r3
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	685b      	ldr	r3, [r3, #4]
 8002926:	009b      	lsls	r3, r3, #2
 8002928:	fbb2 f2f3 	udiv	r2, r2, r3
 800292c:	4b1a      	ldr	r3, [pc, #104]	; (8002998 <UART_SetConfig+0x118>)
 800292e:	fba3 0302 	umull	r0, r3, r3, r2
 8002932:	095b      	lsrs	r3, r3, #5
 8002934:	2064      	movs	r0, #100	; 0x64
 8002936:	fb00 f303 	mul.w	r3, r0, r3
 800293a:	1ad3      	subs	r3, r2, r3
 800293c:	011b      	lsls	r3, r3, #4
 800293e:	3332      	adds	r3, #50	; 0x32
 8002940:	4a15      	ldr	r2, [pc, #84]	; (8002998 <UART_SetConfig+0x118>)
 8002942:	fba2 2303 	umull	r2, r3, r2, r3
 8002946:	095b      	lsrs	r3, r3, #5
 8002948:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800294c:	4419      	add	r1, r3
 800294e:	68fa      	ldr	r2, [r7, #12]
 8002950:	4613      	mov	r3, r2
 8002952:	009b      	lsls	r3, r3, #2
 8002954:	4413      	add	r3, r2
 8002956:	009a      	lsls	r2, r3, #2
 8002958:	441a      	add	r2, r3
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	685b      	ldr	r3, [r3, #4]
 800295e:	009b      	lsls	r3, r3, #2
 8002960:	fbb2 f2f3 	udiv	r2, r2, r3
 8002964:	4b0c      	ldr	r3, [pc, #48]	; (8002998 <UART_SetConfig+0x118>)
 8002966:	fba3 0302 	umull	r0, r3, r3, r2
 800296a:	095b      	lsrs	r3, r3, #5
 800296c:	2064      	movs	r0, #100	; 0x64
 800296e:	fb00 f303 	mul.w	r3, r0, r3
 8002972:	1ad3      	subs	r3, r2, r3
 8002974:	011b      	lsls	r3, r3, #4
 8002976:	3332      	adds	r3, #50	; 0x32
 8002978:	4a07      	ldr	r2, [pc, #28]	; (8002998 <UART_SetConfig+0x118>)
 800297a:	fba2 2303 	umull	r2, r3, r2, r3
 800297e:	095b      	lsrs	r3, r3, #5
 8002980:	f003 020f 	and.w	r2, r3, #15
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	440a      	add	r2, r1
 800298a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800298c:	bf00      	nop
 800298e:	3710      	adds	r7, #16
 8002990:	46bd      	mov	sp, r7
 8002992:	bd80      	pop	{r7, pc}
 8002994:	40013800 	.word	0x40013800
 8002998:	51eb851f 	.word	0x51eb851f

0800299c <__libc_init_array>:
 800299c:	b570      	push	{r4, r5, r6, lr}
 800299e:	2600      	movs	r6, #0
 80029a0:	4d0c      	ldr	r5, [pc, #48]	; (80029d4 <__libc_init_array+0x38>)
 80029a2:	4c0d      	ldr	r4, [pc, #52]	; (80029d8 <__libc_init_array+0x3c>)
 80029a4:	1b64      	subs	r4, r4, r5
 80029a6:	10a4      	asrs	r4, r4, #2
 80029a8:	42a6      	cmp	r6, r4
 80029aa:	d109      	bne.n	80029c0 <__libc_init_array+0x24>
 80029ac:	f000 f822 	bl	80029f4 <_init>
 80029b0:	2600      	movs	r6, #0
 80029b2:	4d0a      	ldr	r5, [pc, #40]	; (80029dc <__libc_init_array+0x40>)
 80029b4:	4c0a      	ldr	r4, [pc, #40]	; (80029e0 <__libc_init_array+0x44>)
 80029b6:	1b64      	subs	r4, r4, r5
 80029b8:	10a4      	asrs	r4, r4, #2
 80029ba:	42a6      	cmp	r6, r4
 80029bc:	d105      	bne.n	80029ca <__libc_init_array+0x2e>
 80029be:	bd70      	pop	{r4, r5, r6, pc}
 80029c0:	f855 3b04 	ldr.w	r3, [r5], #4
 80029c4:	4798      	blx	r3
 80029c6:	3601      	adds	r6, #1
 80029c8:	e7ee      	b.n	80029a8 <__libc_init_array+0xc>
 80029ca:	f855 3b04 	ldr.w	r3, [r5], #4
 80029ce:	4798      	blx	r3
 80029d0:	3601      	adds	r6, #1
 80029d2:	e7f2      	b.n	80029ba <__libc_init_array+0x1e>
 80029d4:	08002a38 	.word	0x08002a38
 80029d8:	08002a38 	.word	0x08002a38
 80029dc:	08002a38 	.word	0x08002a38
 80029e0:	08002a3c 	.word	0x08002a3c

080029e4 <memset>:
 80029e4:	4603      	mov	r3, r0
 80029e6:	4402      	add	r2, r0
 80029e8:	4293      	cmp	r3, r2
 80029ea:	d100      	bne.n	80029ee <memset+0xa>
 80029ec:	4770      	bx	lr
 80029ee:	f803 1b01 	strb.w	r1, [r3], #1
 80029f2:	e7f9      	b.n	80029e8 <memset+0x4>

080029f4 <_init>:
 80029f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80029f6:	bf00      	nop
 80029f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80029fa:	bc08      	pop	{r3}
 80029fc:	469e      	mov	lr, r3
 80029fe:	4770      	bx	lr

08002a00 <_fini>:
 8002a00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002a02:	bf00      	nop
 8002a04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002a06:	bc08      	pop	{r3}
 8002a08:	469e      	mov	lr, r3
 8002a0a:	4770      	bx	lr
